%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: cars4.eps
%%Creator: Adobe Illustrator(R) 21.1
%%For: Alexander Sementsov
%%CreationDate: 3/15/2019
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 21.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 21.1.0 x326 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 7984 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8
%FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8
%FDFCA8FDFCA8FD92A8FFA8AFA8FFA8AFA8AFA8AFA8AFA8AFA8AFA8AFA8AF
%FD69A8FD047D76A17DA1769A76A1769A76A1769A76A17DA17DFD65A8FFA8
%7D2721275252765227F84B6F6F4468688C688CFD056893689376A1A8AFA8
%AFFD5DA87D27F8002752525227F8F8525227F8F8F82068682020F820F8F8
%F8272020206F6FA1A8AFFD58A8FFA87D27F8F84C527D5252F821277D2727
%F8F8F827F820F805F800F827F800F827F8F8208C689376FD58A87D52F8F8
%005252522727F8275252FD15F820FD05689AA1FD53A8FF7D27F827527D52
%52272727525252F8F8F827F827F827F8F8F827F827F827F827F827F805F8
%68688C688C688C6FA8A8AFA8FFA8AFA8AFA8A8A8AFA8A8A8AFA8A8A8AFFD
%3DA827F8F8FD0552F8F8277D27FD0AF827FD0EF8688CFD0768937DA17DA8
%A1A1A1A8A1A8A1FD08A8AFFD34A8A168A1A8FFA852F8F82752527D5227F8
%525252F8F8F800F827F800F8274468446868682005F800F827F800F80520
%68688C6868688C6868688C6868688C688C6893689368936F936F936F9A76
%A1FD33A8686876AF5227F827287D5252F8F800525227FD0AF8446F686868
%6E686820FD08F820FD0B688CFD13689AFD26A8AFA8AFA8AFA8AFA8FFA8AF
%A86F44762EF8F852527D5252F827527D2727F821F827F827F827F800206F
%686F6893686F686F2005F827F805F84B688C688C688C688C688CFD05688C
%688C688C688C68936F936F936F93688C68FD28A8A1A176A1A1A17DA1A1A8
%2027F8F8275952522727F82E5252FD0BF80020684468FD06442020F8F8F8
%204468688CFD07688C4420FD04F8208C686868936F6F6893688C688CFD04
%6876FD22A8A1A19A9A999A93936F936868688C686868696F76527627F827
%7D5227F800F805F827F821F827F821448C44202027202720FD04446F6868
%688C6868688C6868688C688C68686844F8F8F82068936F936F936868688C
%444B204B688C689AFD1FA87DA1769A6F936F6FFD0D688CFD05686F686844
%6844684468446F4468686F688CFD09688CFD106844684420FD04F820936F
%93FD0668FD05F820686868FD1EA89A9A939A6F93FD07688C688C688C688C
%688C688C688C688C688C688C68FD07936F93686F686F68686893688C688C
%688C688C688C688C688C686F6868446FFD0444F820F8F8F86F6F93688C68
%8C6868F805F8F8F827F8276893FD1BA8A1A8A1996F6F686844FD0F6844FD
%0868936F996F93FD06684468446844684468446844FD06688C68684468FD
%0A442020F8F8F8276FFD06688C20F8F8272752F8F8F86868FD1BA8FFA8A1
%FD07688C6868688C6868686F68684468686844FD046893939A6F93FD0668
%44FD04686E44684468686E446844FD0568446FFD0D4420F820F8F8269368
%68688C688C4405F8272752525827F84493FD1AA8FFA16F44FD0D68446844
%68446844684468446F6F936F93FD04684468446844684444FD0520FD1B44
%F820F8F8F86FFD076844F82727202727F87DF84468FD19A8CA9A68686F68
%68688C688C688C6868686F6868686F6868686F6868689A9393688C688C68
%6F6868686E68684427F8F8F827F805F827FD0B4468FD074468446F446F44
%20F820F84B688C688C688C688C200527F8F8A852527D522093A8AFFD14A8
%FFA89AFD0E6844684468446844FD04689376A8A8A8A16868684468446844
%68446820FD0AF820FD0F44684468446844686844F820F827FD096820F852
%27527DA87D522E2068FD13A8AFA8CA9A6F6868688C688C688C688C686F68
%6844FD076844686FA1A8AFAFAFA89A6868446868684468686EFD05F82727
%27FD05F827FD07446F446844FD076844686868F820F8F84B936868688C68
%68688CF82752A8AE27527D527D2093FD13A8A1A16F6844FD0B6844684468
%446868684444446F7CAF8BAF85A8766844684468446844684468FD04F827
%52277D7D7DFD05F8FD0444684468446844684468446844684468446820F8
%F8F82093FD0968F8272752A8277D275252206FFD12A89A9368686893688C
%688C688C686F6868686F6868686F444A20444BA1A8AFAFAFA8A16868446E
%6868686E6868686FF8F8F82752522727522E52A827F8F8052068444B4468
%686E6868686E6868686EFD04684420F84B4B93688C688C688C688C688CF8
%27F82783AE7D587D5220A1FD11A86FFD0D6844686868446844684468446F
%76AFAFAF8BAF766E44684468446844684468446820F8F8F85227F827277D
%F82727A8F8F8F820444444684468446844684468446844684468686F4B6F
%6F93FD0B68F8F827277D2727277D0544A1FD10A8688C6868688C6868688C
%6868686F6868686F686E686F688C689AA8AFAFAFA8A1FD04684468686844
%686868446E44F8F8F85227F82727275227F827527DF8F8F84B4444446E68
%684468686844686868446F6F9A6F99688C688C688C688C688C688C6868F8
%F8277D2E27275227207DAFFD0FA87DFD0968446844684468446844FD0668
%A184AF8BA8766F44684468446844684468446844444420F8F8F852F8F8F8
%277D7DF8F8F87DA827F8F820FD044468446844684468446E686F6F9A6EFD
%07684444202020FD0468F8F8277D52527D52F852AFFD11A8689AA793688C
%686F686F686E686F6868688C688C68936FA1AFAFAFA1FD05686E6868686E
%6868446F4444444BF8F8F8522727F8F827FFA82752FF7D5252F8F84B4444
%446E68684468686F6F9A6F9A6F93688C688C6868444BFD07F8446893FD04
%F82752F8F852FFFD11A86F68A093FD066844FD0A686F6868A1A89A936868
%44684468446844684468FD064420F8F8272727F8F8F87DA8AEA8A827052D
%84F8F820FD044468446E6E9A6F936E93FD086820FD07F8275252A8A8A852
%27F820F8527DFD12A8768C6868686FFD07688C688C688C6868688C686868
%8D686844FD07684468FD094420F8F827FD047DA8A87D52FF7D527D527D27
%F84B4444446F6F9A6F936E936868688C6868688C688C6844F8F8F827527D
%7DA8A8FFA8A8A8FFFD05A8FFFD11A87D6F6F9368684468686F6893FD1068
%44684468FD1044F8F8F852522727FFA87DF8277DAE52277D7DF8F820FD04
%4493FD0F684427527DA8A8FFFD21A8524B6F6F6893688C68FD046F9A9399
%FD04936893688C686F6868446FFD07446844444468444444684420F8F852
%7D52A8FFFF7D27277D52F827A87D27F84B4468446F688C688C688C688C68
%8C688C689A9AA184FFA8FFA8FFFD23A8F8F8F8FD0468442044F8F8204444
%6F6F9393996F93444420FD1544F8F8F85227F8F852A8A82727A852F8527D
%7DF805FD0544FD08686F6F9AA1A8A8AFFD28A8FF7DFD04F868688C684420
%26FD07F844448C4444204420FD134420F8F8F82752F8F8F8A8FFA8A8A87D
%5252A87DF8F84BFD04446868688C689A76FD04A8AFFD2CA87DFD04F8448C
%6868444420FD09F820442044204420FD1344F8F8F82727F8F827A852A8A8
%52F859527D52F8F820FD04446F6F9A7DFD33A8FFA827F8F8F820688C6868
%204A20FD09F820442044204B444444684444446844444468444444684444
%4427F8F8F858F8F852A8277DF87D2D277DA827F852A1A1FD04A8AFA8FFFD
%35A85227F8F8F844688C68442044FD09F8202044202020FD1344FD04F82D
%27F87D2D7D27F8F852277D7DF8F8FD3FA8FFA8A87D522068686F44442044
%FD09F844204420FD12446E6844F8F8F82752277D2E52F8F82727527D27F8
%52FD45A84444FD0520442020FD06F82044204420FD09442044204444FD04
%688C44FD04F852A8592727F85259585827F8277DFD46A86F6FFD04442044
%204B204420272044204B2044444B4444444B4444446E6868688C68936F9A
%9AA852FD04F8A87D5852FD047D52F8F87DFFFD47A8A1A1766F6868444420
%442044204A2044204420FD0444FD0668936F9A7DFD04A8AFA8A827FD04F8
%527D7D597D5227F8F852FD4BA8AFA8A8A1A176936F6F686FFD05688C688C
%6893939A9AFD04A8AFA8AFFD08A852FD04F8272727F8F8F82752FFFD53A8
%A1A8A1A176A17DA176A1A1FD15A87D52FD07F8527DFD55A8AFA8AFA8FFA8
%AFA8FFA8A8A8AFFD13A8FFA8A87D7D527D7DA8A8FFFD7AA8FFFDFCA8FDFC
%A8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFC
%A8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FD93
%A8A8
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c137 79.159768, 2016/08/11-13:24:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">cars4</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 2017 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2019-03-15T15:42:33+02:00</xmp:CreateDate>
         <xmp:ModifyDate>2019-03-15T15:42:33+02:00</xmp:ModifyDate>
         <xmp:MetadataDate>2019-03-15T15:42:33+02:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7LirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqEudY0m1Yrc3tvAw6i&#xA;SVEI7ftEYpAvkpDzH5eIJGqWhA6n14v+asjxDvbBgyH+E/JafM/loEg6tZAjYg3EX/NWDxI94bPy&#xA;eb+ZL/Slr/FHln/q72X/AEkRf81Y+JHvC/k838yX+lK5PMvlx2CJqtmzHoq3ERP3BsfEj3hB0mYc&#xA;4S+RRcF5aXG9vPHMOv7t1bpt2JyQILVLHKPMEK2Fg7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FWC/mB+cXlPyajwTy/X9Xp8GmW7AuD29Z9xEPnv4A4aV4/qXm38z/PT&#xA;k3l03l/QX6WdryjeRD2Y19RqjryIXuFxVLfrnljyt/oWm25vNVk+H0Yf3lw7Ur+8cA8enQfMLiqW&#xA;6w80irc+b736rbn44NCtDV3AO3Mg7/Z61+lemKsY1jzXNdxra2FvHp9hER6UUYBkNO7yUqT8vprk&#xA;TiieYDk49Zmh9M5D4lCxeY544ysyiWQsOLfZoO9eI+XbMXJook7bO603tJmhAiY4z0PL51zWtrl6&#xA;4O4Wm9UAH/Eg+TGjxhoye0OrkbEhH3Afpt0Wu3sbh+bMRuK8BQ+PwoDh/KY+5r/l7V/z/wDYx/Uy&#xA;XQPzc8+aXdRLZ6pMLetDDI3qpTvRZOSD6Fwyw8I9JLDHrxkmBmjGUSdzXCfnGnsflv8A5yBcFYfM&#xA;VgGHQ3dnsfm0Tn76N9GYuPW/zg7vV+zA54ZfCX6/2PVNB80+X9fg9bSb6O6AFXjU0kX/AFo2o6/S&#xA;MzYZIy5F5nU6LLgNZIkfd801ybiuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVjHnrzz&#xA;b+U7O3me2N3PdMywxB1iWkYBYliG8ey/dlWXKIB2HZ/Z8tTIgGqRd9508uad5ct/MGqXiWOn3UMc&#xA;8RlPxsJUDqiqtWdqHotcsibFuFkxmEjE8waeLeZ/zi85ecGksPJkD6RoxJSTV5jxncf5DCvp/wCw&#xA;q3uMkwYtDo3lbyqn1/U5xc6gxLieb4pGetSYo/i3r+1uR44qp3eo6/q8DTySf4e0IbtcSmlzKvUc&#xA;enGvt/w2KsbuPNmnaTE9p5Yt/TLbS6nOOU0nuoPQGnf/AIEYaVis889xK008jSzOavI5LMT7k74p&#xA;V9O06e+lMcQNF3YgFj9AGVZcogLc3Q6KWonwg1XMpi/liR1RQZOakkngTUmnb6MxPzpvk7w+zgr6&#xA;z8v2oLUNKurE1kVjGdw3EqQO5Kn2rmTizifvdNruzcmn3O8e9AkEGh2I6jL3XtpH6jrHXjzIWvux&#xA;pgkaCYxMiAOZZpnPPrirbXVzazpcWszwTxmsc0TFHU+IZaEYQSOTGcIyFSFh6L5f/PbzTp0HoajF&#xA;HqqKKJLITFMP9Z1BDfStffMuGskOe7oNV7N4MhuBMPtCb/8AQxV5/wBWOP8A6SG/6p5P88e5xP8A&#xA;QrH/AFQ/6X9qt/0MZ/373/T5/wBeMP57y+1h/oU/2z/Y/wDHlZf+cirTiOWhyBqbgXCkV+fpjD+e&#xA;Hcx/0Ky/1T/Y/tVl/wCch9IKjno9wG7gSIR99Bh/PDuYH2Wyfzx8k50L87/J+p3UdrOs+nSykKj3&#xA;CqYuTbAF0Zqb92AGWQ1cCa5OHqfZ3UY4mQqYHdz+T0LMp0LsVdirsVdirsVdirsVS3U/MWjaaSt3&#xA;dKklK+ktXf8A4FakV98hLJGPMuTg0eXL9MdmNaj+aulWyF4rdig29Sd1hWv/AA+US1Q6B2eLsOZ+&#xA;qQHu3/Uxe9/PQRuRELdivSNEkkJ/2QZVyo6sufD2fhW5l9n6kvl/5yE1BQPS02GQ9SXLJ+AeT9eR&#xA;/Onubh7MwP8AFIfj3MQ/MT8xrrzlDpyGzWwksGlYsH9ZZPUCihRlSlOHjkJ6sS5hydP7PywkmGSr&#xA;/o/tY/bNYahdx3fma8n1CS2VYrO3daW0MSCiRpGrN8IAHw7DxrmRDWwqqp1Wo9m9TZkDGV/A/j4p&#xA;hqXmq8kdbDRIo7WIAL9fuCqxoANuEQ5H5VH0d8tGqx97gy7C1Y/g+0frS6U6dpDm6gRtf1x9ze3D&#xA;ARRkdOIY9tqU/wCCGS/MQ72r+SNV/qcmL6t/ibVrj174mUgngnNAiA9lUNQdP64fzGPvX+SNV/qc&#xA;kCND1Q/7pH/BoP8AjbH8zj70jsfVH+Ar49A1EuokVY0J+J+aNQfJSTkJavGBztvw9g6qUgDHhHea&#xA;TaCGSyAjtIWPd5uQViQDTfMGWXj3kaejxaOWm9GHHxd8iQL/AGfj3rfWdUNSY6nrUzkEn/gG/Xka&#xA;x/zvsbBLWX/dgf56ncx393btC/GNWBFWkaWldjQcU/XhhkhE3ux1Oj1WfGYEYxfmT/vUDD5b4tyl&#xA;uS3hRR+PLll0tf3BwMXst/Pn8h+n9iYW2m2dseUaVf8Anbc/RXp9GYuTUTnzLvNH2Tp9ObjH1d53&#xA;P7Pgispdk0zKo5MQB0qfHCIksJZIx5kJJqd5cI8ggv6Mgr6Sximwr9vfNhhxRPOP2vJdo9oZYXwZ&#xA;rPcIAfaXeW7/AFO/vjatWclCygLVqgj+XHU4IxjYG69idrZ8mbgySuNHu2ZYdLht/wDe+4WJh/x7&#xA;x/vJduxoeK/ScwOGub1PjGX0C/PkGjfafBvbWatxr+9uSZCR48RxQfjhsdAgwlVylQ8tvtSq4868&#xA;D6KTyBF6fVlWNP8AheFcyo6WZG5p0Gft3SwlUYmfn0+1q11GC9BeNyzD7Sv9ofPrlGXDKB3dvoO0&#xA;sWpj6NiOYPN9deSdUfVfKWk38h5SzW0frN4yIODn6WU5tsMuKAL572hh8LPOI5CR+XRO8scN2Kux&#xA;V2KuxVtQzNwQFnP7I/z2wEpAt59+aH5g6BpGnPp0GombWCwD29mwIRQPiWR/ev8AZmLnzACgd3f9&#xA;k9mzlLjlH0ef6A8LvvNur3ZIiYWsTV+zu1Ce7nf/AIGmYBk9bDTj3pPJJJK5kmdpZD1ZySfvO+QM&#xA;nKjhprelOg29hkdy2emKwyIPfp0yQi1yz9zXrdfhBr0JrUfcRh4Q1nLJdEJnIVU5tIaJsevtSmPC&#xA;EeNLvTWPQbhVEl/IlhEd/wB8auQOvFB8RwGDKOpvkLK/1PLlr8KQy6hJ3d29KP5qB8X0HHZJ8Q8y&#xA;IhRn8wbUhtLWCnRo4VZqU7luQwtfpHWUvih5vMWqMlPX9NFpQqFjpQdPhCimSFlonKMdzt+PNL5t&#xA;dkdeT3/qBhuPV7eFCRlngz7nD/lLTg/UFkd8GIYuQCNmYchT/hsgcZDkx1cSNjsu+uRh93Vge9CB&#xA;+AGDw20avzXm6txSrihFR3++lcj4Zcj87jq1Jr+MD4VJNe+wpkhiaZa8dApNfyGvFQAeldyMkMYc&#xA;eWtyHyUmuZ2pVyKdKbfqyYiA0SyylzJUwCTTucLWTSRXEhdpZB8PMsaDsD2zOiKeUzy4rPeyjynB&#xA;Lp+lSXQJS41DZGGzLBGTuNv239/2cxdZk34Q9B7N6HY5ZDyCNzXvXJRr087mHT7ZWee5IHBASzVP&#xA;FVUDrybM/RY79ReU9ptaYgYY/wAW593QJh5e8p6DK04vp7i6EEUpu3spEhjjeO3nueCu8c/rDhas&#xA;pICip25AVOxeLJQ17oR0a90+8s7j67peo1SC4VeB5bB4pUBIDpyVtiQwofECnUR4oF2XY+oOPUwI&#xA;6mj8dn1d+UIkH5daOJDVuMxHyNxIV/DBpf7sNvbtfm515f7kMwy91LsVdirmYKCzEBQKknoBirHP&#xA;MP5geV9CgaS7uxLKAfTtrf8AeSufalQo9z92UTzxi7LS9l5cp5UPN4t5x/ObzLrqyWen/wC4fSn2&#xA;MUJPrSDp+8k+0fh8KZg5NQT5PWaHsXHj3Pql3nl8Hnu3XqT1J3zGMneRxAOJ7sevc4ALTKYit5k1&#xA;4rXxJ6CuTEWiWYnktIJPxt0NKDeny7YWqiV0UZklWKKNppm6RKCzNXpxVd8IBapZoR5l6l5N/IPz&#xA;NqvC51h/0RZ9lIBuGG/7Pb/ZZl4tHKXPYOi1vtJgxbQHHL7Pn+p6Hf8Akb8o/JOmGTVZTEXU0LzM&#xA;LmXcAhBFxc7+Gwy+eDFjG5dTp+1dfqp/u4ivdsPm+fPM17olxrl3PokU8emSOGto7pucoHEcubVa&#xA;tWr3PzOayQBO3J7fBlyRxgToz61yShnZup28MCmRPNC319FZxc3+KRv7uPx9z7ZdhwmZ8nW9odoR&#xA;08e+R5BKbe113XXlFpBJcJbIZpuA+CKNf2nY0VR2qTuc2cMYiNnjNTrMmaVzP6k9i/KvznNYLd2M&#xA;NtqAfnW2trmCS4DQn94gh5CRmXaqoCdxk3Ftiwe4tZmQhopYyVmiYEEMpoQynwPj0yMog827Fmnj&#xA;NxNJxFIssayL0YVp4eIzXzjwmnsNNnGWAkOqusEjBTSit0J+dMgSA5MYE8l62h5EMwA7ECv66ZHj&#xA;DMYJLhapx+Ikt4jYYONmNP5rxDEKUUVHzNfnXBxlmMEVHUJUgtJXAAZx6YptUtt2+/LMIMpOL2hO&#xA;OPCe87BKdG0qTU71bcAiEAtcy0NI4gKs3fenT3zOlMRFl5fFp5ZpCEerK5WRn/dr6cSgJFGOiooo&#xA;q/QBmolIyNl9EwYY4oCEeQCzItqhpFvY3nma5+v3AtbeztDSc8gFMrpFUkJNQ/6QaHj1p06jb6Qf&#xA;uw+ee0Ur1Uh3Afdb2Xy/5X8seU9N0+xs1XzTZee5IrK+ZJUkS3VPhaOOS3/3YGnNSGH2e3XMh0TG&#xA;vOT2d95PuntENtpuj6otvp1qsDWaJLbywxvxt/iYFkuiGaZzIxWrEbIIz5Fu0pIzR/rD73tX5Vxv&#xA;H+X2iq4oTCzAezSMwP3HK9N/dh2HbRB1c/f+gMry91bsVdirxH82PzQ1FdUuvL2nIYIrVgk8zHeR&#xA;uNT8P8ortX/a1up1BvhD2nYfZEOAZp7mXLyeRzzzzymWZ2kkbqzGpzCJepjEAUFlOnv0xAtEpiPN&#xA;bWtKdTT3P3dMmIuPLKT5NAVoQKnbc7+1PD78NtN3y3b4VpuSe3y8PbI8TaMUz/RZ15F/JfXvNb+v&#xA;PK+n6WhpJM4HNq/sqtBU/PMvT4ZT8g892xr8GnFGUpzPS9nt+m+Wfy0/LTTVuZTDayf8tlyedxKw&#xA;6+moBYn4uiDNhw48Qs83khl1eulw4weHuHL4n9bzzzr/AM5GXc/O08q25tY+h1C4CtKf9SP4kX5t&#xA;yqOwOYmXXE7R2d/oPZjHD1ZjxnuHL9Z+z4vG9R1PUNSu5LzULiS6upTWSaVi7Ham5ap6Zgkk7l6e&#xA;EIxHDEUAhsDJSmuI4VLMQSATTwp45ZCBJcbPqY44k9yS6dZTa7rIieUQRENJcXLiqwwRAs7kVFeK&#xA;jZR9o0UbkZtoQERQeC1OollmZy6prqevNNCml6UjWWiwMfq9qp+N2O3qzuoHqSt3PQdFAUAZJx6Z&#xA;v5+Op+XdO0iCW3ks7ganrEpjeNoS8ZmhMUqlgpKkfYYYGIFu84eW9Q81+Qj55SykXUdLKJe33plV&#xA;vrVthKxp8csHR27p1Pw4piXmulEmKQV+AFSo/wBYGu+38uY2pHIvQdi5D6o/FOLYkxbmtCQB4Dr/&#xA;ABzBm9PpzsQqZW5DaqzMFUFmPQDc4VTaw8sandEM6fV4j1eTrT2XrhEWqWYBVv8ARPKMRBnklvZU&#xA;FBEj0QGnivEdt9ycsjm4BQcafZ0s8uKd1+PihZLqNYTbWcCWdoSCYYhuxHQu5+JjlM8hlzdnpdDj&#xA;wj0jdL5b+yibjJPGrdaFhXGOGZ5BcvaOnxmpTjfvVY5I5FDxsHU9GU1GQMSNi5OPLGY4okEeSTpc&#xA;W8PmaaG7l9GzvIxb3Eu5VRJGpR3ABJWOQI7ACu22bfS/3YfOu3jern8P9yHtMl75+8vaTpXk3ysx&#xA;aGG3hS9vCVNlL9YVru49OXbmsrXXp/B8fGIcPt5kOntJrfTtZ85alYeSbaQyyWFwuoeYtTLCRIxG&#xA;OEKGQE85QrHnWhZgK/ErnITjYIb9LkGPJGZ34TfyfSNhZW9hY29lbLwt7WNIYV8ERQq/gMlEUKY5&#xA;chnIyPMm1fCwdiqXeYtai0XRrjU5U9RYOICV4gtI6xoC1DQcnFTTIzlQtu0+LxJiJNW+em/MDXtM&#xA;1/VdZuNOtR5g1AKtvfSx8haoqlCbdDVCzKAObV6e5zUHJLiJrd9BGgxHFHGJHw49L+r39fgwyOC4&#xA;mlKRRtLOaniBUnv06nKwHOnlNdwXTadfxLymt5Y18XjcDrt1AwlqiOI7EKG1KU29/wAPbI8TfHBH&#xA;ru4knrkW8ADkiILxrcVtxwmpvMd2Ff5P5fn198NsJQvnyen3X/OQurW+jRabouk2+mNFGI1mLmcr&#xA;QfaVCqKGJ3+Ll9OZo1kgKiKeWn7O4ZZDPLI5D8vm8t1fWtV1e8e+1O6kuriU0aaZix9lqegHYdBm&#xA;OSZGzu7eEYY48MQIxHQbJcZ4R1au9CFFT8/D8cIgWJzRCm12P2U8a8j18NhTJCDWc56KTTSsKFjQ&#xA;ihA2B+dMkAGozJ5oHVJClqQP2yFr+P8ADMjTxs26btjLw4xH+cfu/AZB5I0fS5vLOqXWp6p+h7e7&#xA;nhsxeehLc1SMGaSFki6K7+k1T3XM15kmnpPkr8gtPu4rPzTJr6X3lpGNwksFvJGZVgchlb1d0AZC&#xA;G+EntijiejWnmXyf+ZbSPJokV5qXl+N30yDUB+7f1BRSwViOJdF5A4FOzENOg1PzX5mB8yXsWsCy&#xA;ZtPvtOsTw0zTRewywpFCg/vZf2XfcL9mrHdVj1fP2koywTBqhw4VkOxFAe3zOY+p5B33Yv1y9ye6&#xA;JZfXJ3h9VIaLzaSQ0UKDQ/T8QzCmHp8MiD3p4tj5dtf96Ll7yQGhSEUX7+/0NlVgOWMeWXSvev8A&#xA;0/HAvHT7KK22oXPxv867fjXB4nc2x0Q/iNoC61G+u/8AeiZnB34VotR/kii5AyJcmGKMeQQcrhUJ&#xA;LBB/McMBZ5Wx1GQQgSZCPmVO2/Lz8y/MNwV0vSr6a0b7E00f1SEg+DymNWH05uMWIRHKi+c6/XZM&#xA;syPElOH+lH+lZlof/OKvm+6KtrGpWmmxnqsQe5lHzUekn/D5c616V5Z/5xt8laOwku7u91Jz/eRP&#xA;IIYG/wBhEA4/4PK54oz5hy9LrsunJOOVX+OSv5r/AOcdfIWuSLPaCbSLlVCs1swZHA6F0l5707gj&#xA;JRiIig05s08sjOZuRS3S/wDnHNrS1OnzecdVOktUPYWzfV4mVvtgqXlT4v8AVyTU9K8p+TvL3lTS&#xA;xpuh2otrevKVqlpJHpTnI53Y/q7bYqnWKuxV2KoHXbS1vNGvba6iWe3lgcSRSAMpHEncH3wEWmMi&#xA;DYfDEHmvVAI47mQzwoejdQvgvYZRk08ZB2ui7Xy4JA3ce5kvItHyjbciqN169DmpGx3fQpnxMdwP&#xA;1DY/clt55m8yWsYaG+lT0jRo+R406U4jbNhihEmi8brNZnxx4on37A/eF0P5n+YOl4kF4nZJI1A+&#xA;mgrlktLE9XFxdvZI84x+Fg/fX2I6H8xNHn4rfaNCoPUwVjp9K7n7sploz0o/Y7HD7RRJ9QlH48X6&#xA;navrNgxibTrb0A68yTIZFIJ2pUBu3jlMcPfs7PN2ieUTxAjmlqXc0iHcLxavw7Hfp75IwAaIaiUu&#xA;ZWkkkkmpPUnFm7FDsVdiqWax9qL5N/DMrTdXQdtnePx/Qyby75j17SvJXqaLqFxYS2mqMbh7WR4i&#xA;Rd26emH4EclP1RtiKZlOie6fk5+YuteYvJfmUec9Qt4tB0uOGEXzxxwGlyHRoyY+Cdl4/BUlupwI&#xA;K288l+XPy48u6wNc1qVpNdZNIiv9Oj5NYrMrSLLOvMNRlAZlG5UfDWuFSUp/LHSn8oaNqA1KSMvZ&#xA;30uoXTwtzSSxsbL1Y542H2kd5oyp9/owIO5eB6QwNvMTvIXUsT1IINP45j6nkHe9i/XL3J3pNpfX&#xA;FyEtbeScvVSI0Zz4/sjMKYJD0+nyRhkBJpmOmflp561JgINHuI1O/O4X6utD3rKUr9GVx08z0czN&#xA;2vpcfOY+G/3Mx0n/AJx71uajapqUFop3KQK07fI19JR9FcyI6E9S6jP7UYx9ETL37frZnpP5F+Sb&#xA;Pi12LjUZBufWkKJX2WLgfvJzIjo4Dnu6jP7R6mf01D3D9dsw0zyx5d0vj+j9MtrVl3DxxIHrSled&#xA;OX45fHHGPIOozavLl+uUpe8pnk3HdirsVdirsVdirsVdirsVdirwjXP+cUtEuJbibSNamszI7PBb&#xA;zRLNGgJrwqrRtQdAf14q8613yH5p8liK01yFWhqVt76Al4JFG+xopUgdQwB79M1uqw+qx1e27D7T&#xA;HgcMv4Pu6fq+TFL5oZGdlVijfCaj4T40OHGCA06swyyJH0ySC4sZY2JQF467Ebn6czY5AXms+jnA&#xA;7Cwh2R0bi6lW8CKHLHETPTpGa2Ck7Rkqvy+1+s5jZhu7vs3JcCO5H25PMgCpIP0U3r+GUS5O1xGp&#xA;K2VuW3xbiWoeI6ntigkBtULMVG5Ar8NW/wCI1w0x8WPTdUjtpXCkIQD9rlRafrP4ZEyA6tscWWXK&#xA;J+OyD1rT5BaCagJjbcCpIU7de/btl+myjip1fbegyjEMhr0np5oryJJBd3F55duZBFHrcax2kjGi&#xA;JfRNytmY7faq0Veg51O2Zzypepy2X+B/J2i+XPMFuVmN3ceZfMNgxBLLbN9V0+0alVeO5mjqdzQf&#xA;F2xQdyw/Qf8AHet3+r+ZTGbixvWY609yKWtz6jhvQ4kjm3IjgI/iTYrTY4rIhNfO/mVtD8mJ5Ftk&#xA;n/Tl3J6d3FOoa5tLFmWWKx9VP73nIeQO3w7FVrxAUB7l+Vn5eaf5Y8nadaXllA+rmP1r6do0Mnqy&#xA;kuU5kV/dhuH0YaZiRHJm6qqqFUAKBQAbAAYobxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVBa&#xA;xoulazZNY6papd2rEMY5B0YdGUjdTv1GRlASFFuwaieKXFA8Mnn+r/8AOP8A5KvGaSye40+U9ODC&#xA;VB/yMBf/AIfKDph0JDs4dsz/AI4Ql8OE/wCxr7mGap/zjTqan/cdqdvOg34zK8DH6QJv15A4JjkQ&#xA;XJj2np5c4zgfKpD9DHrj8gvPsLEpYwzgdGimTp/s5Yzg4Jjoz/MaaX+U+cT+i0uf8mfO0bmuiS8m&#xA;3YqoavzKynInj6gtsI6cfTkgPmP0Oh/J/wA9+qCNGuFJFBQKo38S7NkCJ/zXIjLTDc5o/JObL8h/&#xA;Pkz85bWO2qNvVnjWn/IgscIxZD0ARLXaKP8AHOXuH6wGQWH/ADjfqRp9d1O1h7loo3nNfm/o5IaW&#xA;Z5yaD23pY/RiJ/rH/pJktj/zj35cjob3Ubu4bv6QjhB+9ZD+OSGij1Jape02UCoQjEfj3MisPyg/&#xA;L6zoRpgncftzySSf8KW4fhlo0uMdHBydu6uf8de4BOj5O8qGwnsF0i0S1uY2hnjjhROSMOJBKgHo&#xA;euXRhEcg6/LqsuT65Sl7yXzD+ZH5BeaPLd3Nd6LBLq+hElo3hHO4iUn7Msa/EafzqKeNMk0KOj/n&#xA;bqcSwxeZbD9L3VqiW0eoCRYbv0oieKTGWK4jl4cm48kDbmrb4sTFG3n5z+YNYuIbPyto0o1Q1jtb&#xA;maRtRuYx0H1WFY4oYWp1Kxk++KiIZ9+T35G3+n6kvmzzmfW1fkZrWxkb1WSVjy9edyW5S13AqaHc&#xA;mvRZPccVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVQF95f0HUH9S/021u3/AJp4I5Dt7upxVVsNJ0rTkKafZQWaN9pbeJIgfmEAxVFYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq/wD/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:bea27839-337f-5843-9fbf-350d5f22f4fa</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:bea27839-337f-5843-9fbf-350d5f22f4fa</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:64ff7703-1ddb-447d-9bf5-c2f8bdc00072</stRef:instanceID>
            <stRef:documentID>xmp.did:5f87212d-78f3-5541-8f6d-47d7c537c143</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:31568511-86e7-3444-b520-5e909e44ca76</stEvt:instanceID>
                  <stEvt:when>2019-03-15T13:43:03+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:bea27839-337f-5843-9fbf-350d5f22f4fa</stEvt:instanceID>
                  <stEvt:when>2019-03-15T15:42:33+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.8 .8 .8 rgb
f
151.136 189.846 mo
151.021 189.808 li
151.192 189.705 li
151.937 189.255 152.961 188.632 154.202 187.876 cv
154.144 187.122 154.065 186.333 153.963 185.583 cv
152.162 185.492 149.543 185.13 148.542 184.521 cv
148.39 190.171 li
149.566 190.297 150.262 190.374 150.262 190.374 cv
150.262 190.374 150.571 190.187 151.136 189.846 cv
cp
.211765 .0235294 .0117647 rgb
f
152.031 178.249 mo
153.698 178.294 155.025 179.181 154.998 180.229 cv
154.969 181.278 153.595 182.092 151.929 182.047 cv
150.263 182.002 148.935 181.116 148.963 180.067 cv
148.992 179.018 150.365 178.204 152.031 178.249 cv
cp
155.72 185.523 mo
156.465 185.236 155.925 180.183 155.923 177.971 cv
155.908 176.505 154.583 175.488 153.223 175.824 cv
151.738 176.191 149.658 176.851 148.985 177.784 cv
147.9 179.291 147.491 183.089 148.198 184.214 cv
148.266 184.323 148.384 184.425 148.542 184.521 cv
149.543 185.13 152.162 185.492 153.963 185.583 cv
154.826 185.626 155.502 185.607 155.72 185.523 cv
cp
.52549 .0392157 .0352941 rgb
f
198.08 194.427 mo
198.08 194.427 218.038 194.373 234.436 193.99 cv
246.688 184.271 li
246.682 182.939 247.003 181.528 247.414 180.259 cv
248.755 176.117 257.503 175.247 257.503 175.247 cv
257.888 175.253 258.263 175.261 258.629 175.271 cv
261 162.451 li
260.929 158.785 255.425 157.277 249.569 156.262 cv
184.969 194.352 li
192.62 194.628 198.08 194.427 198.08 194.427 cv
cp
.0392157 .0313726 .0509804 rgb
f
177.892 193.979 mo
244.556 155.469 li
243.681 155.333 242.832 155.199 242.029 155.058 cv
240.46 154.783 238.338 154.613 235.967 154.516 cv
169.404 193.178 li
172.29 193.527 175.154 193.787 177.892 193.979 cv
cp
f
300.369 183.543 mo
306.6 180.393 307.279 177.954 307.74 174.525 cv
308.201 171.096 305.506 161.685 305.506 161.685 cv
305.506 161.685 286.536 159.909 274.806 160.857 cv
274.806 160.857 282.847 181.719 282.837 186.634 cv
282.837 186.634 294.141 186.693 300.369 183.543 cv
cp
f
254.537 189.544 mo
254.453 189.549 254.372 189.552 254.29 189.556 cv
249.411 193.453 li
252.591 193.265 254.775 193.042 255.391 192.777 cv
256.003 189.467 li
255.509 189.492 255.02 189.517 254.537 189.544 cv
cp
f
276.956 182.992 mo
278.402 184.778 278.737 186.03 278.505 186.909 cv
279.059 186.875 279.39 186.849 279.39 186.849 cv
279.39 186.849 277.66 175.803 276.573 172.824 cv
275.485 169.846 272.471 160.917 272.471 160.917 cv
272.471 160.917 269.125 161.932 267.57 162.567 cv
266.018 163.202 265.58 165.771 265.58 165.771 cv
265.58 165.771 265.461 171.483 265.335 175.798 cv
270.903 176.679 273.509 178.734 276.956 182.992 cv
cp
f
151.021 189.808 mo
151.136 189.846 li
151.292 189.751 151.467 189.646 151.662 189.528 cv
153.619 190.173 155.698 190.735 157.849 191.226 cv
157.953 191.136 li
221.816 154.532 li
217.948 154.71 215.386 154.833 214.631 154.812 cv
214.631 154.812 217.667 154.651 221.816 154.532 cv
222.602 154.327 li
224.467 154.279 226.511 154.243 228.575 154.233 cv
229.298 154.203 230.041 154.173 230.806 154.143 cv
228.363 154.127 225.622 154.158 222.599 154.234 cv
222.356 154.242 li
222.077 154.25 221.804 154.258 221.533 154.265 cv
217.43 154.382 214.375 154.543 214.353 154.545 cv
211.431 154.544 198.989 160.435 195.468 162.591 cv
194.834 162.979 193.111 164.037 190.684 165.526 cv
181.901 170.916 162.818 182.628 154.202 187.876 cv
152.961 188.632 151.937 189.255 151.192 189.705 cv
151.021 189.808 li
cp
f
382.813 241.337 mo
383.647 241.163 li
383.334 240.825 383.048 240.471 382.787 240.101 cv
382.795 240.528 382.803 240.941 382.813 241.337 cv
cp
.027451 .027451 .027451 rgb
f
420.32 207.052 mo
419.897 202.783 418.53 198.646 415.753 195.377 cv
409.152 187.609 398.611 190.08 392.695 195.505 cv
392.099 196.052 391.53 196.623 390.991 197.215 cv
396.292 196.044 401.078 196.757 404.89 198.014 cv
408.284 198.67 411.371 200.37 413.924 202.827 cv
414.442 203.327 414.938 203.857 415.411 204.416 cv
415.469 204.479 415.506 204.521 415.506 204.528 cv
419.179 208.933 421.379 215.091 421.197 221.851 cv
421.076 226.335 419.923 230.499 418.02 234.021 cv
419.039 233.81 li
420.313 229.126 li
421.939 221.572 421.139 215.302 420.32 207.052 cv
cp
f
157.849 191.226 mo
161.569 192.074 165.506 192.708 169.404 193.178 cv
235.967 154.516 li
231.464 154.332 226.06 154.41 221.816 154.532 cv
157.953 191.136 li
157.849 191.226 li
cp
.427451 .427451 .427451 rgb
f
221.816 154.532 mo
223.76 154.442 226.035 154.339 228.575 154.233 cv
226.511 154.243 224.467 154.279 222.602 154.327 cv
221.816 154.532 li
cp
f
184.969 194.352 mo
249.569 156.262 li
247.887 155.97 246.176 155.719 244.556 155.469 cv
177.892 193.979 li
180.381 194.153 182.766 194.272 184.969 194.352 cv
cp
f
417.497 220.958 mo
417.394 224.808 416.322 228.298 414.692 231.222 cv
414.597 231.394 414.499 231.563 414.399 231.729 cv
414.369 231.782 414.337 231.834 414.305 231.886 cv
414.236 232 414.166 232.114 414.096 232.227 cv
414.058 232.287 414.019 232.347 413.98 232.406 cv
413.914 232.51 413.848 232.611 413.78 232.713 cv
413.739 232.774 413.697 232.836 413.656 232.896 cv
413.589 232.995 413.521 233.093 413.453 233.189 cv
413.41 233.25 413.368 233.31 413.324 233.369 cv
413.255 233.466 413.185 233.561 413.114 233.655 cv
413.07 233.713 413.028 233.771 412.984 233.828 cv
412.91 233.926 412.834 234.021 412.758 234.117 cv
412.67 234.229 412.58 234.339 412.49 234.448 cv
412.432 234.519 412.374 234.59 412.315 234.66 cv
412.171 234.83 412.029 234.992 411.886 235.151 cv
409.38 237.92 406.359 239.725 403.53 240.203 cv
394.385 241.749 389.078 231.383 389.357 220.993 cv
389.372 220.453 389.409 219.917 389.467 219.39 cv
389.532 218.792 389.622 218.205 389.738 217.627 cv
391.147 210.586 396.171 205.021 401.07 203.203 cv
401.228 203.145 401.384 203.091 401.539 203.042 cv
401.583 203.027 401.626 203.016 401.67 203.002 cv
401.789 202.965 401.907 202.93 402.026 202.898 cv
402.16 202.861 402.268 202.834 402.374 202.809 cv
402.406 202.802 402.438 202.795 402.471 202.788 cv
402.572 202.766 402.674 202.744 402.775 202.725 cv
402.814 202.718 402.854 202.71 402.893 202.704 cv
403 202.685 403.106 202.668 403.214 202.653 cv
403.413 202.626 403.542 202.612 403.67 202.601 cv
403.699 202.599 403.728 202.597 403.757 202.595 cv
403.858 202.587 403.96 202.582 404.061 202.578 cv
404.096 202.577 404.131 202.576 404.166 202.575 cv
404.293 202.572 404.419 202.571 404.544 202.575 cv
404.888 202.584 405.232 202.615 405.578 202.667 cv
409.138 203.204 412.677 205.975 414.963 210.134 cv
415.66 211.4 416.24 212.796 416.671 214.297 cv
417.256 216.343 417.561 218.583 417.497 220.958 cv
cp
415.506 204.528 mo
415.506 204.521 415.469 204.479 415.411 204.416 cv
414.938 203.857 414.442 203.327 413.924 202.827 cv
411.371 200.37 408.284 198.67 404.89 198.014 cv
401.078 196.757 396.292 196.044 390.991 197.215 cv
387.045 201.547 384.645 207.032 383.997 212.906 cv
382.793 223.816 382.676 233.725 382.787 240.101 cv
383.048 240.471 383.334 240.825 383.647 241.163 cv
384.278 241.845 385.021 242.459 385.896 242.99 cv
389.368 245.099 396.916 246.034 402.958 244.854 cv
409.237 244.249 414.741 240.089 418.02 234.021 cv
419.923 230.499 421.076 226.335 421.197 221.851 cv
421.379 215.091 419.179 208.933 415.506 204.528 cv
cp
.0156863 .0156863 .0156863 rgb
f
401.67 203.002 mo
401.788 202.965 401.907 202.93 402.026 202.898 cv
401.907 202.93 401.789 202.965 401.67 203.002 cv
cp
.784314 .803922 .788235 rgb
f
415.845 220.842 mo
415.754 224.201 414.901 227.268 413.584 229.888 cv
411.544 227.433 li
408.457 223.714 li
408.457 223.714 407.423 222.411 409.324 220.979 cv
410.04 220.439 411.438 219.187 412.901 217.837 cv
413.729 217.072 414.579 216.277 415.338 215.561 cv
415.71 217.21 415.895 218.982 415.845 220.842 cv
cp
411.876 232.807 mo
410.998 232.731 406.563 227.491 406.563 227.491 cv
406.563 227.491 406.216 226.913 406.598 226.173 cv
406.979 225.433 407.926 224.74 408.303 225.288 cv
412.434 231.296 li
412.434 231.296 412.753 232.882 411.876 232.807 cv
cp
406.233 229.138 mo
405.636 228.294 404.396 227.277 404.106 227.45 cv
403.817 227.624 403.385 228.435 403.128 228.767 cv
402.872 229.099 399.995 234.116 399.995 234.116 cv
399.995 234.116 399.671 233.67 400.246 232.494 cv
400.821 231.319 401.932 228.479 401.932 228.479 cv
401.498 229.217 397.784 237.47 397.551 237.516 cv
397.316 237.561 396.18 237.53 396.655 236.172 cv
397.132 234.814 399.646 227.925 399.646 227.925 cv
399.646 227.925 400.275 226.598 401.016 226.979 cv
401.513 227.236 401.95 227.492 402.053 227.856 cv
402.086 227.537 402.068 227.188 401.867 227.054 cv
401.46 226.784 400.968 225.866 401.665 225.911 cv
401.665 225.911 403.771 225.502 404.539 224.824 cv
405.308 224.146 406.547 223.249 406.693 222.606 cv
406.84 221.964 407.976 223.495 408.481 224.155 cv
408.987 224.815 410.955 226.988 411.109 227.329 cv
411.265 227.669 410.306 227.385 409.533 226.484 cv
408.76 225.584 408.064 224.534 407.544 224.648 cv
407.023 224.762 406.104 225.28 405.908 225.844 cv
405.712 226.407 405.286 226.861 405.761 227.47 cv
406.236 228.077 406.788 228.687 407.215 229.164 cv
407.642 229.641 406.831 229.98 406.233 229.138 cv
cp
397.331 237.957 mo
397.389 237.989 397.445 238.023 397.504 238.055 cv
397.445 238.023 397.389 237.989 397.331 237.957 cv
cp
396.869 237.679 mo
396.934 237.721 396.998 237.764 397.064 237.804 cv
396.998 237.764 396.934 237.721 396.869 237.679 cv
cp
396.437 237.384 mo
396.503 237.432 396.569 237.48 396.637 237.526 cv
396.569 237.48 396.503 237.432 396.437 237.384 cv
cp
394.995 237.317 mo
394.296 236.394 393.531 235.027 393.433 234.844 cv
393.373 234.732 393.523 234.674 393.824 234.697 cv
391.423 231.326 390.137 226.4 390.179 221.415 cv
390.18 221.265 390.183 221.115 390.186 220.964 cv
391.03 221.198 392.19 221.525 392.979 221.769 cv
391.653 221.345 390.431 220.904 390.478 220.704 cv
390.565 220.327 391.62 220.519 391.62 220.519 cv
391.62 220.519 394.602 221.22 395.218 221.392 cv
395.834 221.564 395.691 221.095 395.91 220.635 cv
396.13 220.175 396.183 220.151 396.535 219.514 cv
396.889 218.876 397.286 219.482 398.189 219.558 cv
399.093 219.634 399.059 219.944 399.334 220.262 cv
399.61 220.58 399.293 221.812 399.281 222.226 cv
399.271 222.639 399.017 223.408 398.527 223.343 cv
398.037 223.278 397.061 223.045 395.933 222.679 cv
395.438 222.518 394.312 222.191 393.209 221.842 cv
394.676 222.32 397.677 223.49 397.816 223.79 cv
397.952 224.081 396.766 232.399 395.361 235.104 cv
395.496 235.037 395.624 234.791 395.855 234.186 cv
396.385 232.803 398.608 225.144 398.693 224.842 cv
398.779 224.54 399.08 224.261 399.52 224.534 cv
399.638 224.607 401.155 225.612 400.909 226.123 cv
400.663 226.634 400.077 226.287 399.828 226.886 cv
399.579 227.483 396.937 234.396 396.937 234.396 cv
396.937 234.396 396.035 236.984 396.075 237.108 cv
396.124 237.146 396.172 237.188 396.221 237.225 cv
396.172 237.188 396.124 237.148 396.075 237.109 cv
396.145 237.167 397.12 238.125 397.216 238.411 cv
397.312 238.698 395.694 238.241 394.995 237.317 cv
cp
390.241 219.909 mo
390.305 218.996 390.441 218.105 390.642 217.243 cv
390.449 218.108 390.313 218.999 390.241 219.909 cv
cp
394.951 218.816 mo
394.951 218.816 395.006 218.832 395.088 218.866 cv
395.337 218.968 395.832 219.234 395.755 219.7 cv
395.651 220.317 395.863 221.427 394.233 221.124 cv
392.604 220.822 390.355 219.778 390.355 219.778 cv
390.355 219.778 390.289 218.415 391.137 218.316 cv
391.984 218.219 394.951 218.816 394.951 218.816 cv
cp
391.397 217.582 mo
391.56 217.328 393.67 217.092 394.615 217.186 cv
395.562 217.281 399.23 217.302 399.729 216.755 cv
400.865 215.51 401.189 216.346 401.266 216.728 cv
401.342 217.109 401.008 217.341 400.486 217.509 cv
399.965 217.676 398.509 217.929 397.525 217.989 cv
396.541 218.048 394.626 218.066 393.023 218.04 cv
391.421 218.014 391.235 217.836 391.397 217.582 cv
cp
403.192 212.424 mo
403.99 212.883 404.306 213.981 404.54 214.229 cv
404.54 214.229 404.55 215.161 404.408 215.271 cv
404.268 215.382 403.714 215.449 403.106 215.604 cv
402.499 215.761 402.201 215.27 401.961 213.953 cv
401.721 212.636 402.395 211.965 403.192 212.424 cv
cp
403.885 204.013 mo
404.06 210.949 li
403.371 212.508 402.591 211.22 402.591 211.22 cv
402.59 204.056 li
403.19 202.882 403.885 204.013 403.885 204.013 cv
cp
406.181 221.182 mo
406.123 223.313 404.953 225.01 403.567 224.973 cv
402.183 224.936 401.105 223.178 401.163 221.046 cv
401.221 218.915 402.391 217.218 403.775 217.255 cv
405.161 217.292 406.237 219.05 406.181 221.182 cv
cp
404.778 205.546 mo
405.038 205.302 405.05 205.553 405.05 205.553 cv
405.05 205.553 405.067 210.002 405.15 210.763 cv
405.233 211.524 404.657 211.164 404.646 210.474 cv
404.633 209.784 404.518 207.401 404.401 206.57 cv
404.286 205.74 404.778 205.546 404.778 205.546 cv
cp
413.633 210.869 mo
412.889 211.28 412.07 211.731 411.276 212.169 cv
409.28 213.269 407.443 214.277 407.365 214.305 cv
407.191 214.37 405.901 214.886 405.618 212.603 cv
405.484 211.521 405.481 208.706 405.516 206.045 cv
405.526 205.272 405.539 204.512 405.554 203.811 cv
408.652 204.519 411.674 207.103 413.633 210.869 cv
cp
408.373 214.997 mo
409.349 214.299 414.126 211.686 414.126 211.686 cv
414.664 211.39 414.785 212.195 414.785 212.195 cv
414.785 212.195 411.16 214.917 409.208 215.691 cv
407.255 216.466 407.397 215.694 408.373 214.997 cv
cp
408.914 219.554 mo
409.723 218.99 413.978 215.931 413.978 215.931 cv
414.958 215.227 413.611 216.715 413.611 216.715 cv
413.611 216.715 409.448 220.189 408.885 220.633 cv
408.321 221.076 408.105 220.119 408.914 219.554 cv
cp
415.592 213.924 mo
414.799 215.506 410.329 218.205 410.329 218.205 cv
410.329 218.205 409.756 218.396 409.098 217.861 cv
408.439 217.326 408.679 216.453 408.959 216.279 cv
414.562 212.81 li
414.562 212.81 416.384 212.342 415.592 213.924 cv
cp
414.963 210.134 mo
412.677 205.975 409.138 203.204 405.578 202.667 cv
405.232 202.615 404.888 202.584 404.544 202.575 cv
404.419 202.571 404.293 202.572 404.166 202.575 cv
404.131 202.576 404.096 202.577 404.061 202.578 cv
403.96 202.582 403.858 202.587 403.757 202.595 cv
403.728 202.597 403.699 202.599 403.67 202.601 cv
403.542 202.612 403.413 202.626 403.283 202.643 cv
403.106 202.668 403 202.685 402.893 202.704 cv
402.854 202.71 402.814 202.718 402.775 202.725 cv
402.674 202.744 402.572 202.766 402.471 202.788 cv
402.438 202.795 402.406 202.802 402.374 202.809 cv
402.268 202.834 402.16 202.861 402.053 202.89 cv
402.053 202.89 401.769 215.403 400.387 215.811 cv
400.227 215.858 400.066 215.89 399.908 215.908 cv
399.568 216.349 398.747 217.005 396.881 216.955 cv
394.963 216.903 392.272 216.765 390.777 216.684 cv
392.348 210.479 396.804 205.659 401.1 204.127 cv
401.07 203.203 li
396.171 205.021 391.147 210.586 389.738 217.627 cv
389.622 218.205 389.532 218.792 389.467 219.39 cv
389.409 219.917 389.372 220.453 389.357 220.993 cv
389.078 231.383 394.385 241.749 403.53 240.203 cv
406.359 239.725 409.38 237.92 411.886 235.151 cv
410.729 234.138 li
408.441 236.744 405.682 238.443 403.097 238.894 cv
401.194 239.227 399.475 238.978 397.956 238.279 cv
398.946 236.588 li
403.889 228.143 li
403.889 228.143 404.112 227.546 404.958 228.172 cv
405.711 228.73 411.146 233.609 412.315 234.66 cv
412.374 234.59 412.432 234.519 412.49 234.448 cv
412.58 234.339 412.67 234.229 412.758 234.117 cv
412.834 234.021 412.91 233.926 412.984 233.828 cv
413.028 233.771 413.07 233.713 413.114 233.655 cv
413.185 233.561 413.255 233.466 413.324 233.369 cv
413.368 233.31 413.41 233.25 413.453 233.189 cv
413.521 233.093 413.589 232.995 413.656 232.896 cv
413.697 232.836 413.739 232.774 413.78 232.713 cv
413.848 232.611 413.914 232.51 413.98 232.406 cv
414.019 232.347 414.058 232.287 414.096 232.227 cv
414.166 232.114 414.236 232 414.305 231.886 cv
414.337 231.834 414.369 231.782 414.399 231.729 cv
414.499 231.563 414.597 231.394 414.692 231.222 cv
416.322 228.298 417.394 224.808 417.497 220.958 cv
417.561 218.583 417.256 216.343 416.671 214.297 cv
416.24 212.796 415.66 211.4 414.963 210.134 cv
cp
f
401.07 203.203 mo
401.227 203.145 401.383 203.091 401.539 203.042 cv
401.384 203.091 401.228 203.145 401.07 203.203 cv
cp
f
412.311 234.665 mo
412.171 234.83 412.029 234.992 411.886 235.151 cv
412.029 234.992 412.171 234.83 412.311 234.665 cv
cp
f
411.276 212.169 mo
412.07 211.731 412.889 211.28 413.633 210.869 cv
411.674 207.103 408.652 204.519 405.554 203.811 cv
405.539 204.512 405.526 205.272 405.516 206.045 cv
407.785 207.116 409.878 209.281 411.276 212.169 cv
cp
.207843 .262745 .235294 rgb
f
414.57 223.709 mo
414.361 225.406 413.37 228.284 413.156 228.521 cv
412.943 228.756 412.313 227.239 412.796 226.545 cv
413.278 225.851 413.832 218.814 413.832 218.814 cv
413.963 217.293 414.831 218.841 415.039 219.433 cv
415.247 220.025 414.78 222.012 414.57 223.709 cv
cp
412.901 217.837 mo
413.004 218.719 413.05 219.629 413.024 220.567 cv
412.957 223.065 412.41 225.379 411.544 227.433 cv
413.584 229.888 li
414.901 227.268 415.754 224.201 415.845 220.842 cv
415.895 218.982 415.71 217.21 415.338 215.561 cv
414.579 216.277 413.729 217.072 412.901 217.837 cv
cp
f
396.637 237.526 mo
396.569 237.48 396.503 237.432 396.437 237.384 cv
396.503 237.432 396.569 237.48 396.637 237.526 cv
cp
f
394.76 234.915 mo
394.788 234.77 394.817 234.621 394.848 234.47 cv
391.88 231.673 390.227 226.608 390.197 221.423 cv
390.137 226.4 391.423 231.326 393.824 234.697 cv
394.017 234.712 394.271 234.76 394.57 234.849 cv
394.64 234.869 394.702 234.892 394.76 234.915 cv
cp
f
405.561 236.755 mo
404.946 237.112 404.317 237.503 403.627 237.717 cv
402.86 237.953 402.057 237.899 401.266 237.875 cv
400.479 237.851 399.692 237.823 398.905 237.802 cv
398.698 237.796 398.754 236.975 399.185 236.981 cv
399.582 236.989 403.027 237.086 404.291 236.258 cv
405.555 235.43 407.281 234.063 407.905 233.941 cv
408.529 233.82 408.813 234.827 407.866 235.389 cv
407.098 235.844 406.333 236.306 405.561 236.755 cv
cp
401.688 236.568 mo
400.72 236.736 399.805 236.734 398.946 236.588 cv
397.956 238.279 li
399.475 238.978 401.194 239.227 403.097 238.894 cv
405.682 238.443 408.441 236.744 410.729 234.138 cv
408.568 232.243 li
406.515 234.613 404.021 236.162 401.688 236.568 cv
cp
f
401.029 205.435 mo
401.111 204.516 li
401.1 204.127 li
396.804 205.659 392.348 210.479 390.774 216.683 cv
392.363 210.74 396.937 206.269 401.029 205.435 cv
cp
f
396.221 237.225 mo
396.172 237.188 396.124 237.146 396.075 237.108 cv
396.124 237.148 396.172 237.188 396.221 237.225 cv
cp
f
397.504 238.055 mo
397.445 238.023 397.389 237.989 397.331 237.957 cv
397.389 237.989 397.445 238.023 397.504 238.055 cv
cp
f
397.064 237.804 mo
396.998 237.764 396.934 237.721 396.869 237.679 cv
396.934 237.721 396.998 237.764 397.064 237.804 cv
cp
f
390.642 217.243 mo
390.441 218.105 390.305 218.996 390.241 219.909 cv
390.313 218.999 390.449 218.108 390.642 217.243 cv
cp
.0666667 .0666667 .0666667 rgb
f
412.901 217.837 mo
411.438 219.187 410.04 220.439 409.324 220.979 cv
407.423 222.411 408.457 223.714 408.457 223.714 cv
411.544 227.433 li
412.41 225.379 412.957 223.065 413.024 220.567 cv
413.05 219.629 413.004 218.719 412.901 217.837 cv
cp
f
405.516 206.045 mo
405.481 208.706 405.484 211.521 405.618 212.603 cv
405.901 214.886 407.191 214.37 407.365 214.305 cv
407.443 214.277 409.28 213.269 411.276 212.169 cv
409.878 209.281 407.785 207.116 405.516 206.045 cv
cp
f
394.848 234.47 mo
394.817 234.621 394.788 234.77 394.76 234.915 cv
394.706 235.188 394.655 235.449 394.607 235.695 cv
394.658 235.753 394.708 235.811 394.761 235.867 cv
394.835 235.829 394.92 235.757 395.015 235.646 cv
395.131 235.507 395.247 235.323 395.361 235.104 cv
396.766 232.399 397.952 224.081 397.816 223.79 cv
397.677 223.49 394.676 222.32 393.209 221.842 cv
393.137 221.819 393.066 221.796 393.002 221.776 cv
392.19 221.525 391.03 221.198 390.186 220.964 cv
390.183 221.115 390.18 221.265 390.179 221.415 cv
390.227 226.608 391.88 231.673 394.848 234.47 cv
cp
f
402.59 204.056 mo
402.591 211.22 li
402.591 211.22 403.371 212.508 404.06 210.949 cv
403.885 204.013 li
403.885 204.013 403.19 202.882 402.59 204.056 cv
cp
.0431373 .0862745 .0705882 rgb
f
408.959 216.279 mo
408.679 216.453 408.439 217.326 409.098 217.861 cv
409.756 218.396 410.329 218.205 410.329 218.205 cv
410.329 218.205 414.799 215.506 415.592 213.924 cv
416.384 212.342 414.562 212.81 414.562 212.81 cv
408.959 216.279 li
cp
f
412.434 231.296 mo
408.303 225.288 li
407.926 224.74 406.979 225.433 406.598 226.173 cv
406.216 226.913 406.563 227.491 406.563 227.491 cv
406.563 227.491 410.998 232.731 411.876 232.807 cv
412.753 232.882 412.434 231.296 412.434 231.296 cv
cp
f
401.016 226.979 mo
400.275 226.598 399.646 227.925 399.646 227.925 cv
399.646 227.925 397.132 234.814 396.655 236.172 cv
396.18 237.53 397.316 237.561 397.551 237.516 cv
397.784 237.47 401.498 229.217 401.932 228.479 cv
401.932 228.479 402.019 228.184 402.053 227.856 cv
401.95 227.492 401.513 227.236 401.016 226.979 cv
cp
f
390.355 219.778 mo
390.355 219.778 392.604 220.822 394.233 221.124 cv
395.863 221.427 395.651 220.317 395.755 219.7 cv
395.832 219.234 395.337 218.968 395.088 218.866 cv
395.006 218.832 394.951 218.816 394.951 218.816 cv
394.951 218.816 391.984 218.219 391.137 218.316 cv
390.289 218.415 390.355 219.778 390.355 219.778 cv
cp
f
414.785 212.195 mo
414.785 212.195 414.664 211.39 414.126 211.686 cv
414.126 211.686 409.349 214.299 408.373 214.997 cv
407.397 215.694 407.255 216.466 409.208 215.691 cv
411.16 214.917 414.785 212.195 414.785 212.195 cv
cp
.898039 .917647 .905882 rgb
f
403.106 215.604 mo
403.714 215.449 404.268 215.382 404.408 215.271 cv
404.55 215.161 404.54 214.229 404.54 214.229 cv
404.306 213.981 403.99 212.883 403.192 212.424 cv
402.395 211.965 401.721 212.636 401.961 213.953 cv
402.201 215.27 402.499 215.761 403.106 215.604 cv
cp
f
404.646 210.474 mo
404.657 211.164 405.233 211.524 405.15 210.763 cv
405.067 210.002 405.05 205.553 405.05 205.553 cv
405.05 205.553 405.038 205.302 404.778 205.546 cv
404.778 205.546 404.286 205.74 404.401 206.57 cv
404.518 207.401 404.633 209.784 404.646 210.474 cv
cp
f
408.885 220.633 mo
409.448 220.189 413.611 216.715 413.611 216.715 cv
413.611 216.715 414.958 215.227 413.978 215.931 cv
413.978 215.931 409.723 218.99 408.914 219.554 cv
408.105 220.119 408.321 221.076 408.885 220.633 cv
cp
.745098 .803922 .776471 rgb
f
393.023 218.04 mo
394.626 218.066 396.541 218.048 397.525 217.989 cv
398.509 217.929 399.965 217.676 400.486 217.509 cv
401.008 217.341 401.342 217.109 401.266 216.728 cv
401.189 216.346 400.865 215.51 399.729 216.755 cv
399.23 217.302 395.562 217.281 394.615 217.186 cv
393.67 217.092 391.56 217.328 391.397 217.582 cv
391.235 217.836 391.421 218.014 393.023 218.04 cv
cp
f
393.209 221.842 mo
394.312 222.191 395.438 222.518 395.933 222.679 cv
397.061 223.045 398.037 223.278 398.527 223.343 cv
399.017 223.408 399.271 222.639 399.281 222.226 cv
399.293 221.812 399.61 220.58 399.334 220.262 cv
399.059 219.944 399.093 219.634 398.189 219.558 cv
397.286 219.482 396.889 218.876 396.535 219.514 cv
396.183 220.151 396.13 220.175 395.91 220.635 cv
395.691 221.095 395.834 221.564 395.218 221.392 cv
394.602 221.22 391.62 220.519 391.62 220.519 cv
391.62 220.519 390.565 220.327 390.478 220.704 cv
390.431 220.904 391.653 221.345 392.979 221.769 cv
393.066 221.796 393.137 221.819 393.209 221.842 cv
cp
.898039 .917647 .905882 rgb
f
396.076 237.113 mo
396.035 236.984 396.937 234.396 396.937 234.396 cv
396.937 234.396 399.579 227.483 399.828 226.886 cv
400.077 226.287 400.663 226.634 400.909 226.123 cv
401.155 225.612 399.638 224.607 399.52 224.534 cv
399.08 224.261 398.779 224.54 398.693 224.842 cv
398.608 225.144 396.385 232.803 395.855 234.186 cv
395.624 234.791 395.496 235.037 395.361 235.104 cv
395.247 235.323 395.131 235.507 395.015 235.646 cv
394.92 235.757 394.835 235.829 394.761 235.867 cv
394.708 235.811 394.658 235.753 394.607 235.695 cv
394.655 235.449 394.706 235.188 394.76 234.915 cv
394.702 234.892 394.64 234.869 394.57 234.849 cv
394.271 234.76 394.017 234.712 393.824 234.697 cv
393.523 234.674 393.373 234.732 393.433 234.844 cv
393.531 235.027 394.296 236.394 394.995 237.317 cv
395.694 238.241 397.312 238.698 397.216 238.411 cv
397.12 238.125 396.145 237.167 396.076 237.113 cv
cp
f
405.761 227.47 mo
405.286 226.861 405.712 226.407 405.908 225.844 cv
406.104 225.28 407.023 224.762 407.544 224.648 cv
408.064 224.534 408.76 225.584 409.533 226.484 cv
410.306 227.385 411.265 227.669 411.109 227.329 cv
410.955 226.988 408.987 224.815 408.481 224.155 cv
407.976 223.495 406.84 221.964 406.693 222.606 cv
406.547 223.249 405.308 224.146 404.539 224.824 cv
403.771 225.502 401.665 225.911 401.665 225.911 cv
400.968 225.866 401.46 226.784 401.867 227.054 cv
402.068 227.188 402.086 227.537 402.053 227.856 cv
402.019 228.184 401.932 228.479 401.932 228.479 cv
401.932 228.479 400.821 231.319 400.246 232.494 cv
399.671 233.67 399.995 234.116 399.995 234.116 cv
399.995 234.116 402.872 229.099 403.128 228.767 cv
403.385 228.435 403.817 227.624 404.106 227.45 cv
404.396 227.277 405.636 228.294 406.233 229.138 cv
406.831 229.98 407.642 229.641 407.215 229.164 cv
406.788 228.687 406.236 228.077 405.761 227.47 cv
cp
f
407.905 233.941 mo
407.281 234.063 405.555 235.43 404.291 236.258 cv
403.027 237.086 399.582 236.989 399.185 236.981 cv
398.754 236.975 398.698 237.796 398.905 237.802 cv
399.692 237.823 400.479 237.851 401.266 237.875 cv
402.057 237.899 402.86 237.953 403.627 237.717 cv
404.317 237.503 404.946 237.112 405.561 236.755 cv
406.333 236.306 407.098 235.844 407.866 235.389 cv
408.813 234.827 408.529 233.82 407.905 233.941 cv
cp
.745098 .803922 .776471 rgb
f
413.832 218.814 mo
413.832 218.814 413.278 225.851 412.796 226.545 cv
412.313 227.239 412.943 228.756 413.156 228.521 cv
413.37 228.284 414.361 225.406 414.57 223.709 cv
414.78 222.012 415.247 220.025 415.039 219.433 cv
414.831 218.841 413.963 217.293 413.832 218.814 cv
cp
f
401.111 204.516 mo
401.029 205.435 li
396.937 206.269 392.363 210.74 390.777 216.684 cv
392.272 216.765 394.963 216.903 396.881 216.955 cv
398.747 217.005 399.568 216.349 399.908 215.908 cv
400.066 215.89 400.227 215.858 400.387 215.811 cv
401.769 215.403 402.053 202.89 402.053 202.89 cv
401.907 202.93 401.788 202.965 401.67 203.002 cv
401.626 203.016 401.583 203.027 401.539 203.042 cv
401.383 203.091 401.227 203.145 401.07 203.203 cv
401.1 204.127 li
401.111 204.516 li
cp
.0666667 .0666667 .0666667 rgb
f
404.958 228.172 mo
404.112 227.546 403.889 228.143 403.889 228.143 cv
398.946 236.588 li
399.805 236.734 400.72 236.736 401.688 236.568 cv
404.021 236.162 406.515 234.613 408.568 232.243 cv
410.729 234.138 li
411.886 235.151 li
412.029 234.992 412.171 234.83 412.311 234.665 cv
411.146 233.609 405.711 228.73 404.958 228.172 cv
cp
f
401.163 221.046 mo
401.105 223.178 402.183 224.936 403.567 224.973 cv
404.953 225.01 406.123 223.313 406.181 221.182 cv
406.237 219.05 405.161 217.292 403.775 217.255 cv
402.391 217.218 401.221 218.915 401.163 221.046 cv
cp
.2 .2 .2 rgb
f
261.139 234.836 mo
260.595 227.633 254.088 216.028 251.927 214.127 cv
250.018 212.448 239.158 206.788 226.907 208.784 cv
226.694 208.818 226.48 208.855 226.267 208.895 cv
226.041 208.937 225.84 208.976 225.639 209.017 cv
225.587 209.027 225.537 209.039 225.485 209.05 cv
225.329 209.083 225.172 209.116 225.016 209.151 cv
224.932 209.17 224.848 209.191 224.764 209.211 cv
224.641 209.24 224.518 209.269 224.396 209.299 cv
224.275 209.329 224.156 209.36 224.036 209.392 cv
223.956 209.413 223.876 209.433 223.796 209.455 cv
223.658 209.492 223.52 209.531 223.381 209.571 cv
223.324 209.587 223.266 209.603 223.208 209.62 cv
222.804 209.738 222.398 209.865 221.992 210.002 cv
218.662 211.128 215.517 213.344 212.635 216.147 cv
216.755 213.638 221.22 212.243 225.857 212.368 cv
245.186 212.889 260.347 232.142 259.721 255.37 cv
259.597 259.989 258.855 264.417 257.598 268.545 cv
261.171 267.832 li
261.171 267.832 261.682 242.04 261.139 234.836 cv
cp
.027451 .027451 .027451 rgb
f
37.2188 244.594 mo
33.9897 245.858 35.4082 243.377 35.4082 243.377 cv
39.1831 240.1 li
41.9858 238.7 42.3662 240.554 42.3662 240.554 cv
42.3662 240.554 40.4482 243.329 37.2188 244.594 cv
cp
424.753 196.479 mo
424.753 196.479 422.893 183.434 420.291 180.783 cv
417.689 178.133 411.907 177.239 407.673 177.033 cv
403.439 176.827 354.537 175.417 346.611 175.388 cv
346.611 175.388 316.458 161.119 308.287 158.811 cv
300.115 156.5 295.266 154.036 269.227 153.579 cv
255.157 153.333 241.144 153.733 230.806 154.143 cv
230.041 154.173 229.298 154.203 228.575 154.233 cv
226.035 154.339 223.76 154.442 221.816 154.532 cv
226.06 154.41 231.464 154.332 235.967 154.516 cv
238.338 154.613 240.46 154.783 242.029 155.058 cv
242.832 155.199 243.681 155.333 244.556 155.469 cv
246.176 155.719 247.887 155.97 249.569 156.262 cv
255.425 157.277 260.929 158.785 261 162.451 cv
261 162.451 270.173 159.503 274.985 158.772 cv
279.798 158.043 298.456 158.791 303.106 159.53 cv
307.756 160.271 308.115 165.195 308.783 167.793 cv
309.45 170.392 308.948 179.842 307.79 181.776 cv
306.632 183.711 298.528 188.041 285.82 189.91 cv
273.113 191.78 255.391 192.777 255.391 192.777 cv
254.775 193.042 252.591 193.265 249.411 193.453 cv
249.16 193.653 li
241.345 193.8 li
248.254 188.116 li
247.106 187.134 246.693 185.751 246.688 184.271 cv
234.436 193.99 li
218.038 194.373 198.08 194.427 198.08 194.427 cv
198.08 194.427 192.62 194.628 184.969 194.352 cv
182.766 194.272 180.381 194.153 177.892 193.979 cv
175.154 193.787 172.29 193.527 169.404 193.178 cv
165.506 192.708 161.569 192.074 157.849 191.226 cv
155.698 190.735 153.619 190.173 151.662 189.528 cv
151.467 189.646 151.292 189.751 151.136 189.846 cv
150.571 190.187 150.262 190.374 150.262 190.374 cv
150.262 190.374 149.566 190.297 148.39 190.171 cv
146.833 190.005 144.433 189.754 141.68 189.482 cv
141.142 190.439 139.164 191.667 133.968 193.068 cv
121.528 196.42 73.4487 215.77 57.9048 224.844 cv
57.9048 224.844 56.9092 224.172 52.1147 224.227 cv
50.7534 224.243 48.374 224.811 45.6655 225.616 cv
39.9351 228.895 35.0112 231.724 31.894 233.518 cv
32.1479 233.112 32.4531 232.735 32.8052 232.395 cv
32.7124 232.484 32.6235 232.577 32.5371 232.672 cv
32.499 232.713 32.4634 232.757 32.4268 232.8 cv
32.3799 232.854 32.3325 232.908 32.2876 232.965 cv
32.248 233.015 32.2104 233.065 32.1724 233.116 cv
32.1338 233.167 32.0952 233.219 32.0586 233.271 cv
32.0205 233.326 31.9839 233.381 31.9482 233.437 cv
31.9297 233.465 31.9097 233.491 31.8921 233.52 cv
31.875 233.547 31.8594 233.575 31.8428 233.603 cv
31.8164 233.646 31.79 233.69 31.7646 233.734 cv
31.7217 233.81 31.6807 233.886 31.6406 233.963 cv
31.6255 233.993 31.6094 234.021 31.5942 234.052 cv
31.5405 234.16 31.4902 234.271 31.4429 234.382 cv
31.4326 234.407 31.4233 234.432 31.4136 234.457 cv
31.3765 234.547 31.3418 234.639 31.3096 234.73 cv
31.2983 234.764 31.2871 234.796 31.2764 234.829 cv
31.2461 234.92 31.2183 235.012 31.1924 235.104 cv
31.1851 235.132 31.1768 235.159 31.1694 235.187 cv
31.106 235.427 31.0576 235.672 31.0244 235.919 cv
31.021 235.947 31.0181 235.975 31.0146 236.002 cv
31.0029 236.1 30.9937 236.197 30.9868 236.295 cv
30.9844 236.327 30.9824 236.358 30.9805 236.391 cv
30.9746 236.497 30.9717 236.604 30.9717 236.711 cv
30.9722 236.89 30.9771 237.017 30.9863 237.143 cv
31.0005 237.31 31.0117 237.412 31.0254 237.514 cv
31.0303 237.551 31.0356 237.587 31.0415 237.624 cv
31.0552 237.715 31.0718 237.807 31.0898 237.897 cv
31.0972 237.933 31.1035 237.967 31.1113 238.002 cv
31.1382 238.125 31.168 238.248 31.2026 238.369 cv
31.6597 239.96 32.1519 241.595 32.3716 242.067 cv
32.2466 242.178 li
26.3101 247.414 li
26.3101 247.414 29.3701 250.834 32.6543 252.09 cv
33.5747 252.441 34.1377 252.782 34.4453 253.093 cv
34.4453 253.093 117.151 207.652 143.562 202.281 cv
169.973 196.91 176.066 206.751 176.066 206.751 cv
173.878 207.797 li
180.628 205.097 186.443 202.999 190.883 201.548 cv
208.434 195.814 243.497 198.593 243.497 198.593 cv
243.497 198.593 244.158 198.677 245.104 198.805 cv
257.249 199.651 265.791 201.427 265.791 201.427 cv
265.791 201.427 268.315 203.449 268.127 205.109 cv
268.129 205.109 268.765 208.801 268.765 208.801 cv
340.088 194.028 li
348.996 191.914 li
348.908 190.972 348.81 190.349 348.701 190.191 cv
347.991 189.158 338.593 189.089 338.593 189.089 cv
335.398 187.897 345.5 185.865 352.039 186.041 cv
358.578 186.217 360.648 188.024 361.065 189.681 cv
361.364 190.871 361.148 193.493 359.767 197.743 cv
364.346 194.572 380.716 188.148 391.5 185.507 cv
403.252 182.628 411.443 182.957 411.443 182.957 cv
411.443 182.957 397.831 185.354 388.079 188.133 cv
378.327 190.912 363.256 197.311 361.528 199.845 cv
359.801 202.379 350.941 219.929 348.647 224.492 cv
346.354 229.055 328.774 235.368 324.665 237.348 cv
320.557 239.327 276.244 252.295 276.244 252.295 cv
278.573 266.058 li
282.233 265.566 285.766 264.983 288.362 264.325 cv
292.296 263.327 314.028 258.036 336.325 252.619 cv
332.574 253.529 li
336.164 251.357 339.723 249.133 341.385 247.874 cv
345.381 244.848 333.305 245.075 333.305 245.075 cv
333.305 245.075 357.314 236.506 363.209 236.665 cv
367.104 236.77 372.751 240.463 376.137 242.956 cv
378.67 242.342 380.922 241.795 382.813 241.337 cv
382.803 240.941 382.795 240.528 382.787 240.101 cv
382.676 233.725 382.793 223.816 383.997 212.906 cv
384.645 207.032 387.045 201.547 390.991 197.215 cv
391.53 196.623 392.099 196.052 392.695 195.505 cv
398.611 190.08 409.152 187.609 415.753 195.377 cv
418.53 198.646 419.897 202.783 420.32 207.052 cv
421.139 215.302 421.939 221.572 420.313 229.126 cv
419.99 230.629 419.573 232.18 419.039 233.81 cv
422.04 230.708 423.685 226.495 424.396 222.239 cv
425.118 217.929 424.753 213.641 424.868 209.314 cv
424.979 205.126 425.146 200.659 424.753 196.479 cv
cp
.647059 0 0 rgb
f
39.1147 226.826 mo
39.2549 226.72 39.397 226.612 39.541 226.505 cv
39.397 226.612 39.2549 226.72 39.1147 226.826 cv
cp
f
25.2876 252.294 mo
25.2754 252.247 25.2646 252.2 25.2534 252.153 cv
25.2646 252.2 25.2754 252.247 25.2876 252.294 cv
cp
f
42.0928 224.635 mo
41.8403 224.816 41.5918 224.996 41.3467 225.173 cv
41.5913 224.996 41.8413 224.816 42.0933 224.635 cv
42.0928 224.635 li
cp
f
25.6797 253.386 mo
25.666 253.356 25.6519 253.328 25.6387 253.3 cv
25.6519 253.328 25.666 253.356 25.6797 253.386 cv
cp
f
25.5679 253.134 mo
25.5566 253.107 25.5449 253.081 25.5342 253.055 cv
25.5449 253.081 25.5566 253.107 25.5679 253.134 cv
cp
f
38.3916 227.379 mo
38.5415 227.263 38.6938 227.146 38.8486 227.028 cv
38.6938 227.146 38.542 227.263 38.3916 227.379 cv
cp
f
37.6792 227.935 mo
37.8433 227.805 38.0098 227.675 38.1802 227.542 cv
38.0098 227.675 37.8433 227.805 37.6792 227.935 cv
cp
f
36.9165 228.544 mo
37.1162 228.382 37.3232 228.216 37.5352 228.048 cv
37.3232 228.216 37.1162 228.382 36.9165 228.544 cv
cp
f
39.8491 226.274 mo
39.9893 226.17 40.1323 226.063 40.2759 225.958 cv
40.1323 226.063 39.9897 226.17 39.8491 226.274 cv
cp
f
40.5933 225.723 mo
40.7969 225.574 41.0039 225.423 41.2134 225.271 cv
41.0039 225.423 40.7969 225.574 40.5933 225.723 cv
cp
f
27.0581 254.989 mo
27.0229 254.968 26.9897 254.944 26.9556 254.921 cv
26.9897 254.944 27.0229 254.968 27.0581 254.989 cv
cp
f
27.2998 255.124 mo
27.2632 255.105 27.229 255.085 27.1938 255.066 cv
27.229 255.085 27.2632 255.105 27.2998 255.124 cv
cp
f
27.5581 255.241 mo
27.5249 255.228 27.4932 255.212 27.4604 255.197 cv
27.4932 255.212 27.5249 255.228 27.5581 255.241 cv
cp
f
26.833 254.837 mo
26.8003 254.813 26.769 254.787 26.7373 254.762 cv
26.769 254.787 26.8003 254.813 26.833 254.837 cv
cp
f
80.9272 284.867 mo
80.5254 284.79 80.124 284.712 79.7236 284.632 cv
80.105 284.716 80.501 284.793 80.9272 284.867 cv
cp
f
25.8037 253.627 mo
25.7876 253.598 25.771 253.567 25.7549 253.538 cv
25.771 253.567 25.7876 253.598 25.8037 253.627 cv
cp
f
26.0898 254.079 mo
26.0684 254.05 26.0469 254.02 26.0259 253.989 cv
26.0469 254.02 26.0684 254.05 26.0898 254.079 cv
cp
f
25.9404 253.858 mo
25.9214 253.828 25.9023 253.799 25.8838 253.768 cv
25.9023 253.799 25.9214 253.828 25.9404 253.858 cv
cp
f
26.2534 254.289 mo
26.229 254.26 26.2051 254.23 26.1812 254.2 cv
26.2051 254.23 26.229 254.26 26.2534 254.289 cv
cp
f
26.4316 254.485 mo
26.4043 254.458 26.3774 254.429 26.3511 254.4 cv
26.3774 254.429 26.4043 254.458 26.4316 254.485 cv
cp
f
26.6245 254.669 mo
26.5942 254.643 26.5654 254.615 26.5361 254.587 cv
26.5654 254.615 26.5942 254.643 26.6245 254.669 cv
cp
f
214.687 212.421 mo
220.198 209.54 li
219.095 210.041 217.965 210.596 216.798 211.214 cv
216.068 211.6 215.367 212.004 214.687 212.421 cv
cp
f
191.303 274.579 mo
173.377 278.861 li
173.377 278.861 141.326 284.88 137.864 285.646 cv
134.402 286.414 115.795 288.309 112.71 288.778 cv
109.625 289.248 94.4565 288.963 90.2251 288.664 cv
85.9937 288.366 70.1172 284.682 61.9907 282.988 cv
53.8643 281.294 51.8364 279.027 51.0566 278.32 cv
50.2769 277.613 47.4565 272.826 48.6719 272.921 cv
49.8872 273.015 52.7915 277.794 52.7915 277.794 cv
61.6177 275.666 li
53.1016 256.02 li
53.1016 256.02 57.9917 255.813 62.772 256.28 cv
63.021 256.305 63.2651 256.341 63.5063 256.383 cv
64.3359 256.405 85.4253 260.424 90.8418 261.215 cv
96.2583 262.006 100.906 263.975 102.504 269.64 cv
102.885 270.99 103.252 272.461 103.591 273.918 cv
102.687 268.299 102.199 261.972 104.308 260.841 cv
105.327 260.294 106.641 259.421 108.087 258.621 cv
107.006 258.882 106.143 259.09 105.529 259.237 cv
105.459 259.901 103.768 260.365 103.768 260.365 cv
103.768 260.365 86.3164 258.144 78.7974 256.712 cv
71.2783 255.279 51.8955 252.885 52.1841 252.432 cv
52.4731 251.979 53.5083 251.177 53.5083 251.177 cv
53.5083 251.177 92.5513 255.916 100.899 257.391 cv
102.64 257.698 103.778 258.007 104.491 258.303 cv
104.491 258.303 155.011 228.855 165.659 223.612 cv
175.332 218.85 209.978 201.755 229.297 198.809 cv
203.941 198.404 185.281 206.267 174.063 210.063 cv
171.573 210.905 167.076 212.9 161.49 215.545 cv
163.416 215.208 165.568 215.047 167.966 215.183 cv
174.224 215.536 171.756 218.295 171.756 218.295 cv
166.828 220.928 li
146.386 231.606 li
146.386 231.606 131.317 239.019 125.446 242.547 cv
119.576 246.075 114.725 245.944 113.032 244.916 cv
111.339 243.888 113.923 241.499 113.923 241.499 cv
113.923 241.499 117.093 238.655 119.487 236.613 cv
108.733 242.17 100.767 246.367 100.767 246.367 cv
109.061 240.623 117.688 235.332 126.241 230.532 cv
116.289 230.104 li
91.2778 238.186 li
91.2778 238.186 66.9023 246.653 63.3643 247.986 cv
59.8257 249.319 53.9814 250.729 53.9814 250.729 cv
56.4028 249.318 li
33.605 254.7 li
33.4712 254.731 33.3555 254.689 33.2759 254.611 cv
32.7461 254.688 32.2944 254.845 31.7759 254.907 cv
34.9028 255.988 38.0317 256.563 38.4355 256.854 cv
38.9673 257.236 39.3706 259.02 39.3706 259.02 cv
40.2559 259.871 41.4385 261.265 42.1265 263.128 cv
43.1211 265.824 46.5 273.827 48.5283 278.252 cv
49.1797 278.705 49.6299 279.104 49.7983 279.403 cv
50.5024 280.65 52.0332 283.15 54.8369 283.963 cv
57.6411 284.776 77.5454 289.489 85.1382 290.432 cv
92.7334 291.373 108.046 293.139 120.475 292.489 cv
132.574 291.859 191.262 281.889 194.377 281.358 cv
193.127 279.307 192.092 277.048 191.303 274.579 cv
cp
f
223.796 209.455 mo
223.876 209.433 223.956 209.413 224.036 209.392 cv
223.956 209.413 223.876 209.433 223.796 209.455 cv
cp
f
223.208 209.62 mo
223.266 209.603 223.324 209.587 223.381 209.571 cv
223.324 209.587 223.266 209.603 223.208 209.62 cv
cp
f
35.6714 257.776 mo
32.5688 256.744 28.5347 255.431 27.835 255.339 cv
27.835 255.339 32.1387 257.091 35.6714 257.776 cv
cp
f
67.5488 267.132 mo
65.2759 262.554 63.5063 256.383 63.5063 256.383 cv
63.2651 256.341 63.021 256.305 62.772 256.28 cv
57.9917 255.813 53.1016 256.02 53.1016 256.02 cv
61.6177 275.666 li
71.6748 273.241 li
69.9478 271.268 68.5225 269.092 67.5488 267.132 cv
cp
.309804 .0235294 0 rgb
f
42.1265 263.128 mo
41.4385 261.265 40.2559 259.871 39.3691 259.019 cv
39.3433 259.01 37.7085 258.454 35.6714 257.776 cv
32.1387 257.091 27.835 255.339 27.835 255.339 cv
27.835 255.339 26.9546 269.816 29.9673 271.986 cv
32.9814 274.157 34.2563 272.471 38.8892 273.824 cv
42.4077 274.854 46.4712 276.817 48.5283 278.252 cv
46.5 273.827 43.1211 265.824 42.1265 263.128 cv
cp
.00392157 0 0 rgb
f
173.878 207.797 mo
176.066 206.751 li
172.889 208.194 li
173.222 208.061 173.55 207.929 173.878 207.797 cv
cp
.54902 .0117647 .0117647 rgb
f
176.066 206.751 mo
176.066 206.751 169.973 196.91 143.562 202.281 cv
117.151 207.652 34.4453 253.093 34.4453 253.093 cv
34.4453 253.093 79.4365 232.349 113.441 222.206 cv
147.445 212.063 176.066 206.751 176.066 206.751 cv
cp
f
108.087 258.621 mo
106.641 259.421 105.327 260.294 104.308 260.841 cv
102.199 261.972 102.687 268.299 103.591 273.918 cv
104.673 278.572 105.46 283.084 105.46 283.084 cv
105.46 283.084 85.1558 280.693 79.8535 279.076 cv
76.8228 278.151 73.98 275.876 71.6748 273.241 cv
61.6177 275.666 li
52.7915 277.794 li
52.7915 277.794 72.3872 283.017 79.7236 284.632 cv
80.124 284.712 80.5254 284.79 80.9272 284.867 cv
88.019 286.107 103.778 286.605 119.582 285.063 cv
122.678 284.29 124.34 283.593 124.34 283.593 cv
124.34 283.593 123.307 274.071 119.92 262.92 cv
118.761 259.104 117.027 257.41 115.089 256.917 cv
112.265 257.609 109.878 258.188 108.087 258.621 cv
cp
.298039 0 0 rgb
f
67.5488 267.132 mo
68.5225 269.092 69.9478 271.268 71.6748 273.241 cv
73.98 275.876 76.8228 278.151 79.8535 279.076 cv
85.1558 280.693 105.46 283.084 105.46 283.084 cv
105.46 283.084 104.673 278.572 103.591 273.918 cv
103.252 272.461 102.885 270.99 102.504 269.64 cv
100.906 263.975 96.2583 262.006 90.8418 261.215 cv
85.4253 260.424 64.3359 256.405 63.5063 256.383 cv
63.5063 256.383 65.2759 262.554 67.5488 267.132 cv
cp
0 0 0 rgb
f
80.9272 284.867 mo
80.501 284.793 80.105 284.716 79.7437 284.637 cv
72.3872 283.017 52.7915 277.794 52.7915 277.794 cv
52.7915 277.794 49.8872 273.015 48.6719 272.921 cv
47.4565 272.826 50.2769 277.613 51.0566 278.32 cv
51.8364 279.027 53.8643 281.294 61.9907 282.988 cv
70.1172 284.682 85.9937 288.366 90.2251 288.664 cv
94.4565 288.963 109.625 289.248 112.71 288.778 cv
115.795 288.309 134.402 286.414 137.864 285.646 cv
141.326 284.88 173.377 278.861 173.377 278.861 cv
191.303 274.579 li
190.998 273.624 190.731 272.637 190.501 271.618 cv
178.608 274.216 142.686 281.957 126.966 284.186 cv
124.526 284.531 122.053 284.822 119.582 285.063 cv
103.778 286.605 88.019 286.107 80.9272 284.867 cv
cp
.298039 .0196078 0 rgb
f
33.4478 254.589 mo
33.3892 254.595 33.3325 254.603 33.2759 254.611 cv
33.3555 254.689 33.4712 254.731 33.605 254.7 cv
56.4028 249.318 li
63.813 245.003 li
63.813 245.003 101.59 231.735 106.302 230.664 cv
106.493 230.62 106.685 230.581 106.877 230.542 cv
106.875 230.542 149.577 218.458 149.577 218.458 cv
157.992 214.444 165.917 211.006 172.889 208.194 cv
176.066 206.751 li
176.066 206.751 147.445 212.063 113.441 222.206 cv
79.4365 232.349 34.4453 253.093 34.4453 253.093 cv
35.2344 253.892 34.334 254.494 33.4478 254.589 cv
cp
.576471 .0117647 .0117647 rgb
f
39.1831 240.1 mo
35.4082 243.377 li
35.4082 243.377 33.9897 245.858 37.2188 244.594 cv
40.4482 243.329 42.3662 240.554 42.3662 240.554 cv
42.3662 240.554 41.9858 238.7 39.1831 240.1 cv
cp
.956863 .909804 .843137 rgb
f
149.577 218.458 mo
106.875 230.542 li
111.432 229.634 116.289 230.104 116.289 230.104 cv
126.241 230.532 li
134.192 226.07 142.079 222.036 149.577 218.458 cv
cp
.337255 .0313726 0 rgb
f
106.877 230.542 mo
106.685 230.581 106.493 230.62 106.302 230.664 cv
101.59 231.735 63.813 245.003 63.813 245.003 cv
56.4028 249.318 li
53.9814 250.729 li
53.9814 250.729 59.8257 249.319 63.3643 247.986 cv
66.9023 246.653 91.2778 238.186 91.2778 238.186 cv
116.289 230.104 li
116.289 230.104 111.432 229.634 106.877 230.542 cv
cp
.517647 .0235294 0 rgb
f
25.0908 251.262 mo
25.0825 251.2 25.0752 251.139 25.0684 251.078 cv
25.0747 251.139 25.0825 251.2 25.0908 251.262 cv
cp
.752941 .313726 .305882 rgb
f
25.0596 250.996 mo
25.0547 250.947 25.0498 250.898 25.0454 250.851 cv
25.0498 250.898 25.0547 250.947 25.0596 250.996 cv
cp
f
28.8633 253.707 mo
29.7744 254.164 30.7749 254.562 31.7759 254.907 cv
32.2944 254.845 32.7461 254.688 33.2759 254.611 cv
33.3325 254.603 33.3892 254.595 33.4478 254.589 cv
34.334 254.494 35.2344 253.892 34.4453 253.093 cv
34.1377 252.782 33.5747 252.441 32.6543 252.09 cv
29.3701 250.834 26.3101 247.414 26.3101 247.414 cv
25.0698 248.507 li
25.0698 248.507 25.0488 248.661 25.0308 248.924 cv
25.0874 249.485 25.5332 252.04 28.8633 253.707 cv
cp
f
25.0967 251.312 mo
25.1284 251.545 25.1694 251.784 25.2222 252.022 cv
25.1699 251.784 25.1289 251.546 25.0967 251.312 cv
cp
f
25.0098 250.29 mo
25.0083 250.263 25.0073 250.234 25.0063 250.206 cv
25.0073 250.234 25.0083 250.263 25.0098 250.29 cv
cp
f
25.0205 250.516 mo
25.0186 250.48 25.0166 250.446 25.0151 250.413 cv
25.0166 250.446 25.0186 250.48 25.0205 250.516 cv
cp
f
25.0371 250.749 mo
25.0337 250.708 25.0308 250.668 25.0278 250.628 cv
25.0308 250.668 25.0337 250.708 25.0371 250.749 cv
cp
f
35.6714 257.776 mo
37.7085 258.454 39.3433 259.01 39.3691 259.019 cv
39.3706 259.02 38.9673 257.236 38.4355 256.854 cv
38.0317 256.563 34.9028 255.988 31.7759 254.907 cv
30.7749 254.562 29.7744 254.164 28.8633 253.707 cv
25.5332 252.04 25.0874 249.485 25.0308 248.924 cv
25.0195 249.079 25.0093 249.273 25.0039 249.495 cv
25.0024 249.548 25.0015 249.6 25.001 249.651 cv
25 249.727 25 249.774 25 249.824 cv
25.0005 249.917 25.001 249.964 25.0015 250.011 cv
25.0039 250.118 25.0049 250.162 25.0063 250.206 cv
25.0073 250.234 25.0083 250.263 25.0098 250.29 cv
25.0112 250.331 25.0127 250.371 25.0151 250.413 cv
25.0166 250.446 25.0186 250.48 25.0205 250.516 cv
25.0229 250.553 25.0254 250.59 25.0278 250.628 cv
25.0308 250.668 25.0337 250.708 25.0371 250.749 cv
25.0396 250.782 25.0425 250.816 25.0454 250.851 cv
25.0498 250.898 25.0547 250.947 25.0596 250.996 cv
25.0625 251.023 25.0649 251.051 25.0684 251.078 cv
25.0752 251.139 25.0825 251.2 25.0908 251.262 cv
25.1289 251.546 25.1699 251.784 25.2227 252.022 cv
25.2349 252.079 25.2446 252.116 25.2534 252.153 cv
25.2646 252.2 25.2754 252.247 25.2876 252.294 cv
25.3096 252.379 25.333 252.464 25.3584 252.549 cv
25.3955 252.666 25.4175 252.735 25.4409 252.804 cv
25.4883 252.935 25.5107 252.995 25.5342 253.055 cv
25.5449 253.081 25.5566 253.107 25.5679 253.134 cv
25.5908 253.189 25.6138 253.245 25.6387 253.3 cv
25.6519 253.328 25.666 253.356 25.6797 253.386 cv
25.7041 253.437 25.729 253.487 25.7549 253.538 cv
25.771 253.567 25.7876 253.598 25.8037 253.627 cv
25.8296 253.675 25.8564 253.722 25.8838 253.768 cv
25.9023 253.799 25.9214 253.828 25.9404 253.858 cv
25.9678 253.902 25.9966 253.946 26.0259 253.989 cv
26.0469 254.02 26.0684 254.05 26.0898 254.079 cv
26.1196 254.12 26.1499 254.161 26.1812 254.2 cv
26.2051 254.23 26.229 254.26 26.2534 254.289 cv
26.2852 254.326 26.3179 254.363 26.3511 254.4 cv
26.3774 254.429 26.4043 254.458 26.4316 254.485 cv
26.4653 254.521 26.5005 254.554 26.5361 254.587 cv
26.5654 254.615 26.5942 254.643 26.6245 254.669 cv
26.6611 254.7 26.6992 254.731 26.7373 254.762 cv
26.769 254.787 26.8003 254.813 26.833 254.837 cv
26.8726 254.866 26.9141 254.894 26.9556 254.921 cv
26.9897 254.944 27.0229 254.968 27.0581 254.989 cv
27.1021 255.016 27.1479 255.041 27.1938 255.066 cv
27.229 255.085 27.2632 255.105 27.2998 255.124 cv
27.3516 255.15 27.4063 255.174 27.4604 255.197 cv
27.4932 255.212 27.5249 255.228 27.5581 255.241 cv
27.6475 255.276 27.7397 255.31 27.835 255.339 cv
28.5347 255.431 32.5688 256.744 35.6714 257.776 cv
cp
.239216 .0901961 .0627451 rgb
f
82.375 199.055 mo
82.4893 198.997 82.603 198.938 82.7178 198.881 cv
82.603 198.938 82.4893 198.997 82.375 199.055 cv
cp
.576471 .0117647 .0117647 rgb
f
81.6167 199.444 mo
81.7319 199.384 81.8467 199.323 81.9629 199.264 cv
81.8467 199.323 81.7319 199.384 81.6167 199.444 cv
cp
f
83.1509 198.669 mo
83.2607 198.615 83.3701 198.561 83.4805 198.507 cv
83.3701 198.561 83.2607 198.615 83.1509 198.669 cv
cp
f
84.7778 197.897 mo
84.8613 197.859 84.9448 197.82 85.0283 197.782 cv
84.9448 197.82 84.8613 197.859 84.7778 197.897 cv
cp
f
80.8701 199.84 mo
80.9858 199.778 81.1006 199.715 81.2168 199.653 cv
81.1006 199.715 80.9858 199.778 80.8701 199.84 cv
cp
f
79.4106 200.655 mo
79.5254 200.589 79.6396 200.522 79.7554 200.457 cv
79.6396 200.522 79.5254 200.589 79.4106 200.655 cv
cp
f
80.1338 200.245 mo
80.2495 200.18 80.3643 200.115 80.481 200.051 cv
80.3643 200.115 80.2495 200.18 80.1338 200.245 cv
cp
f
89.8438 195.773 mo
89.8877 195.756 89.9312 195.74 89.9751 195.724 cv
89.9312 195.74 89.8877 195.756 89.8438 195.773 cv
cp
f
91.4785 195.163 mo
91.5356 195.142 91.5933 195.122 91.6509 195.101 cv
91.5933 195.122 91.5356 195.142 91.4785 195.163 cv
cp
f
92.2988 194.869 mo
92.3589 194.847 92.4194 194.827 92.4795 194.805 cv
92.4194 194.827 92.3589 194.847 92.2988 194.869 cv
cp
f
78.2617 201.337 mo
78.5215 201.178 78.7837 201.021 79.0479 200.866 cv
78.7837 201.021 78.521 201.178 78.2617 201.337 cv
cp
f
90.6602 195.464 mo
90.7114 195.445 90.7627 195.427 90.8135 195.408 cv
90.7627 195.427 90.7114 195.445 90.6602 195.464 cv
cp
f
89.0293 196.09 mo
89.0684 196.075 89.1074 196.06 89.1465 196.044 cv
89.1074 196.06 89.0684 196.075 89.0293 196.09 cv
cp
f
85.6904 197.485 mo
85.7314 197.467 85.772 197.449 85.813 197.431 cv
85.772 197.449 85.7314 197.467 85.6904 197.485 cv
cp
f
51.4287 218.252 mo
51.6689 218.094 51.9111 217.935 52.1533 217.775 cv
51.9111 217.935 51.6689 218.094 51.4287 218.252 cv
cp
f
61.7495 211.594 mo
67.6313 207.87 73.4731 204.27 78.2617 201.337 cv
73.4727 204.27 67.6313 207.87 61.7495 211.594 cv
cp
f
52.5625 217.506 mo
52.811 217.343 53.0615 217.18 53.312 217.016 cv
53.0615 217.18 52.811 217.343 52.5625 217.506 cv
cp
f
50.3086 218.995 mo
50.5435 218.838 50.7808 218.682 51.0176 218.524 cv
50.7808 218.682 50.5435 218.838 50.3086 218.995 cv
cp
f
47.0386 221.191 mo
47.2993 221.014 47.5645 220.834 47.8296 220.655 cv
47.5645 220.835 47.2998 221.014 47.0386 221.191 cv
cp
f
49.2007 219.733 mo
49.4355 219.576 49.6729 219.418 49.9102 219.26 cv
49.6729 219.418 49.4355 219.576 49.2007 219.733 cv
cp
f
48.1084 220.467 mo
48.3521 220.303 48.5986 220.137 48.8452 219.972 cv
48.5986 220.137 48.3521 220.303 48.1084 220.467 cv
cp
f
53.7036 216.759 mo
53.9644 216.589 54.2261 216.419 54.4878 216.249 cv
54.2261 216.419 53.9644 216.589 53.7036 216.759 cv
cp
f
58.314 213.781 mo
58.6426 213.57 58.9722 213.36 59.3018 213.149 cv
58.9722 213.36 58.6426 213.57 58.314 213.781 cv
cp
f
59.4741 213.04 mo
59.8247 212.816 60.1753 212.593 60.5264 212.37 cv
60.1753 212.593 59.8247 212.816 59.4741 213.04 cv
cp
f
60.6143 212.313 mo
60.9922 212.074 61.3701 211.834 61.7476 211.595 cv
61.3696 211.834 60.9922 212.074 60.6143 212.313 cv
cp
f
57.1611 214.521 mo
57.4722 214.32 57.7842 214.12 58.0967 213.92 cv
57.7842 214.12 57.4727 214.32 57.1611 214.521 cv
cp
f
54.8545 216.011 mo
55.1255 215.834 55.3979 215.658 55.6709 215.481 cv
55.3979 215.658 55.126 215.834 54.8545 216.011 cv
cp
f
56.0107 215.262 mo
56.3003 215.075 56.5898 214.888 56.8804 214.701 cv
56.5898 214.888 56.3003 215.075 56.0107 215.262 cv
cp
f
83.9463 198.286 mo
84.0479 198.237 84.1489 198.188 84.2515 198.141 cv
84.1489 198.188 84.0479 198.237 83.9463 198.286 cv
cp
f
101.307 192.076 mo
101.338 192.067 101.369 192.059 101.4 192.051 cv
101.369 192.059 101.338 192.067 101.307 192.076 cv
cp
f
102.108 191.861 mo
102.135 191.854 102.161 191.848 102.188 191.84 cv
102.161 191.848 102.135 191.854 102.108 191.861 cv
cp
f
46.8794 221.3 mo
45.2261 222.426 43.6582 223.516 42.2104 224.551 cv
42.4912 224.351 42.7764 224.147 43.0664 223.942 cv
44.269 223.091 45.5469 222.207 46.8794 221.3 cv
cp
f
99.6909 192.524 mo
99.7305 192.513 99.7695 192.501 99.8091 192.49 cv
99.7695 192.501 99.7305 192.513 99.6909 192.524 cv
cp
f
98.8755 192.758 mo
98.9199 192.745 98.9644 192.732 99.0088 192.719 cv
98.9644 192.732 98.9199 192.745 98.8755 192.758 cv
cp
f
42.1846 224.57 mo
42.1543 224.591 42.1226 224.614 42.0928 224.635 cv
42.124 224.613 42.1538 224.592 42.1846 224.57 cv
cp
f
45.6655 225.616 mo
48.374 224.811 50.7534 224.243 52.1147 224.227 cv
56.9092 224.172 57.9048 224.844 57.9048 224.844 cv
73.4487 215.77 121.528 196.42 133.968 193.068 cv
139.164 191.667 141.142 190.439 141.68 189.482 cv
140.882 189.404 140.053 189.323 139.207 189.243 cv
126.923 191.234 97.5283 196.599 83.5288 204.257 cv
73.6108 209.682 57.8208 218.661 45.6655 225.616 cv
cp
f
100.5 192.297 mo
100.537 192.287 100.573 192.277 100.609 192.267 cv
100.573 192.277 100.537 192.287 100.5 192.297 cv
cp
f
93.1221 194.581 mo
93.1821 194.56 93.2422 194.54 93.3022 194.519 cv
93.2422 194.54 93.1821 194.56 93.1221 194.581 cv
cp
f
95.5962 193.758 mo
95.6489 193.741 95.7017 193.725 95.7544 193.708 cv
95.7017 193.725 95.6489 193.741 95.5962 193.758 cv
cp
f
94.77 194.026 mo
94.8271 194.007 94.8848 193.989 94.9424 193.97 cv
94.8848 193.989 94.8271 194.007 94.77 194.026 cv
cp
f
98.0596 192.998 mo
98.1064 192.984 98.1533 192.97 98.2002 192.956 cv
98.1533 192.97 98.1064 192.984 98.0596 192.998 cv
cp
f
93.9453 194.3 mo
94.0054 194.28 94.0659 194.26 94.1265 194.24 cv
94.0659 194.26 94.0054 194.28 93.9453 194.3 cv
cp
f
97.2397 193.245 mo
97.2896 193.229 97.3389 193.215 97.3882 193.2 cv
97.3389 193.215 97.2896 193.229 97.2397 193.245 cv
cp
f
96.4185 193.498 mo
96.4702 193.482 96.5215 193.466 96.5732 193.45 cv
96.5215 193.466 96.4702 193.482 96.4185 193.498 cv
cp
f
347.824 221.529 mo
347.661 221.958 347.661 221.96 347.661 221.96 cv
347.661 221.96 347.485 222.283 347.047 222.799 cv
345.38 224.761 339.901 229.516 325.715 229.938 cv
324.265 230.961 322.638 231.931 320.79 232.999 cv
313.344 237.306 281.053 246.751 275.57 248.339 cv
275.822 249.805 li
276.244 252.295 li
276.244 252.295 320.557 239.327 324.665 237.348 cv
328.774 235.368 346.354 229.055 348.647 224.492 cv
350.941 219.929 359.801 202.379 361.528 199.845 cv
363.256 197.311 378.327 190.912 388.079 188.133 cv
397.831 185.354 411.443 182.957 411.443 182.957 cv
411.443 182.957 403.252 182.628 391.5 185.507 cv
380.716 188.148 364.346 194.572 359.767 197.743 cv
359.224 199.412 358.501 201.333 357.559 203.517 cv
354.887 209.708 349.77 218.322 347.824 221.529 cv
cp
.694118 .290196 .27451 rgb
f
31.894 233.518 mo
35.0112 231.724 39.9351 228.895 45.6655 225.616 cv
57.8208 218.661 73.6108 209.682 83.5288 204.257 cv
97.5283 196.599 126.923 191.234 139.207 189.243 cv
132.156 188.57 123.887 187.888 121.383 188.121 cv
119.29 188.314 113.32 189.162 106.023 190.882 cv
105.769 190.943 105.522 191.001 105.274 191.061 cv
105.003 191.126 104.759 191.186 104.514 191.247 cv
104.23 191.316 103.988 191.377 103.744 191.439 cv
103.453 191.512 103.212 191.574 102.97 191.636 cv
102.665 191.715 102.427 191.777 102.188 191.84 cv
102.161 191.848 102.135 191.854 102.108 191.861 cv
101.873 191.923 101.637 191.987 101.4 192.051 cv
101.369 192.059 101.338 192.067 101.307 192.076 cv
101.075 192.139 100.842 192.202 100.609 192.267 cv
100.573 192.277 100.537 192.287 100.5 192.297 cv
100.271 192.36 100.04 192.425 99.8091 192.49 cv
99.7695 192.501 99.7305 192.513 99.6909 192.524 cv
99.4644 192.588 99.2368 192.653 99.0088 192.719 cv
98.9644 192.732 98.9199 192.745 98.8755 192.758 cv
98.6509 192.823 98.4258 192.89 98.2002 192.956 cv
98.1533 192.97 98.1064 192.984 98.0596 192.998 cv
97.8359 193.064 97.6123 193.132 97.3882 193.2 cv
97.3389 193.215 97.2896 193.229 97.2397 193.245 cv
97.0181 193.313 96.7954 193.381 96.5732 193.45 cv
96.5215 193.466 96.4702 193.482 96.4185 193.498 cv
96.1973 193.567 95.9761 193.637 95.7544 193.708 cv
95.7017 193.725 95.6489 193.741 95.5962 193.758 cv
95.3784 193.828 95.1602 193.899 94.9424 193.97 cv
94.8848 193.989 94.8271 194.007 94.77 194.026 cv
94.5552 194.097 94.3408 194.168 94.1265 194.24 cv
94.0659 194.26 94.0054 194.28 93.9453 194.3 cv
93.731 194.373 93.5166 194.446 93.3022 194.519 cv
93.2422 194.54 93.1821 194.56 93.1221 194.581 cv
92.9077 194.655 92.6934 194.73 92.4795 194.805 cv
92.4194 194.827 92.3589 194.847 92.2988 194.869 cv
92.083 194.945 91.8667 195.023 91.6509 195.101 cv
91.5933 195.122 91.5356 195.142 91.4785 195.163 cv
91.2563 195.244 91.0347 195.326 90.8135 195.408 cv
90.7627 195.427 90.7114 195.445 90.6602 195.464 cv
90.4316 195.55 90.2031 195.637 89.9751 195.724 cv
89.9312 195.74 89.8877 195.756 89.8438 195.773 cv
89.6108 195.863 89.3789 195.953 89.1465 196.044 cv
89.1074 196.06 89.0684 196.075 89.0293 196.09 cv
88.7754 196.19 88.5225 196.291 88.27 196.393 cv
87.4106 196.741 86.6069 197.08 85.813 197.431 cv
85.772 197.449 85.7314 197.467 85.6904 197.485 cv
85.4692 197.583 85.2485 197.682 85.0283 197.782 cv
84.9448 197.82 84.8613 197.859 84.7778 197.897 cv
84.6021 197.979 84.4263 198.059 84.2515 198.141 cv
84.1489 198.188 84.0479 198.237 83.9463 198.286 cv
83.7905 198.359 83.6348 198.433 83.4805 198.507 cv
83.3701 198.561 83.2607 198.615 83.1509 198.669 cv
83.0063 198.739 82.8613 198.81 82.7178 198.881 cv
82.603 198.938 82.4893 198.997 82.375 199.055 cv
82.2373 199.124 82.0996 199.193 81.9629 199.264 cv
81.8467 199.323 81.7319 199.384 81.6167 199.444 cv
81.4834 199.514 81.3496 199.583 81.2168 199.653 cv
81.1006 199.715 80.9858 199.778 80.8701 199.84 cv
80.7402 199.911 80.6099 199.98 80.481 200.051 cv
80.3643 200.115 80.2495 200.18 80.1338 200.245 cv
80.0073 200.315 79.8804 200.385 79.7554 200.457 cv
79.6396 200.522 79.5254 200.589 79.4106 200.655 cv
79.3091 200.714 79.207 200.771 79.1064 200.831 cv
80.2319 201.556 81.3149 202.68 80.1069 203.929 cv
78.0215 206.084 78.0215 206.084 78.0215 206.084 cv
78.0215 206.084 45.4546 224.377 43.0698 223.944 cv
42.7764 224.147 42.4912 224.351 42.2104 224.551 cv
42.1538 224.592 42.124 224.613 42.0933 224.635 cv
41.8413 224.816 41.5913 224.996 41.3467 225.173 cv
41.3018 225.206 41.2583 225.238 41.2134 225.271 cv
41.0039 225.423 40.7969 225.574 40.5933 225.723 cv
40.4858 225.802 40.3813 225.88 40.2759 225.958 cv
40.1323 226.063 39.9893 226.17 39.8491 226.274 cv
39.7451 226.352 39.6431 226.428 39.541 226.505 cv
39.397 226.612 39.2549 226.72 39.1147 226.826 cv
39.0254 226.894 38.9365 226.961 38.8486 227.028 cv
38.6938 227.146 38.5415 227.263 38.3916 227.379 cv
38.3208 227.434 38.2495 227.488 38.1802 227.542 cv
38.0098 227.675 37.8433 227.805 37.6792 227.935 cv
37.6313 227.972 37.582 228.011 37.5352 228.048 cv
37.3232 228.216 37.1162 228.382 36.9165 228.544 cv
35.3125 229.844 34.0977 230.962 33.3843 231.833 cv
32.8052 232.395 li
32.4531 232.735 32.1479 233.112 31.894 233.518 cv
cp
.752941 .313726 .305882 rgb
f
149.577 218.458 mo
142.079 222.036 134.192 226.07 126.241 230.532 cv
117.688 235.332 109.061 240.623 100.767 246.367 cv
100.767 246.367 108.733 242.17 119.487 236.613 cv
120.184 236.019 120.816 235.491 121.284 235.123 cv
123.359 233.489 150.642 219.631 153.879 218.06 cv
155.876 217.09 158.389 216.088 161.49 215.545 cv
167.076 212.9 171.573 210.905 174.063 210.063 cv
185.281 206.267 203.941 198.404 229.297 198.809 cv
231.244 198.512 233.036 198.358 234.63 198.375 cv
238.318 198.417 241.84 198.577 245.104 198.805 cv
244.158 198.677 243.497 198.593 243.497 198.593 cv
243.497 198.593 208.434 195.814 190.883 201.548 cv
186.443 202.999 180.628 205.097 173.878 207.797 cv
173.55 207.929 173.222 208.061 172.889 208.194 cv
165.917 211.006 157.992 214.444 149.577 218.458 cv
cp
f
43.0698 223.944 mo
45.4546 224.377 78.0215 206.084 78.0215 206.084 cv
78.0215 206.084 78.0215 206.084 80.1069 203.929 cv
81.3149 202.68 80.2319 201.556 79.1064 200.831 cv
78.7837 201.021 78.5215 201.178 78.2617 201.337 cv
73.4731 204.27 67.6313 207.87 61.7495 211.594 cv
61.3701 211.834 60.9922 212.074 60.6143 212.313 cv
60.585 212.333 60.5557 212.351 60.5264 212.37 cv
60.1753 212.593 59.8247 212.816 59.4741 213.04 cv
59.4165 213.076 59.3589 213.113 59.3018 213.149 cv
58.9722 213.36 58.6426 213.57 58.314 213.781 cv
58.2417 213.827 58.1689 213.874 58.0967 213.92 cv
57.7842 214.12 57.4722 214.32 57.1611 214.521 cv
57.0674 214.581 56.9741 214.641 56.8804 214.701 cv
56.5898 214.888 56.3003 215.075 56.0107 215.262 cv
55.8975 215.335 55.7842 215.408 55.6709 215.481 cv
55.3979 215.658 55.1255 215.834 54.8545 216.011 cv
54.7319 216.09 54.6099 216.169 54.4878 216.249 cv
54.2261 216.419 53.9644 216.589 53.7036 216.759 cv
53.5728 216.845 53.4424 216.93 53.312 217.016 cv
53.0615 217.18 52.811 217.343 52.5625 217.506 cv
52.4253 217.596 52.29 217.686 52.1533 217.775 cv
51.9111 217.935 51.6689 218.094 51.4287 218.252 cv
51.291 218.343 51.1548 218.434 51.0176 218.524 cv
50.7808 218.682 50.5435 218.838 50.3086 218.995 cv
50.1748 219.083 50.043 219.171 49.9102 219.26 cv
49.6729 219.418 49.4355 219.576 49.2007 219.733 cv
49.0815 219.813 48.9639 219.892 48.8452 219.972 cv
48.5986 220.137 48.3521 220.303 48.1084 220.467 cv
48.0146 220.53 47.9229 220.592 47.8296 220.655 cv
47.5645 220.834 47.2993 221.014 47.0386 221.191 cv
46.9849 221.228 46.9326 221.264 46.8794 221.3 cv
45.5469 222.207 44.269 223.091 43.0664 223.942 cv
43.0679 223.944 43.0679 223.944 43.0698 223.944 cv
cp
.886275 .870588 .854902 rgb
f
164.011 216.736 mo
169.297 217.034 167.213 219.365 167.213 219.365 cv
163.05 221.589 li
145.782 230.61 li
145.782 230.61 133.052 236.871 128.092 239.853 cv
123.133 242.833 119.035 242.723 117.605 241.854 cv
116.175 240.984 118.358 238.967 118.358 238.967 cv
118.358 238.967 122.822 234.961 124.576 233.581 cv
126.33 232.2 149.376 220.494 152.111 219.166 cv
154.846 217.838 158.725 216.438 164.011 216.736 cv
cp
121.284 235.123 mo
120.816 235.491 120.184 236.019 119.487 236.613 cv
117.093 238.655 113.923 241.499 113.923 241.499 cv
113.923 241.499 111.339 243.888 113.032 244.916 cv
114.725 245.944 119.576 246.075 125.446 242.547 cv
131.317 239.019 146.386 231.606 146.386 231.606 cv
166.828 220.928 li
171.756 218.295 li
171.756 218.295 174.224 215.536 167.966 215.183 cv
165.568 215.047 163.416 215.208 161.49 215.545 cv
158.389 216.088 155.876 217.09 153.879 218.06 cv
150.642 219.631 123.359 233.489 121.284 235.123 cv
cp
f
124.576 233.581 mo
122.822 234.961 118.358 238.967 118.358 238.967 cv
118.358 238.967 116.175 240.984 117.605 241.854 cv
119.035 242.723 123.133 242.833 128.092 239.853 cv
133.052 236.871 145.782 230.61 145.782 230.61 cv
163.05 221.589 li
167.213 219.365 li
167.213 219.365 169.297 217.034 164.011 216.736 cv
158.725 216.438 154.846 217.838 152.111 219.166 cv
149.376 220.494 126.33 232.2 124.576 233.581 cv
cp
.756863 .913725 .917647 rgb
f
347.824 221.529 mo
347.336 222.334 347.047 222.799 347.047 222.799 cv
347.485 222.283 347.661 221.96 347.661 221.96 cv
347.661 221.96 347.661 221.958 347.824 221.529 cv
cp
.117647 0 0 rgb
f
336.021 211.614 mo
333.536 222.351 330.657 226.452 325.715 229.938 cv
339.901 229.516 345.38 224.761 347.047 222.799 cv
347.047 222.799 349.639 213.534 349.659 212.797 cv
349.676 212.173 349.485 197.13 348.996 191.914 cv
340.088 194.028 li
336.021 211.614 li
cp
f
325.715 229.938 mo
330.657 226.452 333.536 222.351 336.021 211.614 cv
271.105 222.402 li
275.57 248.339 li
281.053 246.751 313.344 237.306 320.79 232.999 cv
322.638 231.931 324.265 230.961 325.715 229.938 cv
cp
.537255 .0117647 0 rgb
f
151.929 182.047 mo
153.595 182.092 154.969 181.278 154.998 180.229 cv
155.025 179.181 153.698 178.294 152.031 178.249 cv
150.365 178.204 148.992 179.018 148.963 180.067 cv
148.935 181.116 150.263 182.002 151.929 182.047 cv
cp
.717647 .113725 .113725 rgb
f
275.822 249.805 mo
275.57 248.339 li
271.105 222.402 li
336.021 211.614 li
340.088 194.028 li
268.765 208.801 li
268.129 205.109 li
267.956 206.616 265.548 207.826 256.975 206.951 cv
240.507 205.272 231.929 204.217 220.198 209.54 cv
214.687 212.421 li
202.696 219.786 197.906 231.768 184.256 237.68 cv
173.475 242.351 134.222 252.227 115.089 256.917 cv
117.027 257.41 118.761 259.104 119.92 262.92 cv
123.307 274.071 124.34 283.593 124.34 283.593 cv
124.34 283.593 122.678 284.29 119.582 285.063 cv
122.053 284.822 124.526 284.531 126.966 284.186 cv
142.686 281.957 178.608 274.216 190.501 271.618 cv
189.766 268.369 189.421 264.802 189.525 260.913 cv
190.001 243.257 199.579 224.096 212.635 216.147 cv
215.517 213.344 218.662 211.128 221.992 210.002 cv
222.398 209.865 222.804 209.738 223.208 209.62 cv
223.266 209.603 223.324 209.587 223.381 209.571 cv
223.52 209.531 223.658 209.492 223.796 209.455 cv
223.876 209.433 223.956 209.413 224.036 209.392 cv
224.156 209.36 224.275 209.329 224.396 209.299 cv
224.518 209.269 224.641 209.24 224.764 209.211 cv
224.848 209.191 224.932 209.17 225.016 209.151 cv
225.172 209.116 225.329 209.083 225.485 209.05 cv
225.537 209.039 225.587 209.027 225.639 209.017 cv
225.84 208.976 226.041 208.937 226.242 208.899 cv
226.48 208.855 226.694 208.818 226.907 208.784 cv
239.158 206.788 250.018 212.448 251.927 214.127 cv
254.088 216.028 260.595 227.633 261.139 234.836 cv
261.682 242.04 261.171 267.832 261.171 267.832 cv
261.171 267.832 270.202 267.184 278.573 266.058 cv
276.244 252.295 li
275.822 249.805 li
cp
.407843 0 0 rgb
f
234.63 198.375 mo
233.036 198.358 231.244 198.512 229.297 198.809 cv
209.978 201.755 175.332 218.85 165.659 223.612 cv
155.011 228.855 104.491 258.303 104.491 258.303 cv
105.297 258.637 105.559 258.955 105.529 259.237 cv
106.143 259.09 107.006 258.882 108.087 258.621 cv
109.878 258.188 112.265 257.609 115.089 256.917 cv
134.222 252.227 173.475 242.351 184.256 237.68 cv
197.906 231.768 202.696 219.786 214.687 212.421 cv
215.367 212.004 216.068 211.6 216.798 211.214 cv
217.965 210.596 219.095 210.041 220.198 209.54 cv
231.929 204.217 240.507 205.272 256.975 206.951 cv
265.548 207.826 267.956 206.616 268.127 205.109 cv
268.315 203.449 265.791 201.427 265.791 201.427 cv
265.791 201.427 257.249 199.651 245.104 198.805 cv
241.84 198.577 238.318 198.417 234.63 198.375 cv
cp
.537255 .0117647 0 rgb
f
104.491 258.303 mo
103.778 258.007 102.64 257.698 100.899 257.391 cv
92.5513 255.916 53.5083 251.177 53.5083 251.177 cv
53.5083 251.177 52.4731 251.979 52.1841 252.432 cv
51.8955 252.885 71.2783 255.279 78.7974 256.712 cv
86.3164 258.144 103.768 260.365 103.768 260.365 cv
103.768 260.365 105.459 259.901 105.529 259.237 cv
105.559 258.955 105.297 258.637 104.491 258.303 cv
cp
.752941 .313726 .305882 rgb
f
349.659 212.797 mo
349.639 213.534 347.047 222.799 347.047 222.799 cv
347.047 222.799 347.336 222.334 347.824 221.529 cv
349.77 218.322 354.887 209.708 357.559 203.517 cv
358.501 201.333 359.224 199.412 359.767 197.743 cv
361.148 193.493 361.364 190.871 361.065 189.681 cv
360.648 188.024 358.578 186.217 352.039 186.041 cv
345.5 185.865 335.398 187.897 338.593 189.089 cv
338.593 189.089 347.991 189.158 348.701 190.191 cv
348.81 190.349 348.908 190.972 348.996 191.914 cv
349.485 197.13 349.676 212.173 349.659 212.797 cv
cp
0 0 0 rgb
f
333.305 245.075 mo
333.305 245.075 345.381 244.848 341.385 247.874 cv
339.723 249.133 336.164 251.357 332.574 253.529 cv
336.325 252.619 li
376.137 242.956 li
372.751 240.463 367.104 236.77 363.209 236.665 cv
357.314 236.506 333.305 245.075 333.305 245.075 cv
cp
f
305.506 161.685 mo
305.506 161.685 308.201 171.096 307.74 174.525 cv
307.279 177.954 306.6 180.393 300.369 183.543 cv
294.141 186.693 282.837 186.634 282.837 186.634 cv
282.847 181.719 274.806 160.857 274.806 160.857 cv
286.536 159.909 305.506 161.685 305.506 161.685 cv
cp
265.335 175.798 mo
265.461 171.483 265.58 165.771 265.58 165.771 cv
265.58 165.771 266.018 163.202 267.57 162.567 cv
269.125 161.932 272.471 160.917 272.471 160.917 cv
272.471 160.917 275.485 169.846 276.573 172.824 cv
277.66 175.803 279.39 186.849 279.39 186.849 cv
279.39 186.849 279.059 186.875 278.505 186.909 cv
277.974 188.922 274.46 188.975 274.46 188.975 cv
274.46 188.975 264.571 189.039 256.003 189.467 cv
255.391 192.777 li
255.391 192.777 273.113 191.78 285.82 189.91 cv
298.528 188.041 306.632 183.711 307.79 181.776 cv
308.948 179.842 309.45 170.392 308.783 167.793 cv
308.115 165.195 307.756 160.271 303.106 159.53 cv
298.456 158.791 279.798 158.043 274.985 158.772 cv
270.173 159.503 261 162.451 261 162.451 cv
258.629 175.271 li
261.289 175.341 263.478 175.504 265.335 175.798 cv
cp
.00784314 .00784314 .00784314 rgb
f
221.816 154.532 mo
217.667 154.651 214.631 154.812 214.631 154.812 cv
215.386 154.833 217.948 154.71 221.816 154.532 cv
cp
f
248.254 188.116 mo
241.345 193.8 li
249.16 193.653 li
249.411 193.453 li
254.29 189.556 li
251.31 189.688 249.409 189.105 248.254 188.116 cv
cp
.211765 .0235294 .0117647 rgb
f
261.861 181.379 mo
269.033 181.573 274.829 182.43 274.806 183.295 cv
274.782 184.16 268.949 184.704 261.777 184.511 cv
254.605 184.317 248.811 183.46 248.833 182.595 cv
248.856 181.73 254.689 181.186 261.861 181.379 cv
cp
254.29 189.556 mo
254.372 189.552 254.453 189.549 254.537 189.544 cv
255.02 189.517 255.509 189.492 256.003 189.467 cv
264.571 189.039 274.46 188.975 274.46 188.975 cv
274.46 188.975 277.974 188.922 278.505 186.909 cv
278.737 186.03 278.402 184.778 276.956 182.992 cv
273.509 178.734 270.903 176.679 265.335 175.798 cv
263.478 175.504 261.289 175.341 258.629 175.271 cv
258.263 175.261 257.888 175.253 257.503 175.247 cv
257.503 175.247 248.755 176.117 247.414 180.259 cv
247.003 181.528 246.682 182.939 246.688 184.271 cv
246.693 185.751 247.106 187.134 248.254 188.116 cv
249.409 189.105 251.31 189.688 254.29 189.556 cv
cp
.537255 .0117647 0 rgb
f
261.777 184.511 mo
268.949 184.704 274.782 184.16 274.806 183.295 cv
274.829 182.43 269.033 181.573 261.861 181.379 cv
254.689 181.186 248.856 181.73 248.833 182.595 cv
248.811 183.46 254.605 184.317 261.777 184.511 cv
cp
.666667 .0745098 .0745098 rgb
f
248.13 272.068 mo
247.96 272.374 247.786 272.675 247.609 272.973 cv
247.554 273.066 247.497 273.157 247.441 273.25 cv
247.318 273.454 247.194 273.658 247.067 273.858 cv
247 273.966 246.932 274.072 246.863 274.179 cv
246.745 274.362 246.626 274.545 246.505 274.726 cv
246.432 274.835 246.358 274.944 246.284 275.053 cv
246.165 275.228 246.044 275.401 245.922 275.573 cv
245.847 275.681 245.771 275.789 245.693 275.896 cv
245.57 276.066 245.444 276.235 245.318 276.403 cv
245.241 276.506 245.165 276.61 245.088 276.712 cv
244.955 276.886 244.819 277.057 244.685 277.227 cv
244.526 277.427 244.366 277.624 244.205 277.82 cv
244.102 277.944 243.999 278.071 243.895 278.194 cv
243.638 278.498 243.386 278.787 243.131 279.069 cv
238.666 284.003 233.283 287.219 228.241 288.071 cv
211.945 290.826 202.489 272.355 202.988 253.842 cv
203.014 252.879 203.08 251.926 203.183 250.984 cv
203.298 249.92 203.459 248.874 203.666 247.844 cv
206.177 235.298 215.128 225.382 223.859 222.143 cv
223.997 222.091 224.135 222.042 224.273 221.994 cv
224.325 221.976 224.375 221.96 224.427 221.942 cv
224.516 221.913 224.605 221.882 224.694 221.854 cv
224.743 221.838 224.792 221.823 224.841 221.808 cv
224.939 221.777 225.037 221.747 225.135 221.718 cv
225.165 221.709 225.194 221.701 225.224 221.692 cv
225.719 221.548 226.212 221.426 226.702 221.328 cv
226.734 221.321 226.767 221.315 226.8 221.309 cv
226.94 221.281 227.082 221.255 227.224 221.231 cv
227.26 221.225 227.297 221.219 227.334 221.213 cv
227.495 221.187 227.656 221.163 227.817 221.142 cv
227.859 221.137 227.901 221.132 227.944 221.127 cv
228.07 221.111 228.196 221.098 228.322 221.085 cv
228.369 221.081 228.417 221.076 228.465 221.072 cv
228.624 221.059 228.782 221.047 228.94 221.038 cv
228.969 221.037 228.997 221.036 229.025 221.035 cv
229.162 221.028 229.298 221.024 229.434 221.021 cv
229.479 221.021 229.522 221.02 229.566 221.019 cv
229.728 221.018 229.888 221.018 230.048 221.022 cv
230.661 221.039 231.275 221.094 231.89 221.187 cv
238.232 222.145 244.539 227.081 248.613 234.492 cv
249.856 236.749 250.89 239.235 251.656 241.911 cv
252.699 245.556 253.242 249.548 253.128 253.779 cv
252.943 260.639 251.035 266.858 248.13 272.068 cv
cp
225.857 212.368 mo
221.22 212.243 216.755 213.638 212.635 216.147 cv
199.579 224.096 190.001 243.257 189.525 260.913 cv
189.421 264.802 189.766 268.369 190.501 271.618 cv
190.731 272.637 190.998 273.624 191.303 274.579 cv
192.092 277.048 193.127 279.307 194.377 281.358 cv
200.32 291.115 211.13 296.15 223.59 296.485 cv
239.075 296.903 252.534 285.171 257.598 268.545 cv
258.855 264.417 259.597 259.989 259.721 255.37 cv
260.347 232.142 245.186 212.889 225.857 212.368 cv
cp
.0156863 .0156863 .0156863 rgb
f
243.887 278.204 mo
243.638 278.498 243.386 278.786 243.131 279.069 cv
243.386 278.787 243.638 278.498 243.887 278.204 cv
cp
.784314 .803922 .788235 rgb
f
224.841 221.808 mo
224.939 221.777 225.037 221.747 225.135 221.718 cv
225.037 221.747 224.939 221.777 224.841 221.808 cv
cp
f
224.427 221.942 mo
224.516 221.913 224.605 221.882 224.694 221.854 cv
224.605 221.882 224.516 221.913 224.427 221.942 cv
cp
f
250.185 253.572 mo
250.023 259.558 248.503 265.022 246.155 269.69 cv
242.523 265.318 li
237.02 258.69 li
237.02 258.69 235.178 256.368 238.564 253.816 cv
239.843 252.854 242.337 250.62 244.946 248.212 cv
246.42 246.852 247.931 245.437 249.28 244.162 cv
249.944 247.102 250.273 250.259 250.185 253.572 cv
cp
243.112 274.892 mo
241.549 274.758 233.644 265.42 233.644 265.42 cv
233.644 265.42 233.026 264.39 233.707 263.071 cv
234.388 261.754 236.073 260.518 236.745 261.494 cv
244.106 272.199 li
244.106 272.199 244.676 275.026 243.112 274.892 cv
cp
233.058 268.354 mo
231.992 266.851 229.783 265.039 229.268 265.349 cv
228.753 265.657 227.981 267.103 227.525 267.693 cv
227.069 268.284 221.943 277.225 221.943 277.225 cv
221.943 277.225 221.366 276.43 222.39 274.336 cv
223.414 272.241 225.394 267.18 225.394 267.18 cv
224.621 268.495 218.003 283.201 217.586 283.282 cv
217.169 283.363 215.143 283.309 215.992 280.889 cv
216.84 278.47 221.319 266.194 221.319 266.194 cv
221.319 266.194 222.442 263.828 223.761 264.509 cv
224.646 264.966 225.425 265.42 225.609 266.067 cv
225.668 265.499 225.635 264.879 225.278 264.642 cv
224.553 264.161 223.676 262.524 224.918 262.604 cv
224.918 262.604 228.94 262.351 230.31 261.144 cv
231.679 259.936 233.126 257.587 233.388 256.441 cv
233.648 255.297 236.163 258.299 237.064 259.476 cv
237.966 260.651 241.472 264.525 241.747 265.132 cv
242.022 265.738 240.314 265.231 238.938 263.627 cv
237.561 262.023 236.32 260.151 235.394 260.354 cv
234.466 260.558 232.828 261.481 232.479 262.485 cv
232.129 263.49 231.37 264.299 232.216 265.382 cv
233.063 266.464 234.047 267.551 234.808 268.4 cv
235.568 269.251 234.123 269.857 233.058 268.354 cv
cp
217.294 284.129 mo
217.365 284.168 217.436 284.208 217.507 284.246 cv
217.436 284.208 217.365 284.168 217.294 284.129 cv
cp
217.717 284.354 mo
217.78 284.387 217.842 284.419 217.905 284.451 cv
217.842 284.42 217.78 284.387 217.717 284.354 cv
cp
216.895 283.901 mo
216.968 283.944 217.041 283.987 217.114 284.029 cv
217.041 283.987 216.968 283.944 216.895 283.901 cv
cp
216.506 283.664 mo
216.579 283.71 216.652 283.756 216.726 283.801 cv
216.652 283.756 216.579 283.71 216.506 283.664 cv
cp
216.123 283.415 mo
216.196 283.464 216.269 283.513 216.343 283.561 cv
216.269 283.513 216.196 283.464 216.123 283.415 cv
cp
215.747 283.156 mo
215.819 283.208 215.893 283.26 215.966 283.31 cv
215.893 283.26 215.819 283.208 215.747 283.156 cv
cp
215.376 282.886 mo
215.449 282.94 215.522 282.995 215.595 283.048 cv
215.522 282.995 215.449 282.94 215.376 282.886 cv
cp
215.011 282.604 mo
215.083 282.662 215.157 282.72 215.23 282.776 cv
215.157 282.72 215.083 282.662 215.011 282.604 cv
cp
213.034 282.93 mo
211.788 281.283 210.425 278.85 210.249 278.522 cv
210.142 278.323 210.411 278.22 210.947 278.261 cv
206.668 272.254 204.376 263.478 204.452 254.593 cv
204.453 254.325 204.458 254.059 204.464 253.789 cv
205.982 254.21 208.076 254.801 209.481 255.237 cv
211.918 255.994 217.8 258.265 218.061 258.825 cv
218.303 259.343 216.188 274.166 213.686 278.983 cv
213.926 278.866 214.154 278.428 214.566 277.349 cv
215.508 274.886 219.471 261.237 219.624 260.699 cv
219.776 260.161 220.311 259.665 221.096 260.151 cv
221.306 260.281 224.01 262.073 223.571 262.982 cv
223.132 263.893 222.089 263.275 221.645 264.341 cv
221.202 265.407 216.492 277.723 216.492 277.723 cv
216.492 277.723 214.839 282.472 214.96 282.566 cv
215.081 282.661 216.82 284.368 216.99 284.879 cv
217.161 285.391 214.28 284.576 213.034 282.93 cv
cp
204.54 252.229 mo
204.655 250.26 204.961 248.347 205.428 246.511 cv
204.98 248.355 204.677 250.267 204.54 252.229 cv
cp
212.954 249.962 mo
212.954 249.962 213.052 249.991 213.198 250.051 cv
213.642 250.234 214.524 250.707 214.387 251.537 cv
214.203 252.638 214.58 254.614 211.676 254.075 cv
208.772 253.536 204.767 251.677 204.767 251.677 cv
204.767 251.677 204.648 249.247 206.158 249.072 cv
207.668 248.898 212.954 249.962 212.954 249.962 cv
cp
220.671 256.038 mo
220.651 256.775 220.199 258.146 219.327 258.029 cv
218.454 257.914 216.657 256.839 214.647 256.186 cv
212.637 255.532 204.827 253.998 204.983 253.327 cv
205.14 252.655 207 253.211 207 253.211 cv
207 253.211 212.332 254.247 213.43 254.553 cv
214.527 254.858 214.273 254.022 214.664 253.203 cv
215.055 252.385 215.148 252.341 215.778 251.206 cv
216.408 250.07 217.116 251.149 218.725 251.285 cv
220.334 251.421 220.273 251.973 220.765 252.538 cv
221.257 253.104 220.69 255.302 220.671 256.038 cv
cp
206.624 247.764 mo
206.912 247.312 210.671 246.89 212.356 247.059 cv
214.042 247.227 220.58 247.266 221.469 246.29 cv
223.494 244.071 224.071 245.562 224.207 246.241 cv
224.342 246.921 223.747 247.335 222.817 247.633 cv
221.888 247.932 219.295 248.382 217.541 248.488 cv
215.787 248.595 212.376 248.626 209.52 248.579 cv
206.664 248.533 206.334 248.217 206.624 247.764 cv
cp
229.413 223.568 mo
229.763 235.838 li
228.536 238.616 226.567 236.428 226.567 236.428 cv
226.566 223.663 li
227.637 221.571 229.413 223.568 229.413 223.568 cv
cp
230.843 241.356 mo
231.043 242.102 231.013 242.896 230.718 243.61 cv
230.646 243.782 230.571 243.91 230.5 243.945 cv
230.213 244.085 229.224 243.995 228.106 244.041 cv
226.99 244.086 226.655 243.12 226.727 240.736 cv
226.799 238.353 228.222 237.433 229.441 238.53 cv
230.291 239.295 230.616 240.512 230.843 241.356 cv
cp
230.465 226.317 mo
230.928 225.882 230.949 226.33 230.949 226.33 cv
230.949 226.33 230.981 234.258 231.129 235.613 cv
231.276 236.969 230.25 236.327 230.229 235.098 cv
230.207 233.868 230 229.623 229.794 228.143 cv
229.588 226.662 230.465 226.317 230.465 226.317 cv
cp
228.679 247.181 mo
231.147 247.248 233.066 250.38 232.964 254.178 cv
232.861 257.976 230.777 261 228.309 260.934 cv
225.84 260.867 223.921 257.734 224.024 253.937 cv
224.126 250.14 226.21 247.114 228.679 247.181 cv
cp
246.243 235.802 mo
244.919 236.533 243.461 237.338 242.048 238.116 cv
238.489 240.077 235.215 241.875 235.075 241.925 cv
234.766 242.04 232.467 242.961 231.962 238.892 cv
231.723 236.964 231.719 231.947 231.78 227.204 cv
231.798 225.828 231.821 224.474 231.846 223.226 cv
237.368 224.486 242.752 229.092 246.243 235.802 cv
cp
236.87 243.156 mo
238.609 241.913 247.122 237.258 247.122 237.258 cv
248.081 236.73 248.295 238.165 248.295 238.165 cv
248.295 238.165 241.836 243.014 238.357 244.395 cv
234.879 245.775 235.132 244.4 236.87 243.156 cv
cp
246.204 246.22 mo
246.204 246.22 238.787 252.409 237.782 253.2 cv
236.778 253.99 236.395 252.283 237.834 251.278 cv
239.274 250.272 246.856 244.822 246.856 244.822 cv
248.604 243.566 246.204 246.22 246.204 246.22 cv
cp
249.733 241.245 mo
248.32 244.064 240.357 248.873 240.357 248.873 cv
240.357 248.873 239.334 249.214 238.161 248.261 cv
236.989 247.308 237.416 245.752 237.915 245.443 cv
247.897 239.26 li
247.897 239.26 251.146 238.426 249.733 241.245 cv
cp
251.656 241.911 mo
250.89 239.235 249.856 236.749 248.613 234.492 cv
244.539 227.081 238.232 222.145 231.89 221.187 cv
231.275 221.094 230.661 221.039 230.048 221.022 cv
229.888 221.018 229.728 221.018 229.566 221.019 cv
229.522 221.02 229.479 221.021 229.434 221.021 cv
229.298 221.024 229.162 221.028 229.025 221.035 cv
228.997 221.036 228.969 221.037 228.94 221.038 cv
228.782 221.047 228.624 221.059 228.465 221.072 cv
228.417 221.076 228.369 221.081 228.322 221.085 cv
228.196 221.098 228.07 221.111 227.944 221.127 cv
227.901 221.132 227.859 221.137 227.817 221.142 cv
227.656 221.163 227.495 221.187 227.334 221.213 cv
227.297 221.219 227.26 221.225 227.224 221.231 cv
227.082 221.255 226.94 221.281 226.8 221.309 cv
226.767 221.315 226.734 221.321 226.702 221.328 cv
226.212 221.426 225.719 221.548 225.224 221.692 cv
225.353 221.655 225.48 221.619 225.608 221.585 cv
225.608 221.585 225.102 243.881 222.64 244.607 cv
222.355 244.691 222.07 244.749 221.787 244.781 cv
221.182 245.567 219.718 246.735 216.393 246.646 cv
212.975 246.554 208.181 246.309 205.518 246.163 cv
208.315 235.106 216.255 226.519 223.91 223.79 cv
223.859 222.143 li
215.128 225.382 206.177 235.298 203.666 247.844 cv
203.459 248.874 203.298 249.92 203.183 250.984 cv
203.08 251.926 203.014 252.879 202.988 253.842 cv
202.489 272.355 211.945 290.826 228.241 288.071 cv
233.283 287.219 238.666 284.003 243.131 279.069 cv
241.07 277.265 li
236.993 281.908 232.074 284.936 227.469 285.738 cv
224.08 286.331 221.015 285.887 218.309 284.644 cv
220.074 281.629 li
228.881 266.582 li
228.881 266.582 229.278 265.518 230.785 266.634 cv
232.128 267.628 241.813 276.322 243.895 278.194 cv
243.999 278.071 244.102 277.944 244.205 277.82 cv
244.366 277.624 244.526 277.427 244.685 277.227 cv
244.819 277.057 244.955 276.886 245.088 276.712 cv
245.165 276.61 245.241 276.506 245.318 276.403 cv
245.444 276.235 245.57 276.066 245.693 275.896 cv
245.771 275.789 245.847 275.681 245.922 275.573 cv
246.044 275.401 246.165 275.228 246.284 275.053 cv
246.358 274.944 246.432 274.835 246.505 274.726 cv
246.626 274.545 246.745 274.362 246.863 274.179 cv
246.932 274.072 247 273.966 247.067 273.858 cv
247.194 273.658 247.318 273.454 247.441 273.25 cv
247.497 273.157 247.554 273.066 247.609 272.973 cv
247.786 272.675 247.96 272.374 248.13 272.068 cv
251.035 266.858 252.943 260.639 253.128 253.779 cv
253.242 249.548 252.699 245.556 251.656 241.911 cv
cp
f
223.859 222.143 mo
223.997 222.091 224.135 222.042 224.273 221.994 cv
224.135 222.042 223.997 222.091 223.859 222.143 cv
cp
f
216.895 283.901 mo
216.968 283.944 217.041 283.987 217.114 284.029 cv
217.041 283.987 216.968 283.944 216.895 283.901 cv
cp
.207843 .262745 .235294 rgb
f
216.726 283.801 mo
216.652 283.756 216.579 283.71 216.506 283.664 cv
216.579 283.71 216.652 283.756 216.726 283.801 cv
cp
f
216.343 283.561 mo
216.269 283.513 216.196 283.464 216.123 283.415 cv
216.196 283.464 216.269 283.513 216.343 283.561 cv
cp
f
215.23 282.776 mo
215.157 282.72 215.083 282.662 215.011 282.604 cv
215.083 282.662 215.157 282.72 215.23 282.776 cv
cp
f
212.613 278.648 mo
212.664 278.391 212.717 278.126 212.77 277.855 cv
207.482 272.872 204.537 263.849 204.483 254.607 cv
204.376 263.478 206.668 272.254 210.947 278.261 cv
211.29 278.288 211.742 278.373 212.277 278.531 cv
212.4 278.567 212.511 278.607 212.613 278.648 cv
cp
f
217.905 284.451 mo
217.842 284.419 217.78 284.387 217.717 284.354 cv
217.78 284.387 217.842 284.42 217.905 284.451 cv
cp
f
215.966 283.31 mo
215.893 283.26 215.819 283.208 215.747 283.156 cv
215.819 283.208 215.893 283.26 215.966 283.31 cv
cp
f
215.595 283.048 mo
215.522 282.995 215.449 282.94 215.376 282.886 cv
215.449 282.94 215.522 282.995 215.595 283.048 cv
cp
f
217.507 284.246 mo
217.436 284.208 217.365 284.168 217.294 284.129 cv
217.365 284.168 217.436 284.208 217.507 284.246 cv
cp
f
235.968 279.492 mo
234.599 280.304 233.236 281.127 231.86 281.927 cv
230.765 282.564 229.645 283.261 228.413 283.641 cv
227.048 284.063 225.616 283.967 224.207 283.923 cv
222.804 283.879 221.402 283.831 220 283.793 cv
219.631 283.783 219.73 282.318 220.498 282.332 cv
221.206 282.344 227.346 282.517 229.598 281.041 cv
231.85 279.565 234.926 277.129 236.038 276.913 cv
237.149 276.697 237.654 278.493 235.968 279.492 cv
cp
224.958 281.594 mo
223.233 281.894 221.604 281.891 220.074 281.629 cv
218.309 284.644 li
221.015 285.887 224.08 286.331 227.469 285.738 cv
232.074 284.936 236.993 281.908 241.07 277.265 cv
237.222 273.892 li
233.563 278.116 229.118 280.87 224.958 281.594 cv
cp
f
223.786 226.118 mo
223.932 224.482 li
223.91 223.79 li
216.255 226.519 208.315 235.106 205.512 246.162 cv
208.343 235.571 216.493 227.605 223.786 226.118 cv
cp
f
247.914 258.682 mo
247.54 261.706 245.774 266.834 245.395 267.254 cv
245.014 267.674 243.892 264.972 244.752 263.734 cv
245.612 262.497 246.598 249.959 246.598 249.959 cv
246.831 247.249 248.378 250.008 248.749 251.062 cv
249.12 252.116 248.287 255.658 247.914 258.682 cv
cp
244.946 248.212 mo
245.128 249.784 245.204 251.411 245.159 253.082 cv
245.039 257.533 244.066 261.66 242.523 265.318 cv
246.155 269.69 li
248.503 265.022 250.023 259.558 250.185 253.572 cv
250.273 250.259 249.944 247.102 249.28 244.162 cv
247.931 245.437 246.42 246.852 244.946 248.212 cv
cp
f
242.048 238.116 mo
243.461 237.338 244.919 236.533 246.243 235.802 cv
242.752 229.092 237.368 224.486 231.846 223.226 cv
231.821 224.474 231.798 225.828 231.78 227.204 cv
235.823 229.114 239.556 232.97 242.048 238.116 cv
cp
f
205.428 246.511 mo
204.961 248.347 204.655 250.26 204.54 252.229 cv
204.677 250.267 204.98 248.355 205.428 246.511 cv
cp
.0666667 .0666667 .0666667 rgb
f
212.77 277.855 mo
212.717 278.126 212.664 278.391 212.613 278.648 cv
212.518 279.135 212.427 279.6 212.343 280.039 cv
212.432 280.143 212.522 280.244 212.615 280.345 cv
212.748 280.278 212.898 280.149 213.068 279.949 cv
213.276 279.703 213.482 279.376 213.686 278.983 cv
216.188 274.166 218.303 259.343 218.061 258.825 cv
217.8 258.265 211.918 255.994 209.481 255.237 cv
208.076 254.801 205.982 254.21 204.464 253.789 cv
204.458 254.059 204.453 254.325 204.452 254.593 cv
204.537 263.849 207.482 272.872 212.77 277.855 cv
cp
f
244.946 248.212 mo
242.337 250.62 239.843 252.854 238.564 253.816 cv
235.178 256.368 237.02 258.69 237.02 258.69 cv
242.523 265.318 li
244.066 261.66 245.039 257.533 245.159 253.082 cv
245.204 251.411 245.128 249.784 244.946 248.212 cv
cp
f
231.78 227.204 mo
231.719 231.947 231.723 236.964 231.962 238.892 cv
232.467 242.961 234.766 242.04 235.075 241.925 cv
235.215 241.875 238.489 240.077 242.048 238.116 cv
239.556 232.97 235.823 229.114 231.78 227.204 cv
cp
f
226.566 223.663 mo
226.567 236.428 li
226.567 236.428 228.536 238.616 229.763 235.838 cv
229.413 223.568 li
229.413 223.568 227.637 221.571 226.566 223.663 cv
cp
.0431373 .0862745 .0705882 rgb
f
237.915 245.443 mo
237.416 245.752 236.989 247.308 238.161 248.261 cv
239.334 249.214 240.357 248.873 240.357 248.873 cv
240.357 248.873 248.32 244.064 249.733 241.245 cv
251.146 238.426 247.897 239.26 247.897 239.26 cv
237.915 245.443 li
cp
f
244.106 272.199 mo
236.745 261.494 li
236.073 260.518 234.388 261.754 233.707 263.071 cv
233.026 264.39 233.644 265.42 233.644 265.42 cv
233.644 265.42 241.549 274.758 243.112 274.892 cv
244.676 275.026 244.106 272.199 244.106 272.199 cv
cp
f
223.761 264.509 mo
222.442 263.828 221.319 266.194 221.319 266.194 cv
221.319 266.194 216.84 278.47 215.992 280.889 cv
215.143 283.309 217.169 283.363 217.586 283.282 cv
218.003 283.201 224.621 268.495 225.394 267.18 cv
225.394 267.18 225.55 266.651 225.609 266.067 cv
225.425 265.42 224.646 264.966 223.761 264.509 cv
cp
f
204.767 251.677 mo
204.767 251.677 208.772 253.536 211.676 254.075 cv
214.58 254.614 214.203 252.638 214.387 251.537 cv
214.524 250.707 213.642 250.234 213.198 250.051 cv
213.052 249.991 212.954 249.962 212.954 249.962 cv
212.954 249.962 207.668 248.898 206.158 249.072 cv
204.648 249.247 204.767 251.677 204.767 251.677 cv
cp
f
248.295 238.165 mo
248.295 238.165 248.081 236.73 247.122 237.258 cv
247.122 237.258 238.609 241.913 236.87 243.156 cv
235.132 244.4 234.879 245.775 238.357 244.395 cv
241.836 243.014 248.295 238.165 248.295 238.165 cv
cp
.898039 .917647 .905882 rgb
f
229.441 238.53 mo
228.222 237.433 226.799 238.353 226.727 240.736 cv
226.655 243.12 226.99 244.086 228.106 244.041 cv
229.224 243.995 230.213 244.085 230.5 243.945 cv
230.571 243.91 230.646 243.782 230.718 243.61 cv
231.013 242.896 231.043 242.102 230.843 241.356 cv
230.616 240.512 230.291 239.295 229.441 238.53 cv
cp
f
230.229 235.098 mo
230.25 236.327 231.276 236.969 231.129 235.613 cv
230.981 234.258 230.949 226.33 230.949 226.33 cv
230.949 226.33 230.928 225.882 230.465 226.317 cv
230.465 226.317 229.588 226.662 229.794 228.143 cv
230 229.623 230.207 233.868 230.229 235.098 cv
cp
f
246.856 244.822 mo
246.856 244.822 239.274 250.272 237.834 251.278 cv
236.395 252.283 236.778 253.99 237.782 253.2 cv
238.787 252.409 246.204 246.22 246.204 246.22 cv
246.204 246.22 248.604 243.566 246.856 244.822 cv
cp
.745098 .803922 .776471 rgb
f
209.52 248.579 mo
212.376 248.626 215.787 248.595 217.541 248.488 cv
219.295 248.382 221.888 247.932 222.817 247.633 cv
223.747 247.335 224.342 246.921 224.207 246.241 cv
224.071 245.562 223.494 244.071 221.469 246.29 cv
220.58 247.266 214.042 247.227 212.356 247.059 cv
210.671 246.89 206.912 247.312 206.624 247.764 cv
206.334 248.217 206.664 248.533 209.52 248.579 cv
cp
f
218.725 251.285 mo
217.116 251.149 216.408 250.07 215.778 251.206 cv
215.148 252.341 215.055 252.385 214.664 253.203 cv
214.273 254.022 214.527 254.858 213.43 254.553 cv
212.332 254.247 207 253.211 207 253.211 cv
207 253.211 205.14 252.655 204.983 253.327 cv
204.827 253.998 212.637 255.532 214.647 256.186 cv
216.657 256.839 218.454 257.914 219.327 258.029 cv
220.199 258.146 220.651 256.775 220.671 256.038 cv
220.69 255.302 221.257 253.104 220.765 252.538 cv
220.273 251.973 220.334 251.421 218.725 251.285 cv
cp
.898039 .917647 .905882 rgb
f
214.96 282.566 mo
214.839 282.472 216.492 277.723 216.492 277.723 cv
216.492 277.723 221.202 265.407 221.645 264.341 cv
222.089 263.275 223.132 263.893 223.571 262.982 cv
224.01 262.073 221.306 260.281 221.096 260.151 cv
220.311 259.665 219.776 260.161 219.624 260.699 cv
219.471 261.237 215.508 274.886 214.566 277.349 cv
214.154 278.428 213.926 278.866 213.686 278.983 cv
213.482 279.376 213.276 279.703 213.068 279.949 cv
212.898 280.149 212.748 280.278 212.615 280.345 cv
212.522 280.244 212.432 280.143 212.343 280.039 cv
212.427 279.6 212.518 279.135 212.613 278.648 cv
212.511 278.607 212.4 278.567 212.277 278.531 cv
211.742 278.373 211.29 278.288 210.947 278.261 cv
210.411 278.22 210.142 278.323 210.249 278.522 cv
210.425 278.85 211.788 281.283 213.034 282.93 cv
214.28 284.576 217.161 285.391 216.99 284.879 cv
216.82 284.368 215.081 282.661 214.96 282.566 cv
cp
f
232.216 265.382 mo
231.37 264.299 232.129 263.49 232.479 262.485 cv
232.828 261.481 234.466 260.558 235.394 260.354 cv
236.32 260.151 237.561 262.023 238.938 263.627 cv
240.314 265.231 242.022 265.738 241.747 265.132 cv
241.472 264.525 237.966 260.651 237.064 259.476 cv
236.163 258.299 233.648 255.297 233.388 256.441 cv
233.126 257.587 231.679 259.936 230.31 261.144 cv
228.94 262.351 224.918 262.604 224.918 262.604 cv
223.676 262.524 224.553 264.161 225.278 264.642 cv
225.635 264.879 225.668 265.499 225.609 266.067 cv
225.55 266.651 225.394 267.18 225.394 267.18 cv
225.394 267.18 223.414 272.241 222.39 274.336 cv
221.366 276.43 221.943 277.225 221.943 277.225 cv
221.943 277.225 227.069 268.284 227.525 267.693 cv
227.981 267.103 228.753 265.657 229.268 265.349 cv
229.783 265.039 231.992 266.851 233.058 268.354 cv
234.123 269.857 235.568 269.251 234.808 268.4 cv
234.047 267.551 233.063 266.464 232.216 265.382 cv
cp
f
236.038 276.913 mo
234.926 277.129 231.85 279.565 229.598 281.041 cv
227.346 282.517 221.206 282.344 220.498 282.332 cv
219.73 282.318 219.631 283.783 220 283.793 cv
221.402 283.831 222.804 283.879 224.207 283.923 cv
225.616 283.967 227.048 284.063 228.413 283.641 cv
229.645 283.261 230.765 282.564 231.86 281.927 cv
233.236 281.127 234.599 280.304 235.968 279.492 cv
237.654 278.493 237.149 276.697 236.038 276.913 cv
cp
.745098 .803922 .776471 rgb
f
246.598 249.959 mo
246.598 249.959 245.612 262.497 244.752 263.734 cv
243.892 264.972 245.014 267.674 245.395 267.254 cv
245.774 266.834 247.54 261.706 247.914 258.682 cv
248.287 255.658 249.12 252.116 248.749 251.062 cv
248.378 250.008 246.831 247.249 246.598 249.959 cv
cp
f
223.932 224.482 mo
223.786 226.118 li
216.493 227.605 208.343 235.571 205.518 246.163 cv
208.181 246.309 212.975 246.554 216.393 246.646 cv
219.718 246.735 221.182 245.567 221.787 244.781 cv
222.07 244.749 222.355 244.691 222.64 244.607 cv
225.102 243.881 225.608 221.585 225.608 221.585 cv
225.48 221.619 225.353 221.655 225.224 221.692 cv
225.194 221.701 225.165 221.709 225.135 221.718 cv
225.037 221.747 224.939 221.777 224.841 221.808 cv
224.792 221.823 224.743 221.838 224.694 221.854 cv
224.605 221.882 224.516 221.913 224.427 221.942 cv
224.375 221.96 224.325 221.976 224.273 221.994 cv
224.135 222.042 223.997 222.091 223.859 222.143 cv
223.91 223.79 li
223.932 224.482 li
cp
.0666667 .0666667 .0666667 rgb
f
230.785 266.634 mo
229.278 265.518 228.881 266.582 228.881 266.582 cv
220.074 281.629 li
221.604 281.891 223.233 281.894 224.958 281.594 cv
229.118 280.87 233.563 278.116 237.222 273.892 cv
241.07 277.265 li
243.131 279.069 li
243.386 278.786 243.638 278.498 243.887 278.204 cv
241.813 276.322 232.128 267.628 230.785 266.634 cv
cp
f
228.309 260.934 mo
230.777 261 232.861 257.976 232.964 254.178 cv
233.066 250.38 231.147 247.248 228.679 247.181 cv
226.21 247.114 224.126 250.14 224.024 253.937 cv
223.921 257.734 225.84 260.867 228.309 260.934 cv
cp
.2 .2 .2 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 21.1.0
%%For: (Alexander Sementsov) ()
%%Title: (cars4.eps)
%%CreationDate: 3/15/2019 3:42 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB3XXnfC8\5^97&L^tum!!Z#Mb77G%!!sFFE+D(#JpP7q@^MD(>&=UU[T5tA]gfoHRR[M^LA25\ha/j0RBK"!fld(ZRnHB&X
%n_l.ma+'DA&'YKWr@ULT.WjuGUQ]Cp"f'n6>;`J3%f,,!oS2g&0>eO\GAG]Cek]YSVAH8Z-^k[?27$n.<i`BIHr?%LNVkTsI+a6\
%0EAg7mIG=u%S^*$dfC_%CbkIu6-MJ<,)6-KmOsO)g$Z6>NbL?lf+Bj.P3C7qUT)]M0NcE:_S7t<kXua=]j'gL3IQ<(GhZBqi=MKm
%ZR3,f8M:As@`^jSr^T2X9!?),(LZc_+)LQi^?9mV:S@;i1'sJ'UAtpI)D6)S#BjVZCfquR+pW0Y]iifG"q_TjM*]N*TRY`=*+4j/
%!=[%S:m-2,8J$NSj:aQEO]Cq8%GM]*n\[24L4"c2?8Pio1o%0Jf),tTZW4n\^?F.,en)bc!8H^&.M]mY<A\GUB"trYdtqaD<0C<%
%,,_om7L+%_Wc_/K+eQV2f1rsN[/S66X^g`icC.3IB3c*;"1%:RA0/_-8to*Ib,Ch@_8gSj97G0BfH!%8_oaBr%-ZVPb:K-B:k4g^
%Pp.U0qK^FCMgb8_K`6Hf6Vqe$Wm7f-.M1J$(_$^oQ@"Xa\5]"*Sn.4kEg:N*hp>).*2em*"VHZD_D`*R7gDF^70(I-l&5N*(i?e(
%^^ncOX!HZ)Wo@eVm^2OIroJF<b4BkCkNPu@,Md&m8O>+&_G?>J@$61NP,)g;TW3l'WerJ[r/g?HMI<HA@/(4=&M+tnY]q/"`oD:i
%*_.&A_lK4Q8Yitq+b6H;:)%E"1<#'p8ZuT)k;ppVGPm)$8/Jua(t.MB9<TL9pkgar'YY46*HofT8/K#"-R9%+E@As\3]%J'YCq(H
%K?Zq'c:W@S0gIE<%:9]:e$.)Z&j`+0RduWI$=@LK8j+JNU//%ho+U1*;)ock#JlKkI)VeX+=ZFEROpLHK4%6F,AG:=g)4VC=8[^S
%;E_fs)gQ8:<s1l/nWaHFWXEAj`;o(CFFbS'BTaT$MB_.FJl1Yj]V3hR!XS?22**N6gCYA.EIJH'$$:8'#pe=Ujn(=VLp%(RFWG1l
%I%d,$'k*1hkjE,p@nDo5F:P>8N]K6oj6.LLSuN3!$HG[Wfi%6:r$_$ub`mAUGt0OuI2%)4F69C<dfJZTqI:aG%@(ZdPs&[i*C:u8
%<0d@3:]!D$a*RW+jtNiS#?9.m)sD&]l/(#=a7B,UG'Mi0#3+^JPB?9"`'N!@fpS6<9Y7S]6[nO.m4)99LZ@Tpra5LH#kW3<0E$Ii
%U.CdMJ*E"Fe'J!-oLDdBB1;(0Y1Ptd.)".197LD*qRQWmr]p3GJi<<%d[t'5Id[645>:Odp@B\"I&6D1T:JdM0@IoJEC&(e>!/g4
%p([c'QT@n*Y&a$37?sh&s#^%CFI,tna9ZfQQD1INJ6ut6mt^r&[06+5l/9oo:2hu/E\^%2:6m"kOu5[a8XcF]Jttqp'$">r?Bc.h
%a'TgBcAr!2dh6+6Wo,QLLn"rCLXD@c4&+ZN*0+Mg#2`nu,-SfK%0"-^l*rF?6IDQ\!^:V>/V/NT4Q&hNQ:Z9UZ:mc!7)XV)G5gJ9
%,QZ;i"62Z?m%DT]Z=F5m\s?_m1*!,M)J,T]O8)Of&.418C4dNIMI!a5cJ4&ESR9;KUIgNYj;6o<.Wo=X?S-h[(q=J0!iXQC.;Rj_
%Pg#A"P+#j<:F81Hnu%(LaZkLY!e<Eh0ApK"Zm-pC^dLC"<1JX850\^B8%#%jK@1g,$#lDSd6?eJ'j:!,lhuDR'BB0k&.4#A3bf?\
%OG2\m$-m-u+5mE3Us\.@p*<':WO?@YUMOCZ^8R@UUetpV*/fGp_)Pt^90,,j;bj&,[Q:Z\;C>(3C"FbE"=9$_a\`Hi2P:cep8>i#
%GP@p7k4#_ecrZ$2=^nB^[<iT9F9c$6D2G8Fh+pr)B4<cn7"k&4&d2sT[`NKIiteRg.<,JUn)ILgr^1KA,'sFu"F2gkNhbg;;>@'+
%0CPS&ecSL/2"X>SBYm*qXJhp4gY)o-bR+Ej#"bW*33+;"*p^i1)ZCD'^8#_TPeo_1(b,a^gB']!@>U2BrfqYW8=X'#I?Dpf"\QC:
%)MjPn,+8t@gA8iL&:LG8YaE2q-k7F8dIF+/M+pGS_FU9Xi5in94/+Y$?gQ.7<HCu[$ZBKuLH7c0+:+!?fC2C.+/(dX0bmmL/`Ia8
%5g8abO:H!MO>*=ss.Z9sFUA-h5.I!EqPDg-FB!t!Hdo1:0X'Vhd5L:.D8[l%A%'(W,f2S^*DfOeG,9tuJ69DD+;*=u92a4")O!=+
%`?#*p7-ZZ<3=4@t&1/M]'-1WB+(:ld&/I_A\h'ireNZ+mYguZ1BPTNFC@E^l#^)2fOm[+D;EbX@bI3**#*;X5S-F=@ih2,<G=H)4
%MfGMAD*QC"`U44,P4I6G<GhU<QY!cYfk">*6/LS_W)#jS9*^CK*&q+?NIe/r'/M44XIMkBd5&O5KkO"h*A&,e4L*qF*G)TdKsfUU
%fVGGK?6Ru*N?pDgiK@mC(nPCh,$`\'?'s@nmF`M2@ABC"iBN$RW3<ds`O99MR2&$.iNVZ.XFVOO5u[.^@W(AbP<0500Q5C]RNORF
%6t(?Z!@6F>1&a3r+XZ6B-4p2/a+8jtpk?@\Sm_H(]9M^$%$KQPVRj_+cnI/iAb:J7(d"doBVIa3Mi6<B'a^<;=p)q[cc`rVjaaBO
%eT=&$MBPrT\`H--#;A^&XE-3>]/U_t"DcKkM@I[J6lN.\R*@ZnfA9lTd]"fp@?&A`'In;D=lH,I&/Wk[#.#nIN@I\>F"<:*Z!`*J
%-qu*@&6/3`:=J:G:>CB-:,sFe'djRInpa_SKWQtt=])@<P8)'<dprme1*WqD$"9Q<F3Zu4h*Oaq+e"Vs/qN\dV^oJC;KO[N5'980
%^$:/T7?J2QP!+F<0M'5e7nML*(quhq,mDdFS[g]aS-KC[UaT3--\Y3V;(D\[)qro"RrS`>W^`5cITf;/NII+=Kh3ou)]jg@'hM'H
%!%l[)BdlSuldR_NHcGl;F%/klBuhoblfB_?^&Zt<10>J1*G_Qa4km1E7m.jfM=lScUrjM\8;a)5lO,1+lE$.$YrO"dp(JPr*J'p#
%IF<(+j0($o3[0UQ=;hl]9L%"B&E47UNl1BJ[]:D.$7/29<;ZNTM'arbEABK`jLc[q#V%8LD<-l`"/f,`Q,kfEfg/6:,8TP]3^f'?
%0@#WUU2HI<fb;'S8a`:Tp/.`g)H!DIf4YG`2&9V+c\AeJa-4D`KJRg*^F(p1Wem[fcp7W*C='^D"$,?$YV+>OKU!G54>ug`hGtS1
%F[UeU8LGSP=\ZI@mV4S^Ts:37cEYGr\d6b\_hhB,,Y:mJ;CXX@njk5_pPm`%Qa2k^%_5,Be#82#(5BPi/p#Ba6>NK-O(7AEe1'Aa
%#q1pA*u"9la+=!FNZds73mHtIOsuTBhY&B)<ZH4O`8ZWZ,$rb$fRb@4+7\Sp6)jcR9I1PrVpH.tRM7_bJCC1>8rae;MNK)R0];ib
%X^;_5FbIt69n5j"=L@!GCs!?kE#HL3,Aqj8!N56P)2DZjV+g.R;B-Yb*<-\[3C.6^2Q2X/FI=c?!7&RT'OgaQ)moiQ^IQ>g*#hnD
%dD&(`SP_hp&J-E&qA(\L[%5DKm48^0cIrS1ZP'$*ImjphFi6TL8T:C@d5XC961_[@m;6e`B3il$=$X7$7Ur>J]o7jX:JF=/'GmZ-
%lFPf3JHetadE>\=Z'W,1KE)/IX!G<W"E3U<VW5PW0."D/$QWuDD5'Ya$gOOFMJ/?p-pU'B&\tQKD<+Pbp5H:%1cn!\3J"6':\;#V
%XI8&46'PI_R@Q%QroC!ibR="KZEnH0\.dV-HLsT1kS0Nq_Hr^)oHbQdh7(Wi'U,IVlSg*?-%oB=;3T5gX;V\n`IYu5>#phrbSac_
%CR,H-mPm^(2-m\f9:`cH0Y1FTQ'2sM\3dh/%:Ptj\DTlC\GHbd,TqJAcY,#t]5BW$s#M\,A@:p1h]MWs\uRsX:2!a)2Mu`0h0p<P
%lF?'Zn"eFem$X/>Zc`!lrWdHqCNR/45NiRYddVX!5mO`Ip[\@ZcRHQ)4D/D7\9QB+]$43LAGu%j[:mt1)nr]40RWMeO'GubXcYNT
%ebNpeWph`C2"^dmR@nFUf0:*/>;\Hqb4)WYl[L_[Pu6aI/b?GKoUY)Ni<,*lqfI4rQ<jQKiH#OLbCEbjD`RGW?h2V?l_T*J-iro;
%!GH8Sn\_;.:"R/pcHD$3RblCq4f15;q>jZ>OD989">i.uT#NTjm3]&kN%ufG%foq%4ADYr._]$0BGB47dHS\8k"#quo;#'pl?TFB
%[d1WsgasC?-aQW*ZG5*6_\7[_HECeF>C*Vb(4<Af[pAOc/?@>@IE_@*k3d$G')(t=QB'@-S2D^E7VB+0L*qqg3jd3IcdqD>DC2kQ
%9=&.:KJVZN(qe@fa)7Kc=WAS4M^CF%$&8I49_P@o*]n6$5;6&IF3/54!UjjVlkk.TZKb0>a6CcJoVOpueUbs<LD6@(Y.<Rn+Rif-
%@i9SIHZ]<3Uk>-<[sRRl+o$/#P!6:2#'lgp$b1a`DuKOj;V8JPB>)lHMZMa0bKP/l"urn?!0"?iqCkU:@b-DgUHp"^hf]>HFRLEf
%FFGCdE,gk??MA;L@E:o`&EJUQle4%B:&o"lFUE[u;f&=rKO5ckq"8bTY`'AB.Y_*/F?ECZ!)>I55L!Z8idi!em]2/#VOjQjAjq2]
%5:4K'HCtLo^5<bcUo1@illX\U,/0!%>kUG<!;)R9;Pq_e"rZr@^?"sqTs]igY0eYBEA']K?_meYa-8Hmos6tTs'^-a\/Y4DB^0\D
%q(?4G"lj+PBWhrgl4*`("FWs9b@l*8?K-M<pf6B3XDGq1PjMtDg&qm-`pf^L"4/*[bp3YKpF,gh8K,.#FO5a:qf;HE&Rda#&Wp,C
%B^(V>H]UoCFLk2fCeXDT!tcKG^5A#ReSQ%["'XN-Tu[m5?Z%Nm#&BF&b_*J(6WfF\j^SG%'1U([SsOIr6,L:!Rm(k)XcsL]V;/h^
%Pk._ZcY+Wf6&B6WOt3q^5bW@9RI,8O2jThV/N9lpk-a!sLcqs'k-`u'WT=3:2lPlO&M`\GSFF5W3D\_[:-BCLIMfJ/75%h/s6^hJ
%ZWQ\WCY_QGE#+X3%jau_;bS#m9QEUfV_lj3rj@"O=c<&==hoUFD7<6Q&Y#kSe"&FEd'f[8OB_Y"R-TG10+k\gKd#%tQ.e^j*As9S
%=6@a`c\eis&J<9`Q*ZF)T[GY(h4!1mrn4Xs7`1.5NHY-''[JjhEN@LTkb"TQhrUp&X'l3lgG')sYfiZ(abAnCT(&fCA[0U:q^USf
%CclHV>:$sjA.,t-Jd0$*MCql#ZgK)-Rlg7F/N<fV`7sX^<06//Aq$j+^j.0b[g+[;IsI':Z-5Zbm;6-?l^pNhCBqS\*Hl$Ml1oM3
%"?osS:]6i8mh['/;`$!^cfa_:9Uc:6>@sd22`b:543a!;n.>&gP?(--PT\<]fZM]jZC9GiNs'qW=6?3NY4>muN1Xu+]]`Dh$WYB.
%WDB70J-P_J':44E(4cFJo@"IZ5I4`\.fqjg>%Idr3Kr-VpE9)kjmeC@1#M*a[k41'ci2@\V[XqN^2Wf%2YjT7CQhQLZ>-Y1@Joh<
%T4e/Y`clZFK+3-O:;*J?c)qkC3.P?^ntLuu6hejV>s,4#c:ifXAIWq=rQ;V);g)WXRM@qfcpIjhKk8?\ND7)*qbGILH$Mqmg>1E:
%Gtj4g$@IWBUj3L:hQp_Lhr+hr:J^Q+L4R\?/m-+dAhp+l`d??*3I`_(nbCfCj7?Stj-ao3*f-55fBaftI)7hg%k.4.!mcfI:bZUe
%KNg?@GIN(h[WYGY5Q,qPnfB&340I3<0lpFo5IkpsiPo9<U,Nu[/SikW(M%d$:H6eaX6@1bE;0(toSn%iib4N0gWc0n0_"C8:A![B
%L)e4rr:>o\AI%(@/5u,j9?Q/mI[,B5FVrEArPdG<(Ha6=bta5o%OVg6$FDUpPS;)M8Pe3LQg+3^Gn5fS1LhG3Sm\//@m@U3C&4sg
%MsL6%:VANIU;)'Fe0oZQK+7QTiq-VL/u!ZUT+VJp,]3neX,(Ro%1fM:HD/]fGMfsO4[>DCpoDIcH/''712Aac)ol]#7nh)K7>;%%
%'oODfn"1C>og#E7Pa,EQh2?@\fN6JZ+`_]V0/\FUFYqUlL7rs=7&-F,$7D.+Sb=\_Y9HTBrR?=B#Y1!*FnD!?m#OJ^RBCfXVs*6$
%0adTMQ%e'Kl^e1#ej"l)2`R0VTR;B_.#%,s'?(>6dpL4ETB2!!hMLf_^MV<?@<;%R-ssa!>kh'@;7mGrp!25hKUMNQT_#iF;]gHN
%Um<gB(WDTk:]Fac_KX^lie<c1/"Z2uq=!R;mmWY4ORp9mPkeXMkq<jedp<_A`(YZ>RdW\5)ZNj*mmWZD]dR3?2#UJT"aa*Yi@`A+
%m]#`PO>A*(ffhOEdl+VE,j'k*bg.s?1^;k&r5*.43C1rDH2a;"\RmRFH!.SGTCha:?Q&D$:1!q\.5Q%[p)1Ulc2F(9(<la2goo!$
%g._:LA.)T'l.Yl(f*iAYgoJ]5g:uCCc',PRQ)r6Dg>&b-X1au!NmRCTI$9!pSXTj"r3s.EBBf]Zgl+F87e5>n4Kr427WU@(cl%u9
%M&pgb;PGg,D+JcbIT891c66]sC"+mqrR^XbGbT3Wh*N0MoSj?!q8hFT-b#&0C^NpTBc2&/iX$s<G&duVA&B;H@mtWRI./)0p[C*M
%(OY+R$bP(?)C;^Eq+GT1p9uph]p%r-8qdZHlh'^/*kp*@ifPl9'/`#Dj_GBS@D.?Tms*j8[&$6;:L@Nn1OJlr#F4]kMeVIWQ#HJX
%Ken52dR6S)C[S`,s!.)8]kOkt%mB6)pkJ[6ERu8fg5J"C\0If;oE'?^lr<7>a,@p\PW/*9MHQKlUWH4:!mO9oS1/s]SPI;u5YH7J
%5-t>rj/8@N0+(bY6N-Iao98AXTRiXD)jprQ^Von]Mm8mrHa=pFq3-83oD?;/GQ7D!*1Ak%s6CsMR,@q7huB8)s8AF>"5X(@R'=Ur
%0u)m5^ZYL?:c899O81rrq*!X24l?&uhl3\Rk4a8$d0KS)C,P>?`r`6.j[oaX!X1]\dXuLn4+(1glG4um>9ugqZ<e&g*ru<j\r(+!
%eFiAa*&HWi4Y29?7)uD6j=h#r7#gi+H?i5u,PQSXcDs5?5YlZirL;iq["X-NZpNn(@a17]k0%<8X!B3#DAbng%$&=5RuO.F[_b7&
%X(HIj/Ya/k>'a]<D6*L/fmNa7^4%tI5GS&+^\(fOV_)%\'bC%#o\X8ogR7[sE!%/sJc%":P!"h9eDQP2jYI_>(GF5_9N(hc0dZbG
%]dX7k"fC\BF>h\+bE>KH-pS!i9)dLsr7"ZA52,,A*39B,E3T;Z;T*78YKL9"XYG3Y'gGLj3K$OZNWRItrKo7NbSOUJ$SV+*(Ct9m
%\BI8U?L1Z/ZMlUdGaU4tbSOUJ$SV+*Q^Op?^Y-Ism@ABV=h6CO?U3nEbWgePeuf$dH3NQ&*]3D8*m=PS.h/,FC0#L#c4?D38rrH^
%%\)t%ASq9,>0ZDEFE?G&r@GN90.JmIB2!QD@G9%pn8_:D[%B)C9u!60*ZX@ZEB99)R0euH;jaF46I&A8RZ7[<4b<O_"ijcYhu3q+
%2_4HhT>%]*a*0Un.@PS.<qN-ZF8dICs-?$0^=cH\*Y-ejaf"^mO0_Vlam@uE,)_YtcG9DS5JKt"][5TqgK"X-Q[/F*WGQ`RNESg!
%UQNcZ9D`%nQ(JXcr>TO&^S7O1,1Y!S"4JTbDn6oOYL(!jKbe(8jc;:K9@!'].>Ki+]HeM)QufJoj+3#DiGB*,&+Ic`&\O4sdk#h!
%j(Q>Y'f#Z0N;6o*o6$!p9_tU]3l^M3=u3pRTmVK8$njH]f.lFR)"Vm/q)ZNC*TR#(A\O0Z$gSX3TlkHQHO]02flsC@R%T4U;Y#.g
%cs"Fnf4Yl2jD%'O?ab.;@E2NG><aW[oH0Zrl$!5Z'iCfn%Ofh%/^qm!)78:VK_:*"&s<SC<eG!2Sb>Coe@X#Chn1-#MiMDkG0E]i
%d^nYXOq#:ibaKn40E=82DVp@BT-)?7NjAK>4S*W/rmg2]Gfgjr/Z\;.oa'4%;<$QXJi]3ar5ndr.d#muc,R:[s41\4ri(UD>dp!e
%ef]I1bsfJEkpKf;LG+$[bu5cE,>5G:HcU!:;!K3J=J#?U?=$0ip<?pfpY+uqM4E8Pm*uWoc]]ESSu#Glq$dL'72>EBmjNG5bVF5u
%'KR>tdBe!X!=ATl2\`-')1,]5c"jjmXQ@+*KR#F6YNFutgpED4o4m^ZX#U\.rk+]s*n?d9EsQBbR.ESrbS>3VE-KsIS=>jdo5\_T
%cHXPCGrb'`+G4T/d!6jFg.OKsH^/]EaI/T^mb4t(jd,<\i6CSumnh>YZf;lbP]/F(*.u:EZDZM(^ZgBS1OlRGr-Z`a\J"oeikBs[
%Rid_H-#Tb_K63B-T6r%odgO^1O#C-8]jQ#4KflJ<[l_?>?<04+\?F=A6KU4I#9N.*N&UN(1X]+iB$uRNh<O-048<FQ(HK6QEmQ/R
%5fWhQT.ng0D+7EVg&A^uT+t/J'%cKRc47K74L\^Q4+*=!H.[Jkm^>`6_8mC6DjelNpfGl)q0Q^d`lWKc7)L?4DDfKobBp3iLO2_.
%]VaP6HiC<<Y6HiarU24?V_&gk]E`qcs#01K:Ub.dOC';6&r"';&OV_:_mt^EI.Fddmt1MtoI42]c^a]P:NPio7"fgK[%4_NA2`W4
%$od?BGa!V8XbPd`MN2kJio&i>qhZk4[*)Ou2c%J,1EHMF2d=U%8j6%.^26b)c\^dEdDq&RD7;FP8^Y"O_Z+KmPeUl#r"N0&`U<cJ
%3I*3_;lL_-%W%adO5M/o<[Z_iG>j)Y?U]VA("2@@BJm,[dERNUk:F2#0.JmEfV/B]j/8@N0=k0^6IkY2!`GQl1I)'>eHsI/gZ^a0
%Nq;0g*QdA)5Ye4eT(W0KKna:POC$.Zg&n-poD$qV``ZP4Sq#GOZmIrncd6:kHNpBB,JNc#XRiW?RuKd_5!0Eh(A$R9lq>gj#8@&'
%:41%l-=VC^rGUK'?H^A%,]C@%cN3qnV6&u:S;3:JB#4iq5k"D.Rt,+u#Ca[tcUu&G*_SP>:\1I<9mkE&`kLbI+9,F]nWc!ho4MS:
%^;D*3!=tIQe=VnDp73:YrLQYq1OR9^\(b-]=3P:]m^M0G3tdhU?H3.tU.1LbB/&)0#i'agiOQRg;)HkIf/V)e55dLf0Ip0\o*I:3
%jecRq1pckG(-oU\@8EAG3M2)=0c`Da1TnBn57Tr.Q&#_ZJ,^GJ=*bO^gF-=NU`0W_5/oN_Ze83^K@s3[G4*Rd8]tRM\iGG.3-^HK
%Y,+)2,qn/O0SMRfm?Tq"]dnRZ<]qj2h^jcd>]h_N7GDW3I?6%!d9>q0;6sE,E'A&dZ_FA([`.eZ_VgVbK!ZLlZ-79p;=&]K&nr#a
%l1rhDA7-*l6qtI7Nu;N8iP+m'InlKoRR42hC0c'I,N!#5#XsYPhXJKfh0-b]U,V_MdINj9MLa_W(Obpj>d)]%16$cAB[3nug[NoK
%<5r2"?M=V?KRekEFT)<h-K'Xn9Ytc)h?V"+5*fWu0E1"qk,5s9I?e,s[Q7PR&A2j=_E``J+,lc<CIY43r:(js1R!U/6!7#%"\8ql
%Z6Cb"H,GH4!cM%m<E[`+ca@qG!@+s5/[DPU\5"r1h>@I@$siYg5FDSDJ8Pe5IlBF(?'@(3m)u!`-!b#*cMCo6HEkZg%cB:SbLco-
%@XV;M)"K]dVh*]%&bK9,MM/g#ai3VMHJY[\;#ejYgI&*,B!Cf!=G:W5$A!le!?NdVD`\El^@C5KUk/eP(`ROAE_lbo?<Hu0%J)O'
%1<Fkr5JJ.cQ_2l1)XZ]0HE/(c0_>E#?ML`UmpXZdr&F;LC-XrIKhF;(:c1F!(l;Y[J8S'bJU+SQ?hF$]DHD>lS]Me@;aQHK6J^RL
%Vc*He9R/S5=ap(a$58bV4B[CT8Un8pI,6<*IX$&E#Wj%6O)u/Km>b2=!r)GMWbA?5f:+W"@jp!'G>8$CfM2)"I80`WI(kpr[nAr`
%5egsIPIG=>iVU-)`j^A)kdC-fmS2>4iiWB8pb>>^DS7>%r0e7]]MR\VX*b3dXtTC;%GEpmY:m_cs388b:Dl-\Qt<s$=5N4-;NWk0
%S[4Vbrcl\N+>__cC@VVh)!Ne-q)[HKbt!5Hg5m1nH%:Gd]i?sOOBLN<7QZn)U_';lVF(75N\\]Yc"bf%O,l[/k`T()hM!!rg("%P
%Q4H0&)HO1Sf$3(nQO[9I;kXpJ4*s(=4B`!aiCsp>i6t$O#8/lYH)$aaa"o:Te^tP',CO0Wen3)T[u>Lbr8EX\!ViXe&T;c=i3qOS
%HHkf$b:.eB;aK3Z!c1sd0X^H-2[0a)37qXhW*EQVaH)ZI<<!rGojM%%+V4H(o)<Q/9El/pWBeQ8Mraln<$BgFrL=3Wl:+8slCCM-
%XF19jotNt.Z"W%<o44":B\NFa`$h)1]'mLL>ICV^0=Nl:1rZc7hT\A`L2PJ<e^1B:7a%-L?t=A,Y$2NT^L3%u<8WP[Y4sXAG/n:L
%qW+*cm_Ua^?-^$PB".A/-R\2<__8,Nb$D\spbGmVgDitj@Pu%O@Y&dc@cE3qmCE4>e*?R\TP\hb?$.Af0I\p)i%Q8V1WR*62H[eq
%3R3_Q*1WIDZ.Kji2!'X=4'%CG%[&"`E(Z1/eYfl;GtW&jIH8"pI%1^fK:ZCt#b:?^rul3ZQQ]"raGZ6Jg!>2[0OQ9F%C;9)gsKQ&
%$#6/X$lI,0\)"\lmH2oOTrSX':piP%b:Uo>71QEaC[+WuJ[S_Meo[6nEit6\\FI#,\*u@4(s"60phptrY).ue[=/t,SFL74QRnRG
%4`@op+]dS;^,NEono;A56Z6W7K+@0lc>'r@I.6,!/p+WWMpCF:R[)K?(Ik`8C\J,SQ^[P)(;Qb`r7\FlfuY7OK3r:6)o"l<QIW-d
%'[W2QI.;#rPT'l@YF/)fLt\SmKYq?DV;iQX:=;<RM"r[X7XrF=\u$C"=r6b8S!2&!*3J?V?VE+P;+2B5MJHfES54LIM3?i%fpD*g
%93//#MW=E!KB!$!_pFTD*pSSlqJ\NhhXOm@NM?*P4^J2-^_=C8*Y13VA]+Gpm@o?<RtJ<+do-BBFIP.oJ7bfIECP;oN/IVPZmO3I
%%?-AP=C>[SHZ*Q/0*ec1-TJ!DIB&drTW<OA)t1utI&`Yq'_+EQeb6PtqNH!B:,h<6h:N;Uk+rkQ<pCe"@f@9Wd]a@u_n\jdjU-0A
%"C.=b4Q?O]E"d3hYbNm<_`mG.p<D085:?;Qlgq9.I>Hf,,P\L<3$Q.p#S'37(gGkq\muqs)X$b!9tarAg/gbE")b%qQEt(J,jW_#
%YIIH1I:AL0$SjW@dHSon^))js&-F30>m.ot)MnhLH8@LkE'>$fZ5%Ih/XZ,`HJ0k4KA#s/)@ijUq870g5]&?S)sre]>iVrb6hd^k
%n6"%oEDMa/R:F4`8c%u0k?`ENNlJu@1u;j:h@6c12"q)nZoo?&a&"mW%*1g)(h5"<JIW:LK6,X)D?+l).7;D-CuQY4O6j(CSc(6G
%:#$FDU;O!0aWXm6l,oJKD>Z*-W%Q9g9"hM@ZJq>+0RW7_bGlHoAMgceP;R*1H3\,6l&A^nd3b4#0E1TO;%[U-('^Gf&37rnEG?m"
%@YGp<F?_'SNMa(#XlaR5quA(OE-4hT+M#SC)]dB4>g^UQ:h0=KJ]rO1(Kg)c$T01m^!A2%Ec%Y>N+W-aV?+@,@2qOhn;P>#o$:(G
%7NY=YA)nEg5i+\M/<]$(%+Z),[\5WG7=]Y8rF`lg)SLT/TuVQco<+$cgb=iH-rd9K`\RGJC_RZ"6e9/.D56IkMNbEPknHmYUZkMa
%\aLRDHF-4O*V]Y_!gA:07jeO1^,nsgl]HdQ)o2H+,.@t!e@/4]I_fb6NT(dJn84e$S\aUoM^0k:K7a,rV&)i_D&qu8Y+!#8:-s<(
%;<slA,/$P'37;S]0%QB5A3W9rmH.ic:G9mNG*3&l32KsM-LJih;hPPIY"-#1p4h,L&YI`!ij>>1)rh3C)$W5h'Ks5KF`jQ/Q"o+*
%N/I_]E-hTg4WDsK0<9$4qY*N#>e`Pf1YX#5`qgo!jum2taO91Jm42otYlQBN8AcH2f^>s6DnfKO@,C8"FYq__[@t1oL2WCDeR0F]
%SlI6Dl,Ja4L-#FMY.(Fu&U8I-3eP=ogBOT,nZP)o+6:@so+[/sZIljcAfT%u[Z*;7G=lZ/rni>\[#..Kj-ng5rqL/EUOhC/p^pW%
%AN:OZf=k*1ZH_!DLNW04)"$m?CH/(0!Gm?T0H2>(,<3Q2r\E"0&2Jslnu+2[!3<MZ4Vs2-%h[J5_G'#J3CYCkSs0foe=d22n$gp=
%hNJq5C=Wa,51G3cq-D4kk))X_/3!3^3!2`^O=XJI4"!?p/GgF+GM-6*)SkPHY+L2+jNe?l6qW9boJUh96e0C_fY"oDl<QgDrM48B
%mc/8G!Im1V7Vg@35-jjA20+1UPhkaWkoK'm*'.]p?/$nf3l,:-fd^-Q^[K"*\ic,\k`uV4G89k-G<QIq3S%Z4n:kK6,<\O4[(H/-
%-O:V%d\qKo&Q-UDY)(f&RLRha%Mt)AE"H:HDQWLo+O4a)3dsp@K02)Y*]1.<;"]9Bq8h<5beXF2JdX(cH@4kqOjF<_)CRNlBWTBF
%fBs<:B]$4[hnCk(L:)G=jh^6;M:2GS<iotqCrMYr9bn?rA#%Qka<BFU'CG;Z^s+(O;0.`p^;S*@KTFBW&,Li9kl\L*=qTD[3Y@&H
%ht'#[*I/dp=p%VfP#V)8J,'^/-qRVV7"kLD4m\t(i?dAr\K3ta&%3Kp(hLD0hb5n.Om><2^b!ub<St-@5,?`.oFtb>J-&Qs)7)&f
%Sdtk4otGio&G)`]EJ[[A.DQ,?8a;=L\AQ[<YZA$Zp>WOeSDIp]/lY>p6_KrY\c#jQV3'M&i?O`+bk6TTakcj?VH]D,Yob+Bp*/0c
%>U+UI^B:^jCqgcd#t2&q&OaH]8([fm.h(m-JI>BP?o?)fcSIkrgD.D8[#B2bE:CVYJLoTj%gBLKLHN*D5#@fSoL#[36k<;:V'ohr
%W_#(j"X];Rr.-MR.ldJZ)+.f6Oh-`-Nf4&lO"4)J$B8Z.@oiTK"4ALEpVM4qMI`fhqb*LRp&J@)LcU&Mf8AbLZ3;$<j45fLiH:(K
%Wrs*%'!_U4]q]Q8/:r8Z)YS'W?`Q2V2hi,K-Gb1nVIMZ[G<SX]>EG2Yg4n/Chg:sug9-l=-m]g-Cm\Hq30Z[n<W9Mh^s^jE3N*6S
%<^$\0ZWdr0<i3kEcb7[mL%jFr&'kU]3sIBTDc+j;C[Jim\/d@G.7^`7<([`9+R,UdY58+rA67"q`Ld%;H[C-Lqs7,gC\i'e2jQ%d
%/>i74WScUEB)F0riC,#6(?qcpG4P-,3P4ZZ[$?8coCq_2IfK7;_XHAa?1@aCNYZ#)78,)TIeS>")F#$PSYoS7ZdcjQ\Z#F.Y/-Uh
%F*Lha%Up%1J7>l`5l`W[p%Ys*DcTr]a5fl:FbCjSjC=-M_Ya,uMur21$6f=L+<RB$3T#KKCC<,s:/o?JQJgTq/q2$\1^C(tkSAQu
%5cBBpKB;AI&+?r%Z$S6D[WC3uOe=0NJertr]Eth'WYRNsDtri856d9(HZ*]p7Y_d[N,b,1MgV>MW.:?_f)#GN]_&`2>Ip#eQ"3)!
%/8.,%DD]G4pG_m"Fs%IC]sX37A8Hl#I]km]o1PeS6tu=53H<j9T*X$S5C"*;8746bkc\r^'S!tGQL7,ab8#BoqtE^(W>1Pk,I8r_
%!k3AYdN=9^=6b.%N_H*-rZQk_&RLc>&T1S:BVXnY;@C"@\:D6KHmXj**SQR)eCES,BWmj7n3RCLFS6,E;AXb7AYM#doBa3.5F_r2
%K@oSI7J*=a^Cj1W0+%iW[:&gtBf!"qh+b%S2]E",#O*O8%2H>rDms?&V,@2"cVWM<A/>W2/(M+Bh(!WV*A)C\8]QOc\@Hr'g.\*6
%fuVos6/G;4[8Vohl5"jKhQ@n?q`"71/_T8aj!YVdDFGI`ZWtGT@c[C'?8,fppZ:IA8W-#(Vm"Y<j3jeIfC.D9+ad&%WV5:R1='cZ
%UW9j%-'7<UAh9UHh^;=@e1(kCX$pcNX<oR_AU1mnihNVBMVYA6O(]pLk=74Mg59LSrlSh(ad!@1Cb)_-M6H':8g(X*-j:[e7-ruF
%Dcj6P7"5k]rp=&tB*8-%83QnZ`PYcl5B/9*o![P,s8Gk#0jV!e[_D:Ai*S^^H1Ps-e.&/=<4W'=>OU8jITk7P/;<mO>mG,6OnO*(
%_+Of.ErV#H@HB6)?ee8DqNn_:]RO&g.pgml'@@.f6d1+2D818_?Vb8cs2K%<kheL0M#"N_T!&!BLZGL#Qk-:q\'*p:T;cJKrG5[r
%r;:#:aj5/a-,6sqF6&[r(8(L[qqU`mOV?TTC;QZ/FQn;GLC<1i-NEMV[Huf*4$*!%?gX0XOTrG^O+fJ)rqQHOZTl"K>4QHs[tt''
%\bY/ZSM_5^a+8-XT@T@$rMTO^li,+cPk(I0US^8F3YD:Vbg!!aWr'Bc^Tk51rk%@L$;U23F".!Yc>*siQ^kSIcX0sgrPb8gP.suO
%9D^6*hXOZKQpZ?dFSk40c@Q<#\&.g-^U(m"0)/@kG@@`o4'>[B/ZpY+<GjE*2WO\Y6D2$iZG<!oi<>f9WP^P#ibRak5ri4V>6p!&
%%h!`bqT_F'Fo/TYY?YTS[&7DB+n_5&/YjHucPFf`-c3_hmC]]Cft#6WgbLS16aX;+n=9/90BDFQFX`j?(<fDgTYB'+>\I`6'Md+[
%]p'9KZE9tB'k+k_\8LH4(B[h)E097#Pso\Hhcs.GH@'Yp-!XW4>eJoF-;KWI(([a1[[=e3mOi)mc@s6mlY^,#G&_qQnPO-U/F"+d
%[:kf2ou1##p_BZ/Cg=n/MsZdCH"l5R^U1AZ'e_4W4rmUgR.0Y3P3BZ^0<#K.DbGGt:&e*R_6,C2o$P8$al^"@FKsBQ?+LN#%[J0E
%Y;/asB^pPNFE1VhWkPjP9?kaJE7l?$m_Ug(.lXBjjj!5Y__QS=2jU:8FE;`jFCfAN`g!dP#F4o'o#^FiqJoUH7[@s/3]G5X[HcLe
%n^Wki?_:[\bKWqY^>^g2_THW$GeOeqWAdl]Gp0g5b-:Uj&Mq!&e#XN[=2ug=2q>o?DImU-jmN$h^S3N]YYmBtqisY13k3TIXC&06
%[''S4!Fu"=<Od>`Y(k9?&$)sF93=oZAW*UWLV<Z:CNHVgqUDX;XHo[:c..,$ot9"X7eY4KY3t]Rf7G=AAkc1"d+[ogdTK4XiL@4g
%n<%Ls7WrA1iB],u'p"gJ[9ANOeiL(rL%Wu`;-;_9De@S^FF%kRs/@#D5Boi.f/(6XEW,#JI_G_iq2a.P]c9eRr`2t9NTJ+5k!j=O
%IW7`$9Y>6/*t$PX6[m/03+&r_NEaSNg44kA@A@R$hJ[M;kPNNsp%%,iVc_97iPUBIB&\LnD4YVkC7Eg&2m#f&TtS,7HD1O$3sui[
%9XD/#]GTD_[++?k:;FHu9"$Tul`AH>gq%pXn6:S_5.O\>=0D]6NEe=P=Phd@aItjU&3YHR%NO(m<o?SthubVCf-c,an=gQZQLC4!
%B'fLB.';QG_+:DZdfb`8eujX,l(+ZDIXHDXX;s05gC$OLc?A.*,/:5o(WGcdp[Dno/C`Xfmk0Zm[QtqQmC1;<Slo9UmP+S#@[5U_
%FcAEHA/:T6EoNP0TCX8UJ;Mt@e63cf@G0-&D0@kM?=?bnF2D6e1<8P1\A^?91KWB&Ri1=th:55;cUucuj7q(TGI%lDi/1!)k2+OE
%X8I8fgYaAdrIp;j0:.&UNZIYNl;E:b9pZT'iVJLaBnYkKHrJ\RO]R42gW]o\An.eb(q3.TU!56u`Qd[;7oZ\R"n<]V?PY<(cdp'%
%TZi41>8slTYn>`W'_^WbdULs6.<go&QL_GkRe3K6Y/hOmJg@D_71CKs_:.q6I'q!pj^QEeOP<242CE.hb0JsS;`TlY"QaMSI&`RS
%O]Q\q/AeBVEL]m9.p#I<4B^?7?]6;8Ht?q@Zshg_LI0^H+5GKI60Qmu1dbkm2Z_B\Q]>i^=GS&4iC%._*R5rPe)B<Zd;$1d1Y4_4
%g7l(jM8,K@R7\X1UFQl@4)^t-QefIVD1$PGUU\$bW`KP>cW<c[]?MR_hqL1ODXHg<nrJ-q`uD"kkIVC,J\@r6>hKVjimn"@e(3RY
%=YlW%f<qa!I]KHKOmTK-m7:4==!QD+AUgLXY;W0TVoNP:fC-stZ?TT6?C.igdFVC3&mO1k^;e[oDEW0uA6Q79fYM$ufd^gT2"BMg
%"s8nHl+M>MdlE;Pncr6QV42?W+eP=6'1Z]O@,g^f&kt2i:9r"/Ps$o@;`<3jQOj(/dbLeYC9,siD(WD+;70>tHE$#P3pd$!BRTV?
%$n+mVWV'2[k2:6iE,tHV\_]AXeDp=4,1EP5hGfYbL\6X13OP,6hFg;hf3_ICpP!kW<BY"9X`q>)UHN+,o-g*/4<@M*N4n8ZZhsId
%mbQ@B0i[fq3)?lE?;k%:l.ot^ce;$)=/-`!b16IVaZAb&3nZ<!nWVb)adp)a_Z&"Y\Qh.S9$-tZCN8n:[(c-n3")<kiNpH9_k#U:
%FLTQPP1A(k=4%g?WVqTik.1*53VPb(]'"r_/Y&H4CWeEVH"g2\^KB790GjWaX*eo`D!t`\:G7d7gW%BIp0dbAT7&b)Ds$s*&">R*
%\%e-MK\"Fhj\@7S\P]k?]StYgLG&&$On6as/mQ(&T6AngPKMb(<G<cTHG(BC$8B_IZs:2T^/L=6Y$7a9jGe9Vpj."i\JDn.=&014
%RkIG*D;t(@J,=K:.<g6s/DZ"0l2A6L<lhkQ-eHiACoP*fJ'=7OmYam:]nc::K)[".Cu.<;jI:LWrl<q(9_0)b%HSZbca2k+.p%q,
%"C52Y3qM6oSkOFini:r?R=%c3Z1;tpVR$$'/u6'3nHN3GH+NGYoVGOd6/R`.?0c]s9NLVZ1?\K&74+55.UH]WXc<6I5rn=;_)-j^
%S%UIWa!n\MD3\Idk67__XC'ee)o<13)O]EnQr/cs01u0$>G6.^IFBcJ9+en^F*t!8Q<ebg=50%U_Oid(Q-=FMW`#n+>,Len*]D=t
%6hb3Q1l[@VX->'/?F(03p"*e9[9HX4C;oI<+t?[KY>)^=P<;o][p@R`0AP(OlB.WR^&Gra7uc%VFg[?:AKMhED._DRP(Oe@k`EQf
%.f$cK-HDW.2Da%LQ_q1T5D!V+Pa=Q'm5h's[/><uBLRN6=0:Wpq4PF8>Z1T?Y?t@lWGE7/#qo(i(i/lF>-1F5SY:YDmneDsL;^T%
%%4oj^$16Dk1rM6V4s'h.a7Ud-9#M]$mtXC'\cHRDnsP-QM:Jg;Q'PE/'%YA54V2CNcdDLg3#mH4hM#/6)]bEqaG#RQ1CM*]%ufhH
%mHBO=s*9^2X.Km-]gocm+'1^0BD9G.M`hOW\X))gIKW4R+Ii@>rG<,7$$gcfk'O=s0XL<+m0Eqt"'JtMq('qhl)^`E.\KR$]k-t"
%'uO\A`q$O.h75a#7`3iTgT:(&&%-;GhL`!)RokI&`f'K)>aVG`i)Gg)P3n>[g9fbQ^qZtRY6bR!ZPl#[C,&#,%U.H.L<j\_IQj+8
%Du!f#h>e"Xhq,,PTRu,Ya_i`e=4:lu?hi7haG;s$Jr^GNn^(S_[p(6$Ar-FoFCok`d%`4$D3ar'R;H<?;/Lid#:EW[UD5J'Tk-,H
%g=8#&_@+uO[J/`&\!P[@XnNUr*U!m+I"M*q4eiU1hmE7t4SS:BP+L.Nb=:dqSNRHrY%?2?(lu:1lt454a,S*Titl.s?.H45hlZj[
%T?DEL?k8^VkZjbf3B*-il%>sU\@m%CBtT:?"O)NMjlY@mdbhHClG%DCB*u=+!'S'Q0liOs4l=W2RVUs(];3CBpN'SURt0Eeqki8-
%D<1+FMEa%=d*"hk&Z6Np[o3jIJ]KQh2b233P!)8Q">@!ST2r#X$4ZIY[XFhAY7EQ'\=<RZ2VhSr+7:jKdJNO^BF;s3%d\S4Y]Fg:
%hQG[YpP#mH_VB.GDare*LhPXkpWiS"&0,V?iWNoSmD8<gg_1_a+h1;AdCP#&SiPFQ2pNJaha/=OICpn!*qu4T8i9L8Ls9PRm+ot`
%S>gao<.g]%+#qW$j!H%LA!f-J@tLVcFFo`>ACo3qbKB.A[/S6^]t6:B,*VkSnU3`Z/7O9107k4dTKW&e)k&m22W?b\ki2C#IO=:Y
%#7nng+%cipL19E1A.e]Ps7_1C2lNqo[T@]<VrGCXa44(Z4j/osND'a\/V$\O([i*/?>e7"qe%GRRlf66X'ts=l\Jn.$cF6kK6ehC
%DYT8Ls45n=gsguD-0atS.4p8uQNqjb_L<p3Y^-prFUPL@jA(qN<Y-#aVO_s+Pdd$V8GFXD&_YiP[Nk0LDB#I0K[]pd"*N+MPn23i
%OWD9Z`m*>Q66[7O/W\,@0&FHuE^Et?a`du\`9Uo,\-m+AlW1S;9k?DObrodGX!NFqle#uiobs]!PaJ6Df[6!q[3T+Mh`jMMn_hsY
%=l"%ja2h"UH]3X3_>7bQCUpLJ*>D.#%H3ZI!lgWV4^Q<VhsDaiMH)_-ML<GSE9(RV;..jkOe)I$CH<"Lh2X^bT.G5rnqQo,r3:eC
%\eNBn()msE)njmXC"1bBbsJ]YT!-*`_K0rL]$.?o`_O!Ln>>$<(,rfDHWN^qQ#NFi=7MilR4P0bFD@,pf&`4.oF`pONf(*qo)<Bs
%[JA1/VR%dk8AKNsHrRqO]i+Xj0bS=;<pQ6e-fJpQrig/Jgcu:Q]cdc?U\5FA:0og=CRuu0bkSUV6=s#:f)f/GX<qTFP_RrbE[771
%=hILIW?U3n9;M!P`B?5!4`0Ul(%4LpIdrPZ]@U-hP4k]2723qYF=j%BOB$Y4lFI\6(%eMnB%Y/CPJjoDZ_I7Smoh]1KGU6$-j0[M
%@IadTJUH,*drt)%44hSa$6S.t^<k9;>:p'tI)Bdgm3T6O`.!!`*p@oo-X;$^I3R,+@1;1e`C+>WJ;PB?:jD?%^om'2+I"%22UNU>
%4;2nuI9o4NP?nXE>iKl^;;+3_9BuB=;G>5?T'mXGT(eti8tcpC//:pS3K?TELrtdfMpSGJQb7Usn+O7ZQ$5JtT;qk;PZk;6kQpS,
%8sHX',%2pZX06I0/V^I.P]10#-Mbl'?H%Se,;%>Y<A'!Pan7i[Os6>H#pd$c[2H=#VdXHQP3uqq_^[-@*"&%s2g;lL>,'$VQm4<g
%0*dG-#MPC4<[=4$/4=PLSaImbLSX0D]d*KFQ64k#%u0Qh1o%sil<^ED[^OUhO&r-8]4@Mdfgls^eeVb+G/HI:-qAUM80:6lO'&,t
%4+S1W:%gQ68A30Wm00FfQ0_`R3-t94443&a,DBQeo0k6;XPXXd3^sSaZ'r%Hh&fneUj)9:LUkC[+XHQ[^2RSP,n?ru#0_5(6Z2HN
%V9lV-MXN6(!T%[9%[mcN<S\&kVaEQQVqP0#DRN8r\B_m<L0J"Y*VS_))kiNXf_!-D.bVr+ma9jQ1McdeHl<MsQdZlYS`aHFRXI1g
%Cn&%P)BGKXH724'-WW6JPtU@F;E;LCBm)D&j?ntQc/b15b%WA(kQV1I<Ki.%gPRch0pJ,%h=SkgC)VK]mV;Bgf%b5^Sa2'h$<IE,
%U9YAi*oCQKGRLA:d2dc#85<JOMl5HQlp(j0=@naOX%rg@iBl"bfDQFN#WUas!N%1*LTWZfJ,n,NaQ)R"!FbZ:8oE_t]>2MZCG>:J
%V9Q\ZM'lBlm3(P:&W-*(81nn0Hl14RP2\O58uO1W1amb>,dJDj*AKjEf6uOQAS'cS&0b3OD)lZ^El$n1/u/?%IjrLA00R;-K6TG/
%n+K#qfj2V=L\BE'[J53S%2[%i4&Ji&L*'ph+lf@Gq']h'gc8]s-/Eo(`3Cm`LPkL&1g(540"C)VAeICQcpK$?[Np0?`=V=A57j@i
%-QF*NdR/Mff-<sS&=j6GM'.B!^d(bS$rT]37^S7C3G](edJD=R0o!5l8<97*Huta16Y6Q@8ih[r.Nr?;cV4b*fMP*rb2Mq5'=*:f
%]kMZFeFY&spTAm,$Y)^?0[5\5BIDkBIrI^[@FZJjFpVIQO(>3Ge-CCIn@%h:5ki8IhRd6j8<\6\]'-6oO1(pF<=]VOJ\^Lk?%%,=
%em+]5M>Z)(Zk<ae33q;:)M-5SnTDo`@@A5VGD@U6YpD4d`r7)AnU=hcF_FfG2LP[Ll-4`lp\N$*J<:_s0d[S%TpY)T&ZVih2&bF"
%):pCN>tDW/1kb1n!m&RAi-XLs+X+"$URtIS+qpG[41uL;Q5>_$Y+Li#<!5?fAa([H!dFXdgOW1\2PM"anhDD[a3C=Q&^=T%2m`k6
%<q2LSo"d,d79l$]),'^OGt35Lj>J2j-KEuW?JQS^Yq<3@at[.h_JgCSL-p[7\q)1c&=#1[`>bjE6$"$0<Zrhq^RnVGal0k=(?MSi
%8#/`o,\`I,%kruP*AMRiYZ2;Ka89e,H^`Tn&\Vjg0;I2qWh/!>Dm'UVX_AAi\`qT`([M%jN6[Nrcb2cniirp6D!\7(5/8*c;_^?Q
%Ut(`]aPk"t79"^q\k!gK2I=B4&/>]t;pjXkF3L=pgb+qo#OO=BA`n_\.0cLD+kS:sK(#$An(/:"j`!g"*)2_P+-#;Kl+ESC2Db)h
%;CCA]1`>JeL&:VFV2;#]9]N:AqML0Kd6daXHDVupYFjk;X0`m"eX+I@qJNOQQG");^*m0@?(dfJfbn\9p=LGo("s_rHPIUM7W76n
%02W4\n'`0"q7RS8i6GB`Q-J(Y[^ijdZK3sbWe"'E$JHTOqUI@t1q+G[LI;8!/&-n@$u)a=[Z7pQR8e7/lqqoogHju+L4r.44;b./
%>c=Z&j#@Mo'fWOek<1\BE%@9JC/8jYG9ECaO*g;%Ii,1oCe[P`'>L%b8sc"Pi3frq[pDa+;^CHUL'3c&Z)=.Xl6Q7i[AV')74m3V
%^2V81?#`hOB5;5Y?BGW[UY'i=!n?#V:[Njdmd5&er%rbs-.\""Ktbi:.u[a#jtf^-38a((d_gtVgg(Y+'<aOn6^rE-cd.W#4U+32
%_;eYjA.oUU9W;sC+^C:XMH.2mJ,_iR_12h,lSSlVasf+DY.lT@7H'Wes6clR"R=KR`6I69k5LYFk0/pN,N7\;"Xl)UrkZFsU=k1Y
%/')>3`C2EX.ZjfF_X:To1JmU6j9#1brCX[p,d!YjMhPl:F;Q7S:-LViHmF*M)K[R2EFNc.>j>p-UUa%r(1mj&)!rK`"$23gT!'2A
%lG3)"RV%g3kmcALbrKD&*mLGto)jo4moqQb8^Wek?8/Z,R^!561ug>@['lR*KscSYa)18#5&Q;hl!ZHb2/_,Z`j,/WKs28&ZR6c9
%'>]T9J39FMMci&S6#4F+eO36M5kE5U'AGJ)Lr7Y@A%Q24]c]u&2Kf=^?/(oVmtqtX\QJfH&&[*d3cZ^gcFWooYkt/cgt[u`Xq919
%5#`qEC%4oSKWa4VE9T&`NeD:,pJB@hdh6$4j#T"dnXZddl&Z>AMWZlGZNfN=VZ8Kb$R^nq=dnCgdUHB^`&95fS3'm;cS&YUdQ*,2
%qb,%DVX^$%jV#'gSD:DF\kt0p]h]D![Ip4Eb$N=D03?!%WXEioqt)A,91R>Me\EU04)9sZ5j_#s(Yauoo1:B^e?:f-2Qj-:`i%X0
%d$sY3Ub*+Dg2jd04Zk7(pJqMjQi6]dMUB1ho'/]0I'Xf'&$NG.2@q\,Bt:(LJ@9'hlU0:VHof7>a684^7/A_OX4<UN-r'A0g'aJ-
%7`%lb*@9!c,I.>H=ZNrL-:/<+:pHC;)[3b[,T-2l<Jqeo24@2%CojKb.L`fZAk#+"k;=G?\$Ht"-$"3>[r?C!`fiB=?K<;KUC+<Z
%NgmX.m79cPetmfZjrf*k^Y8.QNKOrnj;kRGT1B\L1,7aVl\nC7C!dI-KK7Z8NqUreiIf^d'4b=/5u>%#.=AcB/LAPtO+J?d#31dj
%R2c*uBKCsEPme%Cms\ntC&&X3Hmb?>^2"4UjV0X"\$D7KSekJ65iLimo'*P\+Np(G/3W2Bo<AaP0HkPDakoU0\J>-pb3Z$Pj/234
%/R(0^e0R0u+!t[CiM%*K5!nZS8`As-QIs?:]k'ZjY?Ho4F&?)R.'(3XX:Ad\R#)q&(NcaTecUo6>VBrH3\>Q`?]FF=2=WS%XO^c[
%`f+?EWiM\cQuKZVH+<_oXEpVkcMn)<=URETBr\.2-r6"lgAn(+L%4\h4F7=!bV)9dEMrNN#dK9e<*R,^FJ?gbCsb-+mdY!G;66g&
%"*Zj-[l&.$B@V%[)cN)>]i7CdanG.N;"qSIC:trdl;9-qh_:DIoLisiMq/dSA.<ZPBi#!&L1'4%^AX-Q52Oti3?377%;8>A[&/PO
%(CQ7&YLam.jL1mj/\2a^QCD>-V:V#'>Z!)Z%bu?B5fXd:*2aQkTkh`4G.+uM>:m^6SjDk*]]S,(@\M)\`(hce(<!t<4mji'EVYU%
%F]s=<3Vge-r=rHV\qOeg+fqfBl;=t[E4Vto1+-4A\LE'$\MhSB5'A=GNRH+4i*AS9+u]RuEcs/YL#9eh:*@&1IN!lC3P\)G#CoG;
%UW0`EN='I+bN)hgs+ijm*Te0ehRXpu!"0:l:7`f%NcFB]gt4@6eY=<(f#LXgEjjpZXkkj:UA_d"n6H.[XkV`s3s[5f/tlng*Y+JH
%*YhM?C=`XE8SaB[!g+dlT9*9J,_q[0-]-baA]LX[Hd\4VD6.YIO<"YN:h`=4jITr8:^^@uI6?cXdS6chX^[pO_HREH3e(,XgnDA`
%/88n?#HD"V6tO[d(@a^CRa!ca[%QKUKlX9/TY.iKW5rE=X_47(GXJ@=k'(o-I"%B<B"ODbBRg\!M,`;I6QD$7!QCM']ppXSPI#kI
%cjh[M`D;BU`UP^-&e.:;[L:3iFVslR0"5m"R+,J@$aKQjMCW<51sM;Lm%<-b\4tR=J>(@q"unq"#+3gp#kDrp%FXdrBeN!jBDU=c
%^!Tll9d;!,@o*Lu61-5Y#tTJ=!I#GUembhdR7JN%4RXPUf%)[jT:2KuSt\*U:,8\WB-lY`VEVlOX(1_SoXNu5c>[!G7F]&RkkW4S
%`6:Q=FZ\c]DMLg>+7'E(KgQ<F/VRHnoI8\J?CnYfC)Z!A2h1!kW*LY1M?[baPS;56oc@S]c!$jKdTi"ta.6N'\JEsASAos1.YC.C
%)fk.V1Q-IA2MYk]Y;^\s&d1?IXKG_VH[WOI<=[_'gkPld?:qth[+B43'$!M'D[Bq:Bq[1:=qSCQ&@P5+n0AP!;CI%'ijClA<MB7M
%4OfraNr^i<C?,TfkXi^!ChMeX%2juQO[)?d$+CBSmZcKo17sJ2-d(G+3TS;.:<`68]td?JQ7\CJ&I7`Q^g!5sb5KVT(<o79Tp'ZO
%)I-"$Uc2>f8/1'026gS-(ZZT#BdE.>WFTp=PCR2[p9P[W.c#BCqYl"i0ZpcHSXb$egt!+o.(R$:%Va"!+JCZe-P0-rl`k2L-X`i(
%6UR0Ufk%e+@Xg0>oo/U;k6j"a?,M(Ka^QYqG.C?e+Lc$*g1K5RoYO588:,:@<Hhl2ClYXcUm##D0gG<llMW#7_Cp_b%jj&Kmqq)5
%OhWV'_!Lb)%rS#/0>q;mb\.(PHNLKS(3dTc#IHq!Fagh2$.1prm,PPl_5Xo>b+5_Y:oec8b=lmp9_NL">@uK[\j!m]8f[Y"N11"Y
%ggm7^[o/GY#]2RRLP?$%!McN+.sL)EU1?E)P(fd<$fADUO"%T=S3,p=RnqGl]60sR!k>(72-K,q4=OouHqre4Nl'NAel?CNRbg<?
%Ubrk/#7#R3QRgc>hEt?KOR<S)PRaG=>C.<uN1;18c.g3g>Mjj1&3A7C:AQLY.(7GF2a5Vi&!jW@HEV4<$L2pdQoNf)'\u^>3_RR]
%I]H#J-!YNgG&r(?"f;6XM;6Cl)Yp-J#sSU)d9Kq*L<?k/L%ogVO'5CJlXNFTiRag_8GM^1-9"g_2XsmujD\BI>Dm;ZUOhaP'Yt@*
%*M@[#921Q_/,EJ@K)QMXC?1V:7T!MjbL\=2p(3;:Nj3TQIudC(,r[aiD[C#)claK=oZ&mm-lM:X:^gUk%rf(%RH4Yq+Zm"#^,,<c
%8DF+8=RTX`iR>@-`,"P@/Qm3:SieusCD5c4s+)-#[h"OJZma`!dE(`!`p=8U9oMG01cP(smkhbnEl>07W7K[n@);MiUMCAKcV2uV
%D1f;*X]"J%k`hQ9UZtLAmEUB;NjAKlj.ooFR*D'3*BbODG7KYsHE>Hje#7g#9#g(O3IgL#kl:>OjrEtFg>OdG#btt,eE:A;f_\Dj
%cp2\.cpYfF+N3H1;)TA(Qh)=!@=@bi"97jj<dcNspc)-(%jJHZo7-[NNBlO5_k\5>21X`I^)Hc%PlOgXd*D\dA][%:pgrnjn"K3f
%YeLO&cLB[,64Ep$R;Ml%M89\CK',At_t]u$Eq9sdM`1,()8$)T<>6`$r"U)8'Z_5"?j3>hW:YOWFR27Q!e^Ef:IjpB(#"-5=N5RE
%]74@=`BW9),h_tB6i^TZ#Y<gKnK%EMLor\^[F.GQIb:<tC@@rTh$f!&"$1b'>Ve^?\:IH'gc.ciCA\&HFFOVf0YGqN(bL-p-5>Hp
%)*SI5ZO56TB($-jf9anr5n8:9L[u53&59*4i[K'6>oh8-)EHJk#Wdim5+MB$FY)V:BP0MrT>Fpu7C1_YKt'oE1S->4^iPCl_B;UG
%mDo7GI\3CXq^cVKIr5bZgQ+NtptNQ:%/UhY`V*dU_Vs,'A1K]Ialk=ihE05:@$%(u?(DJu7^6R4>bQFfi'GE7-,'g/>#5bj:6<k3
%0sVpAn4%"):-f[CMlO^on:kFU=TUf/A2moVY_Ac&ki,^,%C3XFq?!am"r0F5d=YjX__InAas\fe/-;km*,UrY6#^"-?BT"Q-OP`l
%'tKteYlml08j"IfP7ZdT!GmpOMC](J3;+)=XMESm/B:?cOHDrZ,R&Ib';12;iHQ--`1X'EE25-'A0m+m(_dN7<`"FC^e;%kjV\n1
%:nWXkfEjhUBu7U2at'IlXXa*qRH4`$fNjYbg<-B-;?Cb^c>MWQ?M<47e4`]'=jcZ?8.[@Cq05>Ur'hL?:BH6h.4V+81sQ/6]W.VY
%6splE$EkZPp]dN>f[:@a1<2A=F1a(F.4@`]h9,9/1bkrG37rfgnTG;$.*?R,Q!%IF%];&h[RicI&NR^F?msGN!tuC\1if)G#e-K6
%Xsp_.)[,FPg)%hr$+D3XQ>)Nait610$GcgVPnejl'`\8h5s`Vc+M\($2@2>Ii6)?CPQZ/@<S8-%LSkRsW1Z,;KXUFk7jZ;.!_]!c
%:)GMBJh>7kD&B$(UWQT0M@"3$g+%*:69$GMXOG,/S8X@2$:O(d$61F'GbQK>:]\e:_W-93.P#\C$6"W90_cV%@1Yt++EC=ZRAU,J
%!6i8OPuKL\)rtO`U+`NGnh;)_&5bl];`VH]!(72oB0h_]]+n&&8;jDPN5gHMd2%SJVe%-XC0LtD8dSA2H-"JfGY-t4.R83+A&tLj
%fXO?2QU/f+<.(+m'b3Bl`'aBT$EjH2/.S*K$ate.6q4#`(oo,P7TPAjU"FoGi$QK2.uZu&Go=6ua2;J[E'slWWXOrS#\k!:'Uc;X
%9*X3F40>U/4d?9'Jia/(n2?=r:6A'\,`&NR%$=El'I$D77BjQX:6\%5Ch&(%7<B<t#kTQhX2lG(C,IBm9bO4_-4(ZFh'>o``C]!C
%))@r)J[5Rr7][m?"cW4A03J<15ba:9J//.6EAFb^,Mih6"EskKWPn<UW'Q;Wo1Oa;FF5PS"9=^q8fS1_Phif:RV:?28j+B&=,*tV
%%Kb:R8F.$FOaolR]qFZu#p[e(*Y1dX\=g^F$>j8""_&-4'GKk!<-ZPk$uRP8(R/6,5UXA]_&*MTRj=:)Z?^D&&s4Y)1=.&;;,W#J
%-j@SO75'<NarEHM]+q/mN!Am9BT&sB\Af'r-WK[Gl8rDZ3%PZV-Fo/=TKZ=*5]^KYcQM[Va6AIh("ac>%+,]09`i]_SjB,[8Lm>6
%'sTF'(ZKF"kRuMN;'(OEJ0H.5"YU3`c+uBT;k+!_5S:g[UOIjp.KTVR[?[H*nW>/iW]]4]o+Y$?O@rk4[";d*6e`,<1l"3$#=)??
%Ld]b>.Ytb$Zm&*dYs$r]!_5eM30i_cM+%;=-O#gDD%i'KWmBT`6lMDbQ,C[th*Hltg;F7:<H2=kaopuZb7Yg-PT--\6K\q+M(0S:
%eZ(dEJA)D\^jFgd+tHS3LZkKSMZ\T477jlB!\+<c%W5!K3.\XP)2n]&+=PsVA9]45Rm;pUqP#/DLaDml)GM>Pb$_."_E/3Y69PK#
%N?m1s(MQ2u7%#F]'P%N)Js,(`UaGZQ9ER*PX>;9Ge4kI/?m16?iSZI!*2a^Oo#O0)*0a-A#l[4[DW-,/KO12Lnu.m/U4fc_)^*#V
%aCIE?CrTLZJXE6dAkh;K!!7@A_dpQ6g)o6+all$%:b5'JBP`bRp$n%#0kL?Ogp91&:UP7>:3@7H(.nK2\4M]W-%WKqOs=O5Z*Qr>
%9e>hD,Qm+A1q+\c1s*Cd=f[M0+]'j+8,\@%[S?BZ,tLmuj4L$A8qQGfG`EofYlH9cetPVii+"b_Gc""_D,N&JL27+]PHgeq(*jWm
%I3AZM[_EKlB#dSs%-PES;f@8B#XY3j$-3Ak(A&'S`IU4XN'/A`'93@p.Z:_?jZo2DC(:n7`PrM,4*k7i`WBod8'Hb/ZGW9!`PG)@
%E7,A;:VhXI@1(5O3-u"j*q4\IMcWkj<l(AmK9.?>XTE:e!T?=fHp$W!bm)1UKYncDRt)Tdh1Tf%:_jC#A,!r)!Em[jU>6R46bA2t
%P;IjR-/<.<CC^un5K6)k;&!bW!Y;.3IMS?Qg'38A/LF.@$C4(iBI.)?KHc^.-40nd%l-O)"$b+/.haYl`4k0D<@H5@</<,Y@_s5p
%9AL#3=i.[`W^%6COg8arEAg_6`@"Z5-'GeF]Y\(=#.b(X(Z.c@aC9Ima:R6BBdjE646@!LDEJ+I(=O:c.JO:-##>L_&gjNP'g*!5
%e(BPS&[jH^Joa+l@K:Dr6JNOj-nDYT(b\7?-.8e;f<H&!>pb(/8`m6K'j/a?"rS?="V/BlLOg%D^g",jg'K<L6U`4&IUaGY'-QB^
%rZ/@3'#=9.:Vl^cC_"5""ToDD6X[_,;QU!45pahQGjN7-AL!rm-(&tWUm+e4A-jO?``C0-8QI>b.Zd0!W8EP!S"Lr/8mi31-!irm
%]E@bLj8rSp>pAtW+Qj@S(+i(N9sP$M$Og^I6IIAXoJ!h8,L2C:d*`7u792d_#*LYuF-n;i?n@@mV+_c$E&-ee2C&Q!/N=,[6%TW:
%<*k]$'BCTq;$*G`KBWP=D:6s0(hkMs.;XSY.aTLSCBD+>Fdcipp/Ni`PHYd;)9=!*%M?_A(`b2\Tc]bS7F6X8"8sXjLI7qH=?s%q
%IZO0\BIZMO"'h=gW`7W42'=5B<\PN:3R^<F6Y(Ea%>0&^<Zm]IL;V)*h([+VKnV\%#alRLLF626/:c+5)l%e(,mdikA1So-fnVuP
%0ZXRII&Oh?1dAg]]&>Si&RdYT@6B7.5bpsn.[piQJ9W5l/q8DO"*8j";JC64,?Zt:Bcc<;i4)r3+pB_;&@Iu17NEG`-:ZK^]W"C>
%1BqH(*9?UPj6AoH,s"7Dp.uqFE.#/7',S\Wc]Kn#T+q#m@nWpbc%$&"1/]K.M(%'-P:A@jL-eT`P;NAGA,qDQ)cL7ca4=bA4"Nr;
%RSmY>K`I.<6`*L*.T1p-CSN;tLDR('8GU?$T`gC8&W-60&I#hR!qDJ!Iiq4C`k4V1)e6GO?L+hPO)Y<_4N==4)<61%T2KuaMPja8
%h:WX32o.G5370I`G(NME#f$_!$EuRMGs$%P&d6anGFk'kQr@!a%Ic-7!ml%>"uVFN%iuIF">G[G#!*hDMh4OjE&;Hm%B`&qR*:F+
%69#CU:h(W@8GulqlZFW#H.#+UKIoHsh%^89#uc7I5lV3qJ:(6t!f$sdW>RZN0R/9[#0b(ePW0,?*%@ei'e:)b.oahQ%1Ln130.=;
%*dQC\O)aZQ!l8ik(_]ri`ZJim:V])VapoE%MCEG6[XuuEOZBMrAK4ji<D:>p;eV&J1eQsWd=[%3@4=>nM(2*('aCB%<)@;U6/TrW
%Ukr.Z6-pluWoWg6M,fa?Kqi]SWacR;T\C\c$t^QV8J-;tEBtH\EKQ?V?!0`3BbQEUJ5'S!Ji!LPHX.Mp*)'NNC6`>G'H9=(&iE9Z
%1LQE^d(GXNidrgtKt:P8J;PK(J<2T:Ue/QoPVgLlr+#JdH$^$((?ca$lJSB*,0a79&L/6/;C0`T.OoUCp&?uFG!2-B8[d"C8G+(q
%AL'P+Q@FBH6L#a<PlqV:+J2I\koPr-))O,`inrd3/b>priO8WT1R/L+X1gNR<U9u%%sN*$A]r<aTh?%fmAr"*DH86rh\&?Xeb70!
%6]uOC<*d#@U0X/FkYVJ-=s=rpp=iQI4f#Hb2d<<70!$X<`62@%'"(p7rb^l8*n"QH6O80<dNcKOHCLV]>a(P0/L]hIBc#(5a's?e
%]QR2JW,#`m;1t9K^KjH]8=K>'oppV3;Z_p[8Kg,^r3cHMC;H$'BuMM*;=;CE;($5)-&U5@D)m@J\'"r\B+0$)&;@Lcr`jA-qfL2S
%L/kOlQu.1_)r@kOJC(L-[LP96PmOQ!-%sT-9t;On,&M6XMYn;aol\&S:h`SqgP3iN5,dQmf-`KS'_5%6:J&t9T)bTP,Uu)K`SMkT
%4\E*\X7"kG!i*Q<4,t&3>2nm;i.\aHkGeM?OID/RBslCbLh/3u4G:_6G0Eg#Rh*<*(P)&>_ZjcoNarG@$q?'JL(m2uim>is%bIpc
%h#?\E.Dqr@?QiU*ZJ-rETL_I,PG2I=/O1s\^VXQi$YS+@(=[QD\#0#Aq$gS`^I/(BA8lZ78@1f7b!i&4_Qo$VH.ak&,,e]aFUFDH
%LXBbb;i=?icIA!MDek\b5pNE!_Uc2AZ-6j;qW00cE4)<u\-LIp4/%H1W^PM-I)WJ](:(WTrJYDDQ>6mk@itj:!)\XN:9A,T;eW)9
%0*JGnV9T&Y70&\tC7XWHd&tXj[r"m(&u'rUV`qSG+$.RH1/Y`V46j&teBt\CAtAh.,LO".LeCChLHQD#9&%5.b@6KW9<*hP.pH!8
%rah7@UlWI[8fW1s</H0&cQs4N.m%YW8&c5fS=6Tp.MAia?*eE=#Ft\HleY?)\uBf]%lSg_q57mE2J10VG1:XR.S:gWJbj<<Oc0mf
%o'8D4!1\'Ii]s)>%kj-0L**K&GU\a((//GDG:5,).IoJ-QOrL1q^FIoc%m,_7.%d=>5fQ?2SaWa1.I$>OMqoQ[dqJHQ1r!u-e3Vq
%_^]r?R?'N"l@i/fI!/B4=oPWMlh33+Dt`8P3ih1D.aOEFZhDZJl7Z[\`?2_/gH=XGF*F@nAY$O%BE2C>3',%+4:1=OU6=[<mA\8M
%Pb"uhIEd'&='#noqV'?^^A@TLM=WRoNudD23mOrp!)^?Q>RkCb_u,Z!-bR6-*OK=CBWN(>p]f02ph:n*AJZnB0?KTs%hV"dQ]<>B
%'S1s',KA:_Y]Z8TgC$/uLd63I0eim7cA7jIQl3,l-=b\m#)#3R!j7V1lA4K:+7:nTT[K,`^@BH!V_c1I?%_*'K'\Mo+R:`6E_^]T
%)+qF:nBZj5GCc?Hp5Wc"\]0hK@l]:2Dm;="SRVZrQK$_r4:P*D6?Q#Ue)3@tA&9;nCq[p$cbfI.J<[qFc#)p.C:"8bg^A]ZL"9Wf
%d?o2s%DI5[U7ijj/m)#JbF)MIF74?0^j@!B:k5'ODuFb)*Li;CG;CEI]s?`B@q1!Ih+6`QXn/\lXV@:B__17pBI<d0j1#c>N&D,B
%lPY^^R'+'kWY<;?9-!E>GB6N'k]E5?f?3X"*)Fh#kt]jVoacI@dd]:;^XRI8*Db;WLOI4rnZWNWgiq<iYPrYBI>G\T&fej+K-j>!
%_hC*U35iX-:2n/W@6Cp:_/rrOa$GP%/BP_u*,Nb`YWVgRM'72S<dh%B[!j#/feK=QU2S56'>V,1;]hHbY*fiELX1u/$S<hXqm?F\
%ABadOX/(%3!+"km;8;c>"#'Ac1o21#b_s[aJAun+""f7j=\Z,C*BsQLZZsNA8B?"EE!Ch9?!>%\>`Z'4/e2e=\_8;'1aU9?`W;1,
%L;%!FicDf&fs&1rj?$iMUj\PNXjO4u(:b6$>!jIeA/)=Bn9NX"eJjK6+?>"\Qhm;4/3J.ZXUmoVPPEl<[.YL5qt3/=UmtTr'.8^O
%:G.N`@>,-W\!T"Gi'jc_m!W'de6u)+?<WX_f5-$=od7=9au77L&>p\o*4eSrg/8$!*NW;],Ockm!etA/?"mYJ1_mJsgZr6&1R7K6
%A##$g]o[B&7?'':D'Rb(>;q.2)[h_*A_boBLi&+<@]#h,6&MBWhJjD$rI[?ka%3X\Ot&2=[BBmmG%&BNKVNP3;NYW1#'S-Z,5!pt
%_D]ZT/h.cH-#s->@PI+E%8C`(/6IQgb4WA]i"$*PLiYnIWFk'?;=QtP2nV!,'m=J[k:EeU$9Kn^S^1F,&n$9\;f%$^!&g.5R!&/O
%[$'^H6T0QNb<B9r1/5\Q]\.G0gKg.q.BbF+ft5F4=tARPFp],Bjh,-W+K]ha\e1_SM@0#:%GQ8UL!j8ZY/@EC;8Cr_VSW2K')&EX
%Y%S0Ua0B9b,E@/cm[Hp<'6ff_1*T]i@8\S2ZjpkT">lZ)2_HLuTubO/,V1gfo^_+T`1c'4i)XEP7qbfW0(s1WQF@n`G&@pq%&R`O
%,dNfA;7!WBMYo%7(S7-Z/2$ZYR]c"7YMgdn.NHk\Ta$?kDn?_l$qRp;34j7_1uQl\0+gJQR;j18\H`MQeM-'BeJW3%-]hfp$ilg6
%<bSFuW>]F%SfF-XcGSPB;2KCI-PaQG5Kn3#D5eruHd&2;Y$X\<2l&_Ud?H391Q^mU0OLO.$5t6p4"tC-Je#3=>oqCt!:lQB=[Ll4
%6XEI<Kah\1g)]<Yp(l`NV@_"[9N!IiBLa%`^#7k@p=-P+p&`l-HT$N7DptGa#kopsDU)Dh@JiL@C>'X4E/.ei@;+C.>#':>,Lp82
%_`M?%d-%L^&_s'_)dS_n27)UlTQWZ/oXfCVIBQ3*S(b:s0l>I%3Oa.[-qUP00ATRAp-G!cKs?<)kmHR0GPksH^L":jn[;jC$YX"8
%bhQl.7.?UZR._.K:&7nU,Yq%Prb99=0p<rK+nr:=Au7n.N"T[`"IU[a/"BF(7:E,P%m&/g=*ok1%\+?u"77`HoqDu3m"TZXlH:bZ
%U[T_.A1oOVkk8sjmgi]jF#3&s*-fF5OuE>\P:.%7*g/Emq*NeM1c$Gu?M.62hLq51=ra>d88fak,c"iP;0NQg8!k=m5.-j)l+l$0
%E$<\TP/^S]64djm[1;d_Y/1.b/5EP=QDkaW*dsNG2k.)Q[\LOp"EO,XBb("Mb;6.<drO"+%M=!gU/n!?P%=?V/f\A.3:o6da*kFj
%2nV<IdjJ[$$.+>6=7nr/ANS@BC%)Hb(JrAh6O)o*#=V(Z1no/d9l`?m[.4FQl'2S%^_N(mZrSN(1PeLMk$0jthlhAi-M(nkC3jT`
%o$lS?BPL(Hk*M+)m:fZhPEHVPd7>TfDHSpG#&%3.ql(`GkK="<1LX<V:_UYs,Bm&8gPgLZ[(;lkM`mbqhoeNC,%.JXV+eseg%,oD
%P,a6YARo*9G"Dd=rtqZ9_dZjr^0(fs-Rj3P+d6MVW$/bV_f"8S1jetR4c;5@N;FbMQasLp'`8)\*jdAR`Wir=Pp@,=bu2"nf&o[.
%)30?ghRW<PGBLnV-NeRD5)Wq=hcfFQ'HaR\mI+;UQ^?N:^R^(^Z$_71Cs:)nD#:[nd`T@Ior6iGR;C'1>tpF]Xot*)?4&X52@%b_
%:L1K-faOGR$\:?@5uX.MaBj61RM?NB=OJHcEudfrXpa=;@%+Ef7M7N6'N\^L$Ye"N]4dT5EK;cuTT-A);d5>VZdauO)ArhAkr<f0
%[(aR^Ak3W<K7?MCi?n-)ADL8=G6,\t^7%.r^`AW/eYSA^hVo,Pg/f6!Tn0GS].RpA+L$mf`MHY:D>H5,h?tRO6irG`G_RgIT<Q*d
%80]n`.%+8Hcm#a`3UU0O!34l),$8KW?'ngF-drRB20iN/,+F!2>7#a%`s-^5V!Sq^?pgb'dl)eDGSC+78Mj`:3XP$^V:"t[On8sb
%mVCWSXZ#$rKF)L]aa>-RKi#'nRZihIoe"]T#BaGW.s";f8+<d5gH1Si!blAt6N(n^#!^'FQ=.nDj3jjMbX(PM4X-c9*s!ok:YhI(
%L5j]c$VT0fD,#p>-6[g?a(WrqNe[E`X/>8A[MEnMFBOOXe5%er!hI+eE-)^I^k]ssbWUc3*SHGtUp+HX9?&P4C;XAVaMbtd':9%m
%Beq*k$_?&.T"E=hoo5I>R_.4l1UFb]:UZ\R*&_Y>WY[.YfMdNY[G2/']0/@M'*?0f<q$[qJ*e-d7W#o-@nIu2;Jk\$^-1l(:^ig(
%Hf;QfSMtnCk547q/dmSaJJ$M@rUHa2:2nUNi2j,RR'Tm/)@arQIc`_0@Y)2RKZHkg=E/$e_^_(36!kgq%K9T".cZ/PRj$`i)*/;Z
%C,=$X`]CI3Q\t!Q*P)pl\##hD$:h%Z*GuheCg`;8k?rV$N<NIqDmK;!4t;_0eumtjFbB59gZ_,-<RHKm=8Y)U1a=;8]N:SHg+R4O
%3f.(k>B"5ArS+:/(!Nl&Z[H^b,/IpE38]%k/l02)nuGSK8NRV\4RS!pHt54r/*1AJSP$p=?V);"6^V/R;-TBN\tjsZ56<dS>HCcd
%.FjOJ2HmGF5RB?`WO-&Cl1i]VcN[:_XDc)fW"MclK3p4+h=kX#KPgS.H#=<XPmc!]U"a:eFD3,$:s2$`'2Sadp.5B/@8d;j[27&l
%=>lq9\Cp3'a"BkEJ=P;tZY%ch,`l3_C&CA_\FclQNfPWX/!-'2':KB"MmQr1H[pl'8D>h"lqhR&">H$fg+n+@<Y%W2?P,,1\qh_F
%&`RN##+Ul=\cmhogr(N+NAJ/3>`e>Q"]Gb9*!RpQ;DsiiURdVqFJ3ZqQ37m?!=iQH[K&phGu(^#K7lp/I2lac/4gfY?K>5C*fDWE
%4l/%f[cL^"qX'B>Z:'XfS6BYP\SF3?A'dDRK$j(Ak-/Moc]$T<&D=&jSF8BU[BKm`abTpui;PKE,m$7/TaPM*p-FuVRC%QDh=I/7
%^<t[$FjG-D6C$jQ6Q.@=omW77f5/:,1%:UVGHkgJj<l_+ITS:TGtc3H^(c17pDN\&+cN4Ah9L$YU\E$6YGH&6a0Hht!NQ&S6;A<@
%m=9MW[a^aK/_M\\4rbjC<'N5(5pur3l*/29Zgri2%$AprKM/'@5U2cP7jKd*UaSJi1'Z3_!Am-hJV`E*W#*@EY;Qo"s#(H3`I,p>
%hTQs2W<nVaplf<4EYL\q,\fmYJ"1<=>j,!C%uTQ-/@$jo#];LJ=r*S]b(SudjeUMj-hLT'L?k"FDi]>()27Bj)*G75A-2<-)f!oR
%DcT=4$j3d;aCm6.=TNPCpiH:7(<),tfGbj)'dj"AKb:tBK+jO>UDJBD_hj(0`(XLF'=oB'Gj:;aX_l@U1&s/DpsA>t!dF!^&*!nJ
%Cl>_X*!_U8+RlJ]9L^-X#(P-7fo*@Mm1qW_a+QA)g6#7D.)S/dG5\HFq&_K4GDe`C<JdJiS6beupGmTMgW[sGGBC_WJZk^+bIC'p
%C()'pM_?a0f]Jq3$`R`hd>;R+7c^bt:9D*af6CWT-=]QkZaNN`B%GJ'lLQdYb0T\\_joXk#CY*A&XJ_K+Ti6W]Gt"-;%uA>)Z^oY
%r\.nL9,ECXc?luul%Z5A<3/o0242AnEK^_NkN&Q?F1eZ:?h:jX`S31:Za6)+23q-e.3-782dHFNLje<EaZS&F))pHNLUb1:dAJ##
%%Il3*WMu:ke&%Kh'oaY.#]o4=%X.(ZS3@XET[H;,,NBLiAn-)&ZD&O3p19&qNd1Xo8je<>:&VMU9lF3=Ek\(8FOr?'\QR.2Uoe6c
%:'#LXVYME!o*(4E?K2e9JN>a,fBYo"*lqdIjc/(uA.I5X)(Eg=YFQZB3u-$Bd@s![aFi9fn$:GX]KSb@cZMt;eEp_'MX&tDjtf@N
%0_f1>8%gR68PZrCP^bHL=:f@^,pB&DVX4fcfR=HA>;4!'<fRJ-=L6nFBgF3V8O7G1NCg\9dM`6q[2Eg3%4.>O!7gtHO>[*jk-/.D
%-g?*,?eIX.'T>70EZ)NXGX6:kloCQQGf:inf+"Ki#1AHR]2\[h7TAEFU!=71*glpOg.Dg66j;'XU\tV\>`%5&W=%j?3Z"\R4!X0$
%`(2"."gEA2GmKRnMah,C4If#HIRKLRJ/APP7E;=>fn"H/8/->J'+fDE@iGi!C7-)Y=!P01BX'18(+e3L<1X;bq._J8`_XL[5-)Ll
%>ulc$8rb(/?6IiEM"n5@_ujgt+NYRG\P^9YDEKYq"1nE"[)=1_p$jOdeUJPWZa&:N]T6D#nU:L!1i#.'bD-Mn,V-IV%\4;ILpP1\
%Er?nt[dS^M50"O.r7EaB,M;45,gRUmPA&toOuu*uIsZ(YT!$u8+.eMRq\,%^E)#5]]!7jgle'7l+miLhGJ!d0rHYs`+.K!IB4N$Y
%/YCd?OMDj9fJ?:U5s@@ZC9Fc"3AmDoj1%Wl]\RBXZec[3m4d`Fbo*j@bWMml+DDeZg`RV,G0k7P9_G_WMj[qS1<>ud:-IELfZD'j
%%#P0nB&]%bs*!J/&!KCmN%rSgDq>`A%8jBm$Ij7>#;%_[ZU0FV-u!%S;g.2CVHWEX4=B@e/38$/&Y3=)+-k'SEHe-?M"B\r.-V&C
%o&Z91'EjId'Qgsc(q1p*'8^oXp3pQ0M>og0"RN%Ana;e>ShD3$]M@?U+=$'c%(\?<U+TdL'M'9%'oTu&N'U)dRa_FS8Lh:=:,)RT
%KV,egcU_gV]BqPD$29CdG(9:*5<6ap<9=]9CEAGtK,/n)Vr,8"6u/EWm8:>U@^O=O5,d%NhQ)%=Ng^oOC@?D">n+8*n6$"84lG1V
%AimNlJKHs5ZO>d(B^bIDRs]G`G!=[eO<5rm@nK8\l,U4BDc%u3QLufmoai'`ib)noD9&%'PqY&#)iXVfZZ&=7gt:1pY21gper:46
%nUrlF0[)Eck>"He$#;`2m:=!m1q=QtmbR'^Gq:e=Y3,?0*!2YNPbVOn@,*]Am&N?3aG=Z?0TfrE&st]")Wh^u0H%`S-hA;:k)fR\
%f`Aj9F41Cik.\,"%uS,c#]O;_=>907>2Z5"D"d<B]@PWL#7]9.lQ3.apS[Z@)c-6'(ES7hPBH6>E*^2\_s2Bt^CEohi=^L5@q5/g
%B_7%G*.3*gQ%*H8S)N\;r1BbegsQDpFSjt04eq,rq"r(FG)6-12Sb_<^^ZNo*R<Y_0oj=Y><#(&BUGr0=<79[\it:81lLA7g9CdM
%H[:aF#NR6@h(jn)YME-=cD2OT(ilp7S/e9XYdaTpaNEWK*3<b-qs9NB:GVUZ\FuoT/r/1mHM`rr4*CJZQb,A%Q`oh]g3rh0_io;s
%oH((1$2s`DM0j(0?TSH3pVK,j_2`UsPWmdk,\9$\9qUG0E'[dLkS%^qa[(':W]m90iP$?A=eA=PE,H\.mP>3R_t?/0_*3"ojVU'Q
%j;VZULFV`IAtK4nYb_k6[2CP$s4UmqqfH`-EHU'kdgn>R2=t_ca-c`.$Q[*^`sd)=U^,N$=D9]ll4`H_a)O8`YQnV1)6<HRh`;J-
%B3a:TkLUj]q[?qpC$a3/IGXOORlK>`"2[$*N=5"GfT-+I3De-[bit-^SbU_I[<iPBF(0ZKYgA4VhF!>oLsi_iPLe\<J,!.j7llKj
%FQ/F:>un5J4at7F5.JfHj8%?Kmh\B=UTYP)lg`a?17Z7MF1??&"4*n13Lmg9pZKs,*?Lop2KW)Y-[X8"3'JKQ3iko.>PX52H*B.H
%:?OqBI/i?87.4qiUWK+'dt=(R10@>HX3ZNK6n7n+muW8s0g;#H*b3ls2Z"J-LFhhsWdbiiH.&l,P.&^!G%fbC3S`Y-H9=rXm-1iC
%*W"tc1%gp4^[-d4_pTV>*oUl^aR)L8O0H/.>^mNCGJa#j:u;TY+!^lB9(7d\i/eTl$A6ZIE(CQgF2EdN]@$I2V!j*<*KGZf,]FS*
%<Xn'.aSL-Jh7?OtIVca\SI'Jd`I)![6U5^+C*%TB-$_LM0UFP<1<WGdfeFkX?PUA"(_n,Fqr7L5[XY/>\3,VCCmbkbNr!?_'f<[1
%RT!;T/AC6]Blg;bq'Fp9V;]Y(5AJ7[`TA^Ujf$kr<d+,9\N4;/S`6l'K\?:opP@(tchK7Z\&KQ0>JW"G'^papme+WWo^U4)AIc](
%+i=&n0UG)fnBC<J[+B5F%C^teD7#"LcL$e/:R\^n2U*\RG#%<d04Bdj_2)bCNIRbNGrF6iYk)&7fDi!Jr)cL#PGR[^8"@.9IK:+[
%d`GW%`@E4n<ZH,EP.:0XS2r#m2&*61b1H:?6.`o[1+k>rHFfhd@%DG0oB\Pm?E4htC8`H1Q3b_[S'a?mi7CrUd:$.qTV.nl31.m(
%1q:0X-FEae-@sJtA9SW4&8dVDl;1iL1/tAq^ql?c[C/N1>ea:b.FmBqogOlRbm'!>7NcAQjZ2"c;Eq;;W"K/YV+<m.LsUc*Z'3n-
%P^33aVeKt4jdt]KYp[-pI\TpX5<TtaB\@&b`[uni''Ra;:B=P<M,R,JKJqliBiD&7[R!0VY[i"a&tu!'7!\24V`Cs<-4r&TJ'q,&
%h:H65/*)'<9/O%ZYn*^`G6eXG[Q_f`"d=db].D-%,3,Cb\kG8VVuk]bU8et:F>Na$n.h\RY4g6:DmPC@8:ajiMegRTf7FGX.JO'D
%SG(`KmCsK)_)<S_AL^;.!N%6QR[Gs8+=I@=87D\(B39"2H8Yo^FWJ8(#_;"P.p]X6TJZkIASKaRJB`gE>21YPVa[IgZOgM^]:1+>
%RVHpqAu&frApLSY%g_GeWW;uX;s8@;>Ap6\+7=mgOD)+S<hX<Vij+;Z_q99K4=V;aNLqfHTEiCLBjI:l^.[2@HD'dTn/t50r&C,]
%B2VUV]GLd7%O5e83G_-kr\&CR<d(m*-j@s?<-Vk(hkpC9"k>6QmO1eP.RT?_XC)ot/o&eef5Zt;dNBnXHM"b10as,HZU\k&lP(l?
%Lsj2J9A,7@G*oj&W\n49B:@68<S]#a9`7_@=XK,^SW,?5kVUTYS3rkATX05:h]\pk/pm>WM&cpcZ0dQoCIt\4dn!6sD_nV%m8,W$
%eO(g4Y[D=Chb%;faGN<Mg$>SlT:V&:SF1c;?_a_fmgYAK2G$CDU]&qOo-UBSe'SM[,<d'S3pg2N[]`GQ=Jq#Bd0]&Cc$YS<8PWcl
%HNPVl4SSQ[:6XM?)t0i]?'=?f(9R4)d@tanbrbE6Q"!&&cT_*'$L"h-^>c^7)f=S$FMuH3M@[<>ns&&rJ1erFCLHNP'SC@><#\r`
%<0=*ip-<H`jK4aZ2)^q'pRiW:/t?Z"g<iS-;'A';qR&f#?KH);3)HeDO;4Fa(`VLR#MoMf.FAAKWH7!V64;011Igf\M>PQV2/mtB
%45$CXle)gBC`N>PAm2GCPCg*_Am1#RW21Q(Z`WbF=1@;p?];lLhp`Q_`PA(GkW]U.`0Sbl&CJsr/Oc5ed<PH>BDT6pOP4WLm.FUI
%gN!0W.kdf=f@f!GC]jBkk$UrBj.d.Ug#NT,ot%u14l_PDD=;3qIl(&Gg9%r'=hX7*:5d_.0A(J+33RaS=,`g*>L2ml;-oOiB:^$7
%R<6!N_g9JOZA06!+^gl=3&ODK^nQYh+'iLs7Y@k:"oQ_]UF@<bi^Kg%fohrCa#.We'9+!#X6%^3gAs3Ige8,48dRsb?eJBma!f02
%[@9("*Y@GE)d;BXZ4ZdS%W#_"@EFn7;-A4tr$#$Df6^M>A'aktKHgK#hfm^\O<9Mr][_TF%JVUX&@bqAmbV>J(KN5l.FoUo0.9pb
%Q/hs=:d7TFpRhr_2R$okAL':%q8.qp[FcQm8+6@]=/Sgk!-*9@(!(PuA`Po2N&Mu]F^oZoWrt2Y5kBb""udf(s,a&$N:,.ScR8fX
%GE$>+<ZoM2#YQJO(DVA,CSpcmV0h(dXTMB%8/)eo"SO6UJN^:r$i>-&n)E+7m06E*g4EPmm=N\?n=!dWGj6KF5q%L$27QL.4HmQn
%PJ!-tUnlYV9,8*HZ8A[5G6-4tP,m;]!SGUlR._?'U4D0pm[Grp!_Jq@d#+8XR=Xh@+Tnc58)(oK[UuSSY^Z8P\SApP+DJI3GgBr^
%FIenEJ'rSX_]E7HY<Y/l.D+C2CpF0e9G]&![d4S3L.*n$@i_DN/X6m#B:IA[GsahtRKc7@4!b2]ZQUdNJuX)5@0)36)_3O#]-1%a
%Ne^$`a!`[s'2*1h<jU3F_;.IPR3\M@?jrQ/8A^DS_YpqcVR^KaG;.tu;$T>j`>``\H8Af=Uq(+qQ"K'KbV]I.Hs$;.`5K-FU8fnf
%DXhXQ,K8ZmA-53IRmkFDM!U51*?r7S8&0&s("L[Rf`fkUp+.R==<ncX\%+`D>2fb::ZdpnR_&_O$:'/O^?pLs+Uj,$LPZj,gFh,Y
%:o4e+()@fJlMVj[d?4n<KT]l5?O$ObP-D-XK%qNVSH5WRGOIWD'ZPt4pA>ulc^uN*e=\%&EZK`mYYR)LPJiW6^>1,3BA42+"aATi
%6do1^(3IcI,DNkK/JSC[8p7#-%]qpI>EGGBY0Tpg[%6PK8?NrJJbU934"dmHFoQ:32/GG%Fc^I-Zfu1$i%*7A6J;f(k&JB"X-R7Z
%DFIsJF%[coI"5hhf5bRtJ\W]<<s-UQE\E]VN]5JVHp@BI9eAZ1]=Eq02"Zm?fDpe<(^6+l=i);T\H`3^'p4?I"%`Y).Up#R_,9Jb
%Y0%*UCjd3G[=![cXto6q]d)aW=11Df,8rl"'/LR[/e65#eIgB<A.9k\_(Jjpg[)4=Gi14oDE5DM;?@h>PteLL/EC)Jh3#F,onI<T
%m8GOMdb:a+XT@]WrW0*dTpUjdQHE!4WX"Mn:idiJAK2Z]d,>juR0<gI&fFSK<OcjUiRh]D=p:J_iGB<4]G%IW>bo4KR<gR4'ATdB
%JZeF1=YptOU(or0X\&GVE99f\Gb(BX5Sd4-!f4SEM40hR@!r+(01]->9aX(3/=/&4ZfEJ+<Pb6U+VlI9FC.<\?8Mb).cD\W`A8l9
%dK,F@KU.Qg;Hn*jMaR,`KH<^FAj:L,Us"Gm`mEe%N!:L5Mi<(&n\IO(E4E>1RR7NU'**X>JBZBoL6'=iZ1)%gNMI"^6;*\M2QM4u
%Ka:)o%!m;'!\"e6s/DTu*M3JhVA6UD9f#>X3s3Zg9*uc!()o61JT/N"5Hu0^/S@ap,obR=P_bVJ7'j>-;bmVC4T7GFGKb<,^>BA@
%-FR.aOa)@"(g$%2!6>Z[3_+P)$B1I4ND47MI>HkgStu1kVQX1,GS)R]8A:bMq[P:o"&AqGALh/?-ijc[3;c5G,Q*m,fqpT*[dBk!
%*i!\k%*03?6Ur@0RW.R[Vl@i,b;!8.95D3AO\rnAX\"[%$o\X23Lk'!M*M4ld.]Ai*bfZS@p+1'+c7]S\\WHb6KK8]*eX=sl[d)a
%2:],T<JG9FmHu13<Kl-=A4Ef!"XA=6iR^=M+b>CY(Fm<Q(Ls8&(SLS6Ooqm4qeZ3bmtN7S*Xp*lbFmi.mR%c"$U:h@0B&.$Mk/%a
%F]&*Ze05I<4E*9>05?*o5Up$f*#/ZCgL:<7?aYKS$5aLiP%?9/R<Z$3+VUqt1g1r@8anpspjId>Zos'm7r=`@#V8j7&iuL=^[&@8
%2s4DgB>6=2dmNtF1jq9XIM\ckk$TQ-;o&]`*n#jHB2O5"ndqefCFDE8RrS>Y62WQQ2^u-E><?#*T2bL<gik[K>0PYpKu142$'W2W
%bW)U0WOt(QnQ&XB*BQ21`Y4c-dFl`hk2":mZH*[MW-79rR!.egWUA8c!gIHR#*F`/8]JS?,/f/S]GqDMR6cP2?Zo>#&G$H+'i?M5
%MSb`SZaAAL/O]X_UU[;q'.a?]j!m1qB.-;-'Y$P-`\NGh_n8`!]E[h*'W,<LXS?gFmB<,hJp'/8gfWl=<f,8+!!;oGTLB5d!;CmB
%8$e]5"m=+\BpcM6%1l7?_E&Gc[Y^_9=Q)M3a<UJdW]/mcGis,j5<b>=]"eV;p/XWt0V-=s;N,gW(*\Tt$k#%0Rktd:iuFE)a3.@4
%o=>[hUpgRYjJj3GHKe]J3$IWms!@GPON<N6"RV[$&X`tcMmZp*?^>$r><P0tLdTgIaf*Vsa?=f9(EX:J$jf&;Ksf)pj!3^>2P%GJ
%``K[O>aL"!"FA@Io,uop:X&W\U*p5d0Y["4C;NIP_uLf^'@jH"+N0BHaYn#m,A[e8%S;gp27ck[2gTl.otdXhOB"")7B_;>'Jg#G
%=$e,0#V-kW$mWPKWA;cbC'/H.4)afe7#_<ZLpE2[LP8n%6")?L\.72'HB83Cae/h#.u7*@Y$#D@Clt>`q4F!R,o,ZF0BWFS+:*kl
%4FmgrjFb<HZ3a*&Tr5<o]+&'RgoM)?$;B.U#m)-MbKa<4:UH6,^\K(N'iR7rj+0OoaMSccS'mU1gG<KP)"T'kUKNqKla$&T>G^Xd
%b9T3ABHr(n2bd;)!?h=rPpM%cLrO\66B.4_7S4fsldTMj^P+Qr/utTs4)]7(cuq:&(YW@6As![0!7P`cEbE_6>o!RM"I'9E^h,KS
%-!B<a\W"#_qc7+8g`L5,VTXMf'7qi8Mj;JHGqb<\Jg?2Bmfc:F5fqjo,\<Y6WqP\Wo1&Jp?)+&&@$I/Vd2GIe*<ni4305DWa+t6M
%G`GLlm/`'tm($1XGC"Yp2%\nA;4aEs23=gP&I;ec1L!!1b@9NAMu(mW8?'f<pTjBk[jTm#&89-C;^8>L*eZkc+GA:%F%d>;(ds).
%&!e(Da3)>NC7jYI1-!J&X_pqa88.VC_B6-YQuFul_K#YcJ;`aS>EUk+d3Lsd4"^Fa8[BNp/sA0=b8Ph2j_XH^q;m"\V;d:$l4H$S
%ngYFH\@dm%F4==i2+p5&+qcaYbO.1rmp(%klLBGWQO-!Z&`?0Y#CW$%akEh[2FO9;ZeZ2.!/)Ut]AFSt")onTDtWnDCIY1W:R0b,
%Rn_!]`X!N9nt_]tRA9r-_4-F#k?BkHU3kS2XX&1>i\`+<lp2Psl&k]&C\Oa,pILuo$(see8S(AS[NPLt]khWO:UbXti&-UZUJ5A=
%.c/#&RURe:`"%<C^$j,W_'=V7m@$-P@s9RfDfpEd23Oij:LH:-L9$G=PQ=*?[bFPZ,Vc$4""P&jqS_TE8t;rB45Crk"$qp"TumoP
%ECCp,bgr;RWPp=fN)_+E6aZqs8Sc!]Hkh2IBUaqa$JL]?"S4V$>Xbf".o"L6Tuq6(I1"Utc:I#h!*dX"!l:'C6fpa<AaUhPp7[/=
%mg>iP9D,M3:P:0k*2eA[4Ct<VL0f*g"3a/oqZn!;YquG(#i<PA[c(5\^-g`7Q>*O_#s9uXbd+:%N?Nm49*@hOJO(Wcru/[Pkr(j[
%b;oYA6m_5n#-ll$BP:@/!4IW`$#D"9RLb'ler`qZl':4r:;11k`,[2\DM_GGLit-Yco^$QFo(hqe=PUJ0Ug`1J`u$4S(YST]GQ-2
%LiO[t]]MED<dcGW%W[rLf$4OTq9u^&$&$e4[7.=,'&+Beb6HNd"07')4/b#UWn3#?i-ttFB&p?WE]UKtecpc&WgPmn6Z>"-X"4F3
%D7G$K@.3T?/V'u;nPP%bitdpOZecBB"EhdD/B'KEO_M#9`^#Pd0-='_8>YYko7k1,?qDV-U(]KMlU#'G2SZ*-9[Rm^CbDW;gl\`)
%q;iQ9QtGJ:ihS_n70&-#Z5eXUH5O9.9gm^(:-m6RYT+jS2o6^'7&p2h]L_Hhgo:i`4A0uQdL"tmTl`WDr,""')(I=PC`6?MQ;Im1
%BiDqNGnH;D"M#)[28!-p\-3"(I&FA%#/VOj\a'f@Xb3c%_h16,&dp`eN\^B;YHI%t<@c=q@V1N8$"J`aW(XCqe">0k*UI9HlJkhZ
%n$=dn8<eM):KDUe+A>lV5O;3D&O;"J6p6!VX<Y)&[u%:WOIQS(dX:R6MS<P2\Yh%]$CTo9Kaab7JdKm?JHtrPlfj2'25J#jdL-=U
%!HAtuk/a(np)p@V$"s`o$rMc]Z\=jDCBpqr$pXlol"<uZfS^^YWFq.0`=B+FKl"9!f32l:@pLa40P"((MTg.G>>(g`N=C<IGG0kH
%F\%rsgF4KNaZd5j'U"F/15;!#1eF8UmKfg;L=0)=$:TSt.3n'+aM5*F82GBejDF(X0HAuK=<d>P(%h]P)hBA]22)j4":UKX9tZLR
%Fg2EF&a;ofkttidX:$6[/#l?B@7;5t)l8-A=+10e!3@,>&:5RV>JQq];tQ'33$MTuK8?Urcj`]e8/Ct0M[RW;]T2MKY/.99&+A-R
%U>\cP8gQ"g*LE`G8T3u3k0CbX@q+nB!o!b*bH*rOe>J1S_19g)2jrH+)BQH-9@fJOPkF5E!"+fOrG7.YL3hGq_NBWp(1<(D&$Zf[
%GL@CW;@n_#QDb<I)[>`6O&aF-C/ZGB^_H%fOR!c:3"VQo5%B5Q9<q0\gPC\Jf%Te6H.a<kL\R56OJ;78ZGO'%(bA495EiX''/^g3
%;<3-PeV4,,Le[:>@k$qV8;?o=$oPoJac,4sjV[1#/S/L$Y!AC-/2l5KA3ge-Hu1/W2G8nGWJWp>6X!K1nbNes#K$PtWfSg#FGQi0
%(%RJ+0^WE>?uZq4#44JM,M`.tZ7#t)8^Ao1qH&)``,P#M"+p1)#1<O=M*Q!^9/)hH8LVElV)XELfpV5lAagC5!?-):^e%UkNt:6B
%ng@kOOgKm"8-BP@_-!]rU@tVHh%MUsL#\pP7J9q.a!:p?Q9C>3`#s+uBRlg^<RHdW7-1n\=%DnDF@-7,@B'kWEf<OlQVOQtLSR[?
%_iacaeL;+hTN_nY%EM+aE)Imo2Ko5,(g/dd>69Z(`5N?Ec#!!U5WZ,+,sd&$NR%Uc0,s2=Z]6drf_,=c:fm5#rGS"SPWSI/&>2a]
%#u9]uO]=<G_%oBEJuRP0^igfc<m\'U3Om(,KH+tVWnq=LJY@*fO`*'@:Lj!6O</T2]4]ul<q%nl\UtL:UT("BJTq;?D('uE1C<+U
%UhZiK<b".^V7hp+ID:r^Qn]=@JHK^,=HJ+,7*!`uR42O0I=<JPg_H-,$$X(+=+*o,D&\0kP@#&2.<u<C46e5/;Ir$DAMTf0mk0]3
%)8->NX:/@:WF.I_o)"8XG!qqO*#S[=*#?mo3f,_0m$,;;%)UP[^.AbbHKLZQU<4tOLH%=&,%e4>)i>Di-YiLTb"l=3*=4230Z#U:
%/R)iSS]E]JQ#&eJdR@+J\c0CrEk"1&M@X#(bbiZ2,$m@\']H[lOAt%hAO)?ZZUD2*].'-Vc?%2]59KRWF,bQFd`Gf.b@sINVD]\p
%1Kc,6@hh&dT_&@;e<PUm)TC/!YCS+;qXmETVHO0J`@UFVM^gFaVMVcc$<&:8'cOF7iHS:G?-hnYS29&\F5/q!.<M-$_W5pC5K:"R
%2k)kN""HOK&TEPXiWj6-(Z;G`#SM(Y*:@da@"Qjl6R#N9mt58PSFP$+"+'Q<;QnF%rrX["N_@Hd1=Lked7si>LCiB6T\'F3:CJ's
%+6qp<E]Dl;36q="YHi<ikZ)6]5X7U1d?2u9\ikQk9gjY@+k2(r:Lo_Y*2>PKi+W4`No^'?_[abKjjF?e9T"h\=f3hn<&(t9+@r^c
%Lc/NVNfl>XZp<S4eVFf7[EuB9]mSfeNkMFjM04PX?j>uf8#T+_T!2KNfCRl]--nC03/>eEYiahG0^#/kf&"$J7/`tKY5.tOTJu<>
%0Fge:j#IA6F.u#SLid*#-Q_Be<ejguI$PjYBe;uKD:%EcnQ9%.A7fib2BGM`[2,M@0ECmIT13P_Z'EAn$[/J#\D3e#3BoI.$OiX%
%i<_:aL\!bU:W1Zd2Ga8B^dq`ZogE%\<7V4k:Q3m+JtF1*%^bR&cmM`imR,\UpAO.5j>c6mk`Vp.8^^Y&Q$,mMB8*:afbub-C99fA
%Fk5>(",aqe=E$OI'1@-4*f3H^S[*l:pB766(Ytqm8YQ>@OI;:!4VC5).cbeji1&lC/,*[R5br<Q#ucT.H5U8Z,L;;0Q$c43k_'Wi
%@k+5lpF2SX"qM$!L:gH3J477qF:elkfJp^.)b0Dp"ANUgoB"57<5r;K<DV_D!IZ**$<B\u"\^W$<3$qSU7.^MZ%XZhfWl8p=//VL
%[+uiSL+#p!6Ad+$(7\CrL&F2W-IV9)U'K_\#lU:I?P1Ka9-Ls9T<D$b<QC&>mCgt$FNqjbK$SNQTH9uOom+R^$_X<eqsVM21b!/B
%Yl&=6HB!W''T..[jo==9VF/`9*U;:M6F:r3g]tl?A']RI8Tl-YmNB[JFLm*IG7N^)Y$4n7UkqJa*\2#!Z$90;`6AD\,:7<$J2b[+
%'L%l#LV%04$Vi:j=;*42/o168.qr90d,oP+l(YC``48_f""HipDUt@&Y^?po)am=:i2+]'.[d5$h5,`G:]k>\C^^9u1X=9lgk"q^
%:-CN-1E?'U>ebX$X9[XS+R]=7^HD[Y^!Cgrb;MoNlo<,h;t0$HotYZ#p*r?8!]!7Z$D!#eb<;)>en[`PPY(:\NCp>i7tF*.,fCrS
%;S+4t2unNP<5CKV3nS_CQiWg3qg9bh.rPs2a:b2pH3KWWl#8Nl(%<?^?_e3Q/gqT9,fF(_-_Nr`VKAuag?l3;<f^%`Ol/LNRqNDP
%6;-O+YiGNk,o+3Kme[El9kft)%Xu:V-_u3]A+)J!m\eld+J*oNe?5AE^*PT"GINg71Fq`]SpL-OXNjeH2gph.f`lJL6g=LI9Th7M
%b7LW=1NI_:P4CP9NcYe/;ZO5Sa9pb`?p0b7S,HSlU>[?E!AgcV'q&&'+X:ic1bp:k<#m72pI)GUhJT';8"smWql2tDEE$81mSmQ=
%#Q>]6fF'GXltOYt!'*]!Vkfg18Kb`Fde5P!8G1)9kH,espi@]ilQ\;"01p2>_h83(aHX%`5oQum-^inm1\GumHh$RspqWL(aX6/T
%BB)g722&g>D%?9l#3(':9#HgfT;q(em.7>9,7b=?<^oAR]1ED\_5P>uSsdW:O7])"b7dDeNc<F^(uIbS.uauSTKhDd'9[cugci`i
%S=%rmd+LS!G"1F#-2#R=ese9Ropr_6cAh&Te_?C=[<4:m1=T+LC/#<d38'O,4-[o>o31nt/&C-lp6g'i6NToJ&j:1@f%`LNhF3fL
%D3,Phm&+.?U$.^eKG2)<T>.Xdc"KVeFmB?P8WU>L'k6sK4iQ<b^)</7;j+D^oYp]ro-k4b2WNZ/ai;+9g>B5dlgNZE'\]6bJb;i9
%D$1SqaT(0^/abg!CnLTQfE9;<_MBfC4\O^N0`2DRJ-XX`?!,:>P.GM%)TpsBK'p(qBhf[<OF*@b#>Po+VfQR%`$?7MV.%Xs0%\(J
%<?eC<l1ZI;`8@'ZP*"'K9umae`'R7C?p^J`+q>*?"-p.CBqACd+t+suV7oXO29SE+0/[$P;^%C)]S+`l7ZG6%5:<r/=/Lj?BV-]J
%9o!anU(NJaq]L;uNXY-r!^eJRJ+30f8@9>:QL_FWl,3c3p:CN/T3)>:.sRjeVZ.JD\bS?u#b*trh*G,eAfki`#l<.NYeaXHAODtr
%#Rs$s6enSCBRbisr1>8pZ]E/(!G=Zs1kiR?0_<*T;BdoMD1c-E?Eo6hq8p$l/RKC4[R]5--Etb*-(4E+IRf.1pq7OT&GBWucHqg$
%GWA`%;u/'"j`=2@n&ff>`eo:AdL$lh<WXKE)sGA0k-Q6W9HA4XD@f;?RZ=fS6PR?4g>!F=LT.d4)4umAe4$jI<L%>^g;li<3=.+3
%)>jl8nA*.DL3!<>@"2!T`j@319X#Sh/6NSo(<P3+[ELlf:iOXlm(Cm9M&Q?n+Q#k!MY[@HjrP_D'P;#ME28AK/kfj!!MFAQ,g!iE
%>rE`W4)]7gU5^F&`1H5GQF&>2QjH5aD/a"i^eH?J!@<LFT'Z;IM:qgP7A"Ks?d=G[+Ei)pjJNMF:Api)2">)'=(%HTUPRqZ$"?A[
%0N^2f:5%Ss^Umk7h<FXKpRV+:f^hS_+[WW)g)SZ.PJA@]-t<plL.$gmMVuuA]<*R[d(/MQe+#P["$j@GLG@8idei>YO[g-*BFcoV
%Wb!X[8.^46m&k-U'^I()??Y2jp;C`9@a=]%<,Bn=:LX8hRI_grW&U=TUf'N`T9<%2c369_4)]7gU5]:3UcKeU:pReE,Eg<)k_4Q`
%PO+f)$)SE"DFFhWZ>\c/Fl)BV5Rdj5mgoSs4G$r96"*bR63qSb6%ZF2P-g`K[MuPF$;nNjHVr%f=n;/R\*)F(?p.<9?5ZIf4k^`P
%W?@Lsc7e*cU0!d/?n+Ij<TgTbincbHG[>RMlLBG6=9ffU(2I;@%)OV&kGrJ)MO^H/C*2__8I6oO+il1<;9]Udb.V)H?Z`>sVffSB
%&$uXortfLG=P3%o6IsnS&C;CBD-*P^+E/J"+88hb5ust3fm0XQ'<ee^d^6Ro1aBD/=kuqA!'M_9'XT]dRWh+cbES0a,Mg'"][cD+
%2A285<5$hb3p.S!p8gT\YQR"d^MFl[!GWLGhG?nC+cDVUo<(,mFF0V!JXW0E=Qb`u3[#RZ[Pf_U'9F2pglJu2lVCp4E\=C<^"5sm
%\6nCSlLmW*UdZtPR/atH7uc(r%:=38`9Wa+K5-lt,2&!#:4Lga.b048AaMp1b1E3HbP=Dm&m.4`T%I%BnHjH=eqb&pK%=OhQe?UN
%Yj8lfq`4'sUF\\1cJ[.LZL_,;'5]!#i2F=C$l@<f!P4NOaqLS8(ZH^PK)o*j^aQ:u#r\b&AEP`:<jsGk,R$VQe7f7)#fU.#Zu`:$
%ln_hl7pN0o(a8+)%$B]dcS&:HiFV-@1,G=_h<O]%)[Z@(X+LfFb@d+!Qr`XA4Yd%a!YD_4*1W\^Kts;VZ_I/L2PR>m%p,;\\inBZ
%JW@:Q=`8$&Y,KmNZ?E0iK0UYJ+A*A6RO@++W)%"7Kr:p_^@R-CAbg)5Bm7-OckZpA>+WngJhIHmS8,<5,+>7-R>(6Ic+$ocQK\ZU
%[MI7ue`jeTQ!^%C*=oN.TFRJQ$_s;5@%obSF"09j&S,&MH6$$l&Jb7q`RVN:\`fM^F?a(HkB5I*d@J:"Vt>!nciu7foFN;Zfk+cP
%Ei^bj!6Q4lU_ZNm4@BtqCKQOO^T[lIQESL.Mf.'0h<KB^l*LFHh9p+\<4r_T0:t?d_7G0Sa&6hjp'[`4#]7p_]klNCqrt,#?'S`<
%Vf^aODfC&r9hE+rUDS=H6"0"U3rh#)D.'Kpj(<oUc#HSY,UR-ne!q6IX_g;Ykk7+X#<CX0CF9,4_`2%5m@:W$;hHCjOsFjR;<`$h
%8]hUoTZc?TAPl>%lW2%>D'Wu]'!_nVH4D[q+P7-CZm3.;obIWaQ-0)'p81!oH?Lq;Hl&UM*Y5lq]ZH*Q3*s^ij9LdLDVeK!IOa-I
%=LJ;NdDQX`fc&,]Mah`10>$-,GbRY/rku)hBLH5[Bdf3L`H5/B"C[P<cm4mXfdM*g7%82`?K^,1nYpjp$/3\)4cZBALXI^q&rB9#
%np%^n-t82^HP#ju<=),+nLo!%p\7ulpAh*j4pH[1=cT=rD4-JSO'5?G\jEfa!mRf3L18V4`2V<n71AF_-Hq9!PU%)7jhUuP'_XGn
%>>=Ee>\MAm#m3rA_T)<d@B7/5,;h!A/HRfY29EL_]5+8*d$]6[5Y0P'NY8:%G1*\b==aa>??P,hnTd#$oX._68lYiVS4MQn[Kp7t
%j$-\RO93dm!7QU0&+#T8j]luakOu"O?-4[$LJ.h:eZKr[Wu"o<Ru8^@am)JV.+>NteuRp'liQP`Kqs!p?,XEO<kl72d7//@E]5N.
%Z/YX`(&fa*s6c/>575fQaYnUL=76j2Io?7%.?j37dsk8<+'!+:Q6L&N;..d7Lb`-Ji!DtD7Ao#7<ID3BjRo2%rAsde^ZpM>q[Pr$
%P0i:I&.=Z<GNKne?AUgf1P0&mH,]FU-@0tIHUT_dr55>@foet&.EAslA8@BNC5?&$a]OAC<dSk\GItoYg;ZDs;_l,&RX#(qY*<-f
%(*-+0aqc,G*Y"^Y(.;.@pF\LEF*j8`UAe;d@aMET.W#XNS]e5Q'ce_1^h#jfQQZs2fM/X$e9*kIWq/uHca.%&gb>kN7R2q4K>N1W
%L(XRbKObe/hcseM,YOC<PAk9mMp<9tSp)Wi:oA`B.6W9h=4M[A"3(^?c2/tmXuLd3D`k'?552AS<f[d(f#Au[McmY7he>8@fL:<(
%p*1jJL]e%!1G$%JYKFjsRZ[3IqlPl+g.5$s>'$)sUA^0e9`+Mic60.dk5ChaE,8("J<Pp[/WIZ[m(Cldo5#,f@`-bkJL1+8Tn0d?
%ak,g4l:?7*(,/<'l)]!N<]1#.h94)Jh4Aip6ujW6)7eXt7Y'_7R5V?G%I:nk=W<qX%l')n2@Rh%TN+oCW_UWjUeM%O9!),lZ69QU
%F*0Au%u%A!o`]o$6,O/AesFM*&^pPnfDF)id6Z,HS_tq(9U`1s:pn!:bWJ<M>E^\05g@BP'*3iH1bWub6jjCT"fSEUNLu,oCN]*n
%e86"ncfiZ6<!Va#?&YbC,U[nuj:u7UJOPe1WD=r\*Jd]+5r2K2k*O>$:n<9GT!MAjR7XJMJS:s=ZsR_)WCuVXYP-.E48#i(U=i%R
%m<?#D[pQ5kWTrl8s2Ga4Fi'\aidTR#Pcpc,`*a@,H*REr&F9Ve+#TW?K9\Qt@3\uP!r-K)=l+N2esd&L9WR0Yel7';2T+i^nY;05
%36EGT[EpqFm%!d%>i\C*j01mUCZRBf*6ZC3OP!C'l)RgOk/a28U[>A[BW).l0+XITW5TihQ2hF72!0oR'oTAHF5luuN#Q(7R-CD9
%rCPfMP,/]*JfH,.=9kj<,gucS.8`*[WQS+.V0dp`+UoTaWtiIE5h]XJ?TX'5;`ZSdA7u$fSlQt<UIpt"IuDc[JYK*%/LEEACnd)J
%R:0o0AmSi(8Ja.f/lBrINo7:A!>1/mBfhHZ<?'lA,%_BQ&j>rhrD0rFU[M2:&M&L4j^shR`/">45<Q6\F#>&"-,*O3W?h)G&dXq5
%DsTfZHE[cuA'P=;i7Up6ncceV086uPAIF(J9NL/Y+Z'<_^<d$PPeHLi%hJh>C+@ac6(O;p2%b+-QuNah]MGDODL2acOM9-ERpF9h
%+Nr^?9[kMm2Lmo!r*i$/Z?_OkU;ALQBL?<32#pujl%-'Rrif6OKc4;8!=h#7".K*;4cRRLRenkUZ'.cNFr;,,?YdaC?1Ycn)^Ss"
%eVA6%V5/U;@u5mX\im3i`&tXNA/f/OFSe_+j%sbW#l0l<KDECnRO\$`+(,9-kQN=a!(U+-p;=74,$Yo)jCJ]'T\j)qlrKr2qr';7
%q86a`/a09*anRUm#$TVHS#ucM2%Z<2I>LSPCEgJNLsD7RC3PRaUc=*21mB98.MtN-@S62jn89@K8b=C7g"'0EI-qu$8(3Fl[8D+3
%.qmC\=J:LI:Tt9)@=qVX;Sj,gm=RQ?U7BF-eT?HCY^!oBIXqF(;s-$4QBRXm>M_nX=^18X_FtWZmA-VQ(kT.[*F^k"b=g<^@/Hkt
%`S<_eoT>l>U3$l1_)_kL3^2`A`rWhM"b.$fE1fa4[O5*D`)28k8-:'$?aokmH5dj=Z@rtf/Z96oVMuV(0#!]82M04:$8ZW)'J31,
%%2,m\^Qpk"RWWsb*H"<D1DNUcba_-$Rb`?OfCZ997X:1k.f'e:CC#HG:OnXn,sAipg6m'0oHC@OoBsLuZZJgr(^;C2LBj3KcKGd+
%_MnJm-(>PnncDC#]ZCIN*'oKe[ukn#Dt;PF`+rW;p,C+95seaH?l,&<OYJ,dr4rRE&%rgm%LU;1(Or/7[guR%Ym2tEL%0@j8+;:`
%W-&63BIO$T1k/i^e>EgVI2"7042#TrKV*SLgtM$5]l6f#2$mo/!%QVAA?&]HX+IR^e^MMa\,I^e&!XDA$&#*'J:W_KA+k0&%8$tH
%PJ>S>`%Lp3%8-1[p4BND0dR<'A]PAcn,H--'"_uS/%PC2nJ[Mik)5,[i>WSVIgf6e+Mc4"=sOI2!?o<W7a1J\'D]7d)]u2GDr$\L
%(<h8T>33T"^>RLS3/]f0X5r$KTWM/dp8j>PlBTciX6kM=7"uJg\Z.hICfn(sX_LrHbUJNfU1f0PjRb9'6\-V<G2Q*n:#cpd%t2Pi
%hb:j_kLI@qoX\1KBI&Tk4H-T\=L@BcL#oWTZW"*]YO$Y&J9D8g5H-'U`kL,"O`b@2(H.jC^B#)`OsAXZ31(#9]/9`0-B,Q>B0h0L
%FS20`mJQsSGc]BWdq]27[LIBUMmCt5fnf:e<dIe#Hrou.Vps[&&Fh/So<)EopDPu'+e3WRm-r1RA9&R3k&*/T@%s_/A$J<"Uko6\
%QT52T(s/ST"3DIP`tA7.S^d(YIL6VOi!2uadtYBc)6Q!ZE4.o9pCgm"BD1[`Y]XZb%R]VoZ$G+\;!Q&d5rV)+X-)RIVWBi&mP?fj
%jR9XT3sam/Ws'%o5qf=g/rQfNp69Ok5YLa:M^RDdi_\^S7pnWRPe#H?!s_qRIt0q2A)j+*3`Kj2h&'gJX<e&$8%7B\QLoZ[UfMo(
%)O.A[*2c=R_ep"?8hBo]C>OrdGA$_se3)h.DJbDi+VPZE0i2#cj7b6/e*gkN,'?q_%[W:$>\)fZAE0+=j=b+g=!H9dSR9DU02#g/
%r>WnjI4`,R\`^!KLe&FX0k@@92*Oq<O"]XSU\KBI"JLqe**H68d(2MsFjR1\1U8*JgV8N+NT(R\Rh%(IKGkQ#.T$89llTYBhauTN
%ostQs>,6,*JuB$QXAf&k9_Ijohes5)P=C%Bh[@k;jV1*nI1@t0Akj-2:FH;(ErSmhi(5+T\;%21rf-7=Z`=SP_[.c5p:pI=f=?lA
%Vl04^+hR9K&e@q31caIl7M'IP#e."UA,ciNO*1:uSD>aE^$EYLh]:`nU[c"Y`n?sD]ALZhD#!Nf7a]U$`9A@aR)(VP:ODoEWI<7m
%[*]mehR!!$n(Zrf+eiim3#g&N_//P:,sqkmYb<aX[_8-!ePS\^pi<bW*`g5k-dl!)%[[cbfqC/(c(BqhJP[p\7a^>Vd=Vnu6bZ+8
%A9k>]45fg#[MpQ^"N1J^"1hDs,(s^;Po=L$2ZV+!@HO7)1$s7h;"t*1.XTA`S:?-U5Co$)AuD.2G_4;I5=BTu,HsduXJ,pJ2QNAL
%PRg`@,l,pO-A#R>O2I]%;j4`R5LVFRQDf=s!ZfJK56((Qb?k6j'rB@]XlYC6'$-No`>:IK@]H:I$i-@^n_q6e4#,Rp*]%Y-B'u;0
%q/GL5IeT2G\RqEcYB)"=J$NVR;u8qOmJ[F)&*849kJKC)j.-/:q,C<<_0>3*TPb9!0An-WcNKKXlFa4DBOr'RPKe.)4SOf$'o/m*
%(kkXXC7]ChHr?EN?Fr@'`A>oX5+))r@"#@h/?5FXC>_J[(W(Bth=*/#j3:WbE'CPW**V)_I1ntcm+5/<'C_-Q\rafSJ.k=J*TkUg
%<+,N1(TMD$9L;/=Y*$\r9O-ujH":tSUO#VaGgBbcNu]qakk+Z+R=js0.g,8j<,Zh\p)Td4??JZ<e:PF$3>n@.F4S"7]fdG#6B<U>
%U"fka6,&8AGGFFhH?/j%k+Bs2oU(:Zh=,Zu]a'klbEAQh,*YU?,[g&/UiC0,qh#dr<d'p$Q!9/Obm.?ZV\YK5o8Th(_V!7DdEa)c
%A=NpsHr<q6IEP_m3l7@V!F+?^Z#_,s5::^/ObM=&ZA$BT)P"?@N$Cm4R`E:mKi9mVPd,#M%;f1Q#!uQP^;um^.P3RG/Pt'BH/1W/
%9@^hNe`<";M*eBU*>'bNHEo4hSh:+ha`qUUhZ[]BcrJ"6!9OW*94JTL";kr%8NSE@&H..T#i#hHPB,pgFX1#DU?e=keZ;eI"p"pk
%Tb<2t&`?n.CaJ!BFjuqiSZcph:Q,MIcE-0YFMrkNRoT-.:^]SH@SE(9!J'[EJMU7keesfOcj0nrda8E*&WF=Lm1#(.#Yq:NUSYgs
%B5bI"Sht.@]/cB]`dcHk[qau1a`=l!\PiXe.@'>Q<$,YM^9GFD7SP(=Sqrce^`pU)#=F8_'LNO(>BV2KaV1\)3K*?YW,!Ij6t>bW
%#j#"o3f#aL\-,X3b]"dB8JMK;C5oP7%?J1?2om!"V,Q>J>4lPsJR&f6#X\CGliJSYHUn$Lc`4#9=cfAo(qV6J]t+RqL40f<?YeL%
%K_gi5"(jHTN_YCT2\aTl(Sti2_Q\K`E+T7-;2Hh9rj'S-!i5u^gQ5@HIQCFE.3NZW[k2"$fE=T1<K_)FDGaEO6:El_rb^/-3DGtk
%(B7n.EpOCeTX:=lL$Kl+PLif7cjX`k:ag'n!>VQepFh;:X9F-='or?GL>+7]'TfTAP3f2'V_+nAB/ZZNPZ>S&a/dj27iW/dcqUjP
%.P>3AG]=1iU!Obn-Hq?UW,F+9k6][0>DYnJQ(0?Q%U-7raDA]\=pM"F$<q*WYdbY,AX3A',&e,bPNb2p)T@E$gUk:4:2KBQrZXr,
%l-R+r[=$Z0KM0$:Q2LLG8Q()25O\o[.OSn^j3NYOS2$Zm=G4.Jqij.t9V&VigWm>%7m.fj^570,k1.s.)f+3>bms*spp;WTe%aJu
%EdMoQ_>'Po3_g?[o/M(uEVeFpkF@Og&UGG(c=uVbg[ESO8)rr_Df*5kpXuPCD!-3b&FTrAhCT2W*q9[Ua27B5+;deH][1'7:D)@>
%S-5^E:>/?Hl(e?IZISXQgNW9a3C4=n1]$kK7ar$HF@)C5bk#Vu3LlB7Z2:*IH4;qVM3$6,mp:o^[hJ>c0DXh3r'N&Y*h+gT%@YU,
%cL5)OB>6%*gHYPed6D`HZh<e`iL%mgV>a")/B;,sGiDgiiX:1P"qD,_K+6$*^Ln$:q*e'lOdq@V-a2c*JAQ5E:)2o)Odlo%%jRtr
%b9G/hgocAW(qO9P##ZcaU8MS#G6KZ/3>/JpK\dA7k@XRHgjXkkJ;0#U1ooeiVD,57Eb>5dBE*KIPsP:UUK0K9%&M?[!mR,9',P9r
%J-jDH_*1g+5mTsl&K]1[L9=`]_bO)s[?_KTGh:P,YR_Nn\Lieb"+]<id(:ri<&Uir?oIpV"nipj'/rbnMkUkD"PV<>*gf2#$c.eS
%MJ^_J#1.7=rGZ+C7McZ+=8A[Q>m61^r5uZGM'smW0J,XYUip^-#S1@_^`Ws:U)-Kp@?R7mLBqS#@VLIC;ZJR4@dV-[h7(Ft$FX3C
%8NX%5EZ3M,S4*lWF!IG'R%o-.6+`sJRZ"T#U#h^/#%;4VNclY>njL<LCTKZM_?_\C<k=9<V5R=)3>5L_BWTdL8r.(tOjOmH+sqmp
%="DWDK!X!La%h7)67,.()g8*6E-sp6$__l).;Kjn=@VB[HOrtiL4MGUAmk"D+cF%O.&?_HdDS!=9fJPf"BpbX%j0TK+t!8]Tl'8A
%Uds/tGmH;6@@&PoG[:$GW&cF-`)NAc%.jPa+C"8<a&Kr4-FPWG!7e,E2EA1Pb5akP`ds\GZC.Ecf@h@FL=6ACYr23tDuheFi6T7F
%aRmihLR4-^IKhHnQ9>ne)EZ!)rS+8mc\@UhfLL/l_5bL3/4`T$Rlo^<BA"aPitPSG.R<FD-H&iQ+,WDD-UPXTi`EXi-S%oLn1\i1
%gbEcIJ_d)t!?PN[Z8Z/T;D!'t6k'GhLrk=oK0]m]637]d(%mg;2?*G.%[D%tBpm?(:o69c,:OdLm=8cOFj3D'V>t.(U^`YIFgAce
%N7dY$T1er`VW%i5\a^:t-C>09=qTS^CCrj7[*'C>U.e-ZLF,V$'e-jRS:(%N%Jj&^.<W8,)-e,+bYNWaj5&Rp+:jLSTgTr$M$Cff
%6O%=AqJaNk_7,B1c)*lRY#Y.,-Li5YT9Yo)`PL2,OoR"$e*fIAZE8f^\i(:'k]f>bh&uB*/SD:$!uuHa&Ss%o4r4S2U6s"?@1m?T
%#ED1bEj^;#J]J,J$'`0#`W4?+>IY/<',Eu*^<:"\[^E!"=-Q1_^#!BZ>]fm+baf]b(8Na\f=T'%""r[qO:Oo=%l-`0*<P?>Z^omp
%;+q[(>>#Op_Y@r`@4tL.h#^5[g?m%AY#9UjQ(P6*4`,MD?0ZBJ9Dc/*EmTM.KDuXRc8)?tVt-[G_`ef&L+9<VBf!C.+I(.USV5B0
%%++-QHbP60*Y'32lC)p2TVN8Q8Cb;-$.Zp]Lho=EJg2T*Y48Ng\ifbbd7*kO^g_"M,!Z.R+e9p(d+KTL9EAcj0`n>EJiofboQA?r
%R&?0Kb$k3j!*-P"3.ipa,4'#VNP=.JG[/G;Jj1(4Vgpt.d;kDcAd#%/6UuW6^'A!NH,*Bd8JWc1+Fnl)2&[*W%*7e6)P?@J,FE^p
%:1otAlMKm%fp\WR_q;1lZR&[<cY.^r&VHXKluYltcF1<?8\OG"NN.C%aH5YE[?^(k0cf(qh1ktkJh+J.q6FTZ?.ao3e#g#d]`*Bu
%@`NhCa;_n/YVRlWVXH^ncGsm2_g>a'<h<+ED4[<%iI85IEQ]%J(q7_cUN)b`Iq+Rd#)rpaK(B61<:)7q`>#;)+$00p$<A]4JHI88
%?nnUo+VO6/qS\K`d(^A=n,iuG`8MJt35ZOJK5c.WhAaZ[NG/,d`[E;'8s<XdG9Y&M/>tE9k4[6Ha!.HS(Jue#)*Kdu2H8=\oL,KY
%Q77dMg+=KlHhXH='oKPCM%/\Mhh(s/?7gdmDQ7fTJ1l#[[[_>HLW]6m'3-7(B(U@Hc_@DaSbSsa#8/:j9=_q`m1q[AKc71qq4cNY
%a9Qce`Fh%4MI-iOf:f/u/NZ,(/^8+Z:dEfQp.b%ZO>Ji%6Eas9])e?BTAPW38'O9K7i47G1aS5S)XXP(m&U92U"7K@84>b&ar8)t
%-_=SS.Q:0\lF>+@lZ@h%h+bqGnp(tn99]j>J0BbtjSd9IA5c$?drj5[)%3JZh5naVKf2QrqIsBh$WIYB?C4A`LTSZ)N!c:9M">es
%@'Y;aTeASU<@<^AeDM`P#mN(Yogre$3SSHa'ko!`CF2T<PA8G-BX\7E@gJTDs.ud3T$oN!?X/DEqC!Lh!2;8;=oGTd>.!AV[n4\?
%]nt.[`R`Q/*#NIQ.&\pt#BXS_%%)gW#9Y$Lj^D>nP<2s4+HBBXCj(\ZAO!W$:!GRQi$M"#31FlF&`8*eL&KI4kOm:P\iYj-Ht;HB
%3Jie?;5&&o;7E2j'(%e0XIYFu/<c]]NJtG:*EFa[0l,L*?mL1_q3c()GQU)k1r!!na^Ek/`'D>f?"/(("/D3sR7aUaB#YU(@HZlq
%-N_\-(<TIoSW#*grAL;N\iL]T6lRThFdU]28=$J>4BhDN+mlB!T-c#=@W?C>iDn.f:ri_hH&:n,$Id]C(dqJZ,Z"'j">PjWc*S-*
%o8&:Z%RF>+MJ>Y0nM.V[VS\?`7Zj8c.WJX"1iFSgNp\&hTPS&W@UrY7h'1PZM<Wo%<)WT26*8-ST'XUP#cbHZ_1<P01cN-0Wl6n.
%=1):'Uk@kK?-GB$Op3\;g`QVmBYRf]1PTp?=?o%-m$A_?/u,N$#gke=1F`[bk!((-T^-4C(Bt9%VGup]HS(C&1i9`;V]hh3Rt+PL
%_N9/ErdH8ZPcX$`>9*&-AV?-oC<Zqa_@@l5^D&cTgJ=`TdY=fR?_Y3KStq&7*&B9#FV4;;XG%;Y1/4).ATL'lZ-OOJ2=mE9ZidMu
%(0'[$,J,?Igfg2,NYO"1L+2[K7$b;RBq:`:Sk3rgn1;""9):,>\jTae-#R(:Nu0l-:aGqK@?S2e1u=fC[ab@l]8F?6c7pM2HVjnt
%m"+.3I>dfdiNqYEgWEpt0M@fX/Z>qdPX1PSp"QIS7[,gqUV.Hm@[,F^Pu1FqaA]bm-.U&,>C02b9`[`%SuT$L<C*W!3D.D>JEaSY
%GQ8J2U=SHQb58YR7U36@%;)c'YpF/ci5Gj3*;G%pR=m+)Z>W9h&jbdJ3]-bEMQ=r^/Y=O"0e"3/HE67oWqf7E#,R!DI3Ur[\dm&.
%\X8"75Cd^m("&RL7h%5G1E2+Dek.aDn(]Whi9kY'424f/[THoa^0"H5bWD9e.3=JqT$]pP.8WJ?i[TbOY]$9b-t),2>F&dk4ZILu
%LLg/qli0DK0Vg+9LQW@2#4u_"^SWaua$Sj6@oTPCQ?>f'[<4Q*a*!irI@AII1bI$K;ubKm%d1mQl?+(Hr:.BuEIY-K&!_S"bgZSM
%RbMiSna"5XF.mZeo,.DlHTK?3d+c*;cUIeCnXmG3fh5+!h75P:*UI\:;^M3b_cJOP-?AaDYLjg(kibT6Tq7.nf?UN;GP&Ri.eq&>
%F3ZbCOah1-kM't`qT#FZXu`JaInVre\T@'5k(.#4S@4/fOrUpRC#D*0KH,WdZ)V(#lY`R[[bMOc0@sa`M+fYOnq,+WMaN52$Tlb=
%W[B`*T(SM+5)ggr>.ke5B0e(udGq8rT\H8nT6<P+JV?c.#Q9%^8O.'<'c%Na9n9Apgi?5Rj?XKWO$pi`=ikRN`J[_!5j\V]/9&Xl
%+2`2G]brqNP`GsTV^e1"5.3nP!XjB2=TgD2oT5kLZRA]qAW[^or"CNO.(Ak!2s'27HriGomcBtAckDbforT2Ebk9I*O7)N7HjB36
%,TVB`G>'"ff(!h-,Q(ORWZY&!r-E>=0RkKD13LVp#`slC@Kl;U:]W+K.?W&'Nj.Z5F]_CTJ4mb$"%2QH3h,"C0kN1i6%BP.KsG*Z
%+S'"Hjm;TD5_HdDToC4o&dd"oTg>Z!*J"OtqA.AH/k1"o^f%cFcs%-]#<61k:5(7*%OqY!s*'R`<Mn#l76$+B1MF\B5Yduj#?2](
%jUTW30TM(c32hoL+#u<EK1>[@Q%O"G+IED"3N/C)^%ieAKBA_dT+;Al(ubiYqLIW5>i*:k*s?`6dM#OOTiVJo4b6iSmlb+<"$?5S
%%F6d!g_\SeESM_XC%Ap;T?&sTkk1!-!0s_hM^R/^'gS)e[jat*&+sXc'B#Ko#U1c@qA0Jn.batYa/6dUl8ah2l!Bb0N(BmbLq%#j
%A;Uc6?'9<t'G`U67-i>RZ4Ff`;>p3^ieHWSr/eZjf],'X-ql=:5NL;Y>QuX@fc6EF(Rq:HBpcU>hMnkc7cek^SBL3Mbr!Jdhi96+
%1X(%6P;(pt7a7US,[9Ujh?m1iQk)dW+V`+$?WMH$ECMMmLN6Lr"`Vadod/QOUs`$5`7]_H.^65`Q`pqc8O<.PGVPGHiF`c\R@d5*
%.Oac@lmX@B:&;$`GG0.lR@9_!M?Cu7,'(b=>,[%n]!-^BiJdU2kI2n^%$D3%F^5m]_u-R(ZVD!rSRf<>VQp7YC?`YkWj2gF_r+sT
%'XH#,<`Q\4q8>6p+UU]kKDA@1CD@6#n]i<K,VJI.qlu!*As#TQX>):oK@SqEbpobh:aEp^5G;-[Ok!l5kfU5].K2<d;oqo@7bT`u
%$==qp)2MEZ8NgfJ';GHb3^mgU7-*1>2qNAf:%53/iM[&o)`#:Rq9WeG:8)e.YGkD7B*F-J_e*Jgh.Jope^9"kW#?#C1SJ[f%0[JX
%'"?%H.2gosOlh%&eVq`M,;>TjO0V(#eR0An:2''kCasDdG5;+l.JWs7btNlZ.f0cgi/4&Ha1&JLQU07T<rObmDRok&)JI<%A2J$E
%'#FWI9DRQ].[pdu$+4Ps`')p.DVHS>s10cmF52tZ/<OT!-.,(9CM@(Q?./YS%l'MB&lcARIH-&^8+1mBX+(p=J0.?i_b.m*"H/i&
%ICnWMW7V]<<)jBM0^`=HPbkiWa:NQ0\:NQh5BH1g]N?k0_i7j+-*s<tX4)3;GVJs7'8+C*]9MW*.:uM?CT0uNX3$UHS5n-c%*_aF
%-p*Ct#/^A562F<i%FgE"Ml$*2Xb=QSg!g6)<[f#sh)#?Z;2aD+;C3<^ZUW^H22?PgR']Yhqapa<RK@g0J>2Z3hR<gJBG_WKQH<'p
%=t9'#[U_6P=CoM]FB+g-\d+(I:7G(MN2i(I$WBr%)#X$`%60GELUW0S4O2Dm6%I4IZL+?G1.iXO:6?U!:C4=0>3A)gaT`GPFhOSA
%]>,5oXnY^l9ncWX12*`d(Pj"$g*18XB05d`jhrF+l"LVD-DW+X(@8RcT;/4mL1VKK.T`o_hP]R*.QDi[Ym$Li5ja*5:#-$%XJ1f\
%`2sH9*lpZ:;\f^tW8PRfKTeZ_K!T)pR6uBZ]<HmUc"U%K#+YCD&PR^lG"jpp:*;RPKQ+(:aeGThU]qn$I%@s>R!h7@fn>H8R$:%(
%R7IBk"`oaePska2#LtE51Vhg@.f#fZH=a/M.+1d6,nN!S<4FJAeg60JcAbc$N$>cde8TuhmS/1,J8t\Oi,$X7]Nm=h-0[C>1!?*+
%?p@:,DSGB'=[iVZBnWMH=sYZ-"<&Q>b5K\uX%DB$PT'_i',aD"&OB@05q?R/V3($BMJW++JM=Q`GXmlV\3qHOiDXro$qnj#rV#aV
%\t,;kT7g4]"A.'e7:[/_fr5mMObS-U-p)PhP9o1s.9o6#.ZFd4Dq1r9RVh!qS81#e&LfR7qQ.t:ap`-tF.(\W!Ou+P#%3nRJ[:SI
%A_&B-PPZCJo(@HI(dE+J;_:,a]4>$+1MrJ$gARsfVc:9ciq\"<#8O0"-dQaB<8K7m/$Z<$;sq47*\>QHQr[:di6'1WREMTh9`fdk
%79pC.V;#(fbQ+WB>8"M^.j9,>mB&I#7QIf\[:E.oSg>[4?4bc,?sETNXPu9Bl94bDMK*'eQS_CbeS)M8g^mn$LpN#Kle;J6KEmOX
%m]VDY;kZ6Ck;Q0a&qMm@-_]o.[!!%"TJN@M;j>G3E"Zr$o=G.acBRIuJ#d$9#Vs@Jd4@?nPu-,pF_``nh$Mk8]o&f)c,YO:<%Ste
%VG;2._pV+ZdYuTl&rlk[/+GbVO\L,nTjCQ_f4eP2ngAE"+W49+]dbIUOd`a-HO.`:=fGcH!Md)D"iisp]h^)B_6P::Lt-YqSFo/\
%b-nWc1CS0l#DXE&[-3$QK`.USd@)F@CO+H3RqYC[#+[th;V,aBVkh!HP`+6m>O^f9@i:(f@YX.;dY6Z]^@+ZXD=$(H3+6^TNahL*
%/uicsW0Gf5!e]er)RPE3)q8'$WlD/PQKr5Z7)D@_5ZYSk#5lp7!7]<+Tt805=0VdI%i`k\7cr'XK?cG3MMME9U+_uFQqPYiG#OKq
%Yt'P/,?qSs51nBL!*Dk7-k_R0C9_S7AhZZQ87M\Y$asPI/r<RN,OJ%+<`q?tAKYWiaqSrA3I`U+q*M/?:J7*HI2[-1He"g3gQL9k
%$91L%D"#CLAYEd6FKda'AB,0o\;>VC\7)X]K=td`Q9=VCkhPV"gs:cfE]gp=5EP5?K<hYbG``V\j-nsC_*+M`=9<e*'T:?6(HT$P
%I-fF!BLK_&cXm_Qa"npEA<<G24bf]!lp</X-(:ikJQ<H#?p7juD\kID]05oIdl#X`9D[7l:<t"/Ac<pNYUC>rC"#K#<`iB04X;Vd
%D)%R43B+Q5p#3e#KXDc.VKVQqWg4ataAfYP2I,#]`B`>u<L\LN/G[,sd(/!"\bji5U"B2I=S"GBjYtoDP6Fk";;Ti7VSX*&QEkA(
%OKPtej1=hopLip!FL\<tp2qrgi`#<tDC5Mg<S?$a%&/>-"]LpX2$HgVAK0jMFBthM.-Gc_kPcG4Mc$G0c#m36V/T)]a@V-h\jK-t
%WQS=:et03QTPHg<L!K('ceVt7bWP!L_t^It"8GJ'2@3.a@hU7!euC2QdmpkeFJRB5$I)Z?8/A:Wh1NfCLfVYC#)dk1[5L;6B]a[G
%SD19q0J"C(7Q+hM?rt(q@FV<2<([W-fOcHc0Z\c*RQo#U</;)$8Vr<OkG`bNXPp3j-LaS>c/T"C%JA7JE6n/De;(.nonj:rg_Ngi
%dg0Y-eDue=Y^`->k_"1qEY\l4-#)hV;1cd-$:kG[QufaEVQ^70R!+2C`hLp_SYu"e8D+?f?5YZ)VAA@P%YIuS!rfJJppBf`5VUod
%i2uC^*t,-L3/p'e&QX)Cka(#N9)Qd^Q1`_4k%GcGjEl*=!gUba(dj0W2kE<<O!Vc?8Xc''Qr2IdV^g0]Iq!.@3$;-'T9(W?AGG]4
%W60Q1]7<3s)m"a[U0gr$?qJQKcXtWP,#_Tl`GT%oH"NIe4fm'u6^9$bSX'*"=ON'>!uMr=E+r4#b!N?O6b!K%6k^j,H*Au7eh<0A
%dF3PXD7`>?JG'dk(q/\KEA6@$LQ(f,c3,ncc9Klc-^]jGC-!Ce%r3l.Jlg%+*TgEXTY#&`e9Slp>7pXbPVBVq-pnk`6SeSsp'`V?
%ciV=CdA'rG>E0Z)lFRhZ_R.L<JTr&O%NTAMf\@94TcM2bYLYnr;,ck,!_^11(imh@:EWTS,)g:Tee]oi]U*h?>tWsT_.-T<9K:-R
%jRtM=-m!,3O$'do;5GXAIZpH"';h5o.qFE8RqWj;YMY;!069?,bk,2hVLnOJ]dfUr]Scs#C:FV.=RC.(WJ+mE51Z&9+`jVugZ]ka
%prP"'2711.MBimZ_R.EMT_,j^>u2RRnfhN"Ib3c1VFCH.*[e`i`QJJ/!jF%"LmdIrN^<+E<I/[A^UOl66_MIb@ec*UE'e["+?O+o
%$[rK'Q79?n#rejR%&U?W(#OXf0!5pF+CXt"n<UQX>`F5ZS%eVml-TaZjl>+!;Y6%9S@a'7!@k:YD#=^9Be;#eTQVZ6T]gUL;3E?S
%>\/VE[=>I<JA%U4Nju%f^TtZc,P0sIN6GW`DJ_Wt;uG[B9^uJ/!6j!(q/d^nk0s9d055YRRtK*4@;"(#PH'9C:n\?pGP0bl[>0\l
%Lq;4KTJfiE*<A$LPHcJ>l9Q!,@Z+]!1W=lQFh^ifBbtX3_iG:haTnS;SP'r,84OK^Wsc&J>;.WeZ;n0g/iCZYA7n1n&2o+M8W]L?
%-$60kq)D<VQ^N?p*Bl+5iU17S0&PWucZ44u:7oK@g!(o$rq,G;s"9r=\M&DUYtn`^#'9qV5(3epp_BmI^=^]@qY2r2l;sLe#D,!Q
%B!p)*m*.?\l'*ri*kG'@3D*"_oI,PL-fON:UQuGG_!gilmNb,SC$7;b*U9@dE'0PM7V>79=a/kW1,kjJPN>IlH9t678l4q6QHljb
%7R])`ST:U0Pj*rS\2nopU1-d:Z3c^E?OroHPBkPlm)`(5`4MlELa60]Y9m;B3g_hK@%mZY(_qmo;_,RGNms@o"gj*k2+VMPT-Ka8
%,pVla'PoLRPMI)n/l`'KLre^E8RH0^G%J)=mX>V.%cYs19Bdb.BYQk3ZmElLR02O([Zk)Xn7QKE]K[N8;@Vau0jO6ndT/d17'8h@
%)_b2Jeg72KB!ZY7MLNKkq)m&RMXhN2=b;Nk[@#5kGVSC)5$Du4?p"3E`mHD3:2N6eRPA%@A3>?#1Z1`^FpQT.>"<(:7g+Tl<3abE
%dY5*`WF+_[-#7MYN:HSLj%g&N%S]qD@0WNnnX%0Z%E1Yj"dKgIPr`9G<RD:V'LF^"MU>'Ob7"p@3MBglXNT'=Ga2]do,d,,S8Q@2
%Mmu6cB:V+Br"EStnI"]E__HG?T8AU7B]i[^E5]Ihri7^iG]r;9/nQ&n_BtQj\\2GPU,rM;j*PCuQF:+C<ctc'`h^"p4Fg%1?:1'%
%j+2dOX&T9EHlCnMWl5,'"Pp*7oF48"(I`+q<iWg<as(bXOtMM+jO.XX'bogfQRp-gQ&?%nWB[Af[orO6V[h"CjgEpDGn,>Mj.SJ\
%22B]TK`1&<j;]Z*"68fLa2+uD9pcJi<irNa3Y)dG45TW&o#GFf,ClBHLGa1M@dcR8!*QJi.en&]K+?QPq6d0k&L)B#a[bFd8VHkp
%,C9H(ZghsW]%Qk=61:3>2lkO]k,LBjqAg^+7qHgWal4k=N#F'48pLKEWo^:1>I"ZI`h)kYA\6VmSX;1Qk8*r3#+s\"g[0(lC<43]
%+*5q[3uZ+(VtT>O[Jtk9$)'a!3tu0KTgV_"B.F`NJ@g6DH_f8M#J5!91VA+TT`&9+(Y*\<henD.O/718pP7,.rUt3]:7'9!rVlNg
%4?K5[#=(>4VKX,E3fpDOB-<Obni>mnZ\-ahEUW)]P;DFL9bqO78Acg_f]+)9AEB$&lnb7SMY'K9p/Ica3^!Xnl<u-jFlQ%i/$hf'
%fEjQ8X,^;EElY&.OYBkhc!#ag[Aqg,_0#UbUn:ePcfgPtcOuL*:KHO4qW.2=hsBAEW=0l3hGYK@["orTir,@9BAqu_G^16'>(iA/
%ETC98\M*OPg;l2iRr<OA]Ih1k5fOiBquGGp.,dST*U)@rpg!mU7G<fH0n.^l<;ZIQ8)N)USJ0=2"+Nd-3?j,O*759VSrlSlIX),Y
%/]_#Dn-l:DTSPYV^u'7m/SO>N(6?R`^K>M83o7n9Qa_2.q_j#sc3&1AJhF+n?ltsS`B0:2XFZ#ok`GicZJZBoiCQ6*8;boS@7H@N
%"4&.hZ)i6Dj]g%2Y]KKqA(U9WoDVGFZ!=FVjla\o_FHe2LsEZ(+*QZ#'7?<,THdh-rL9-TjJ<r8@f.J*r^/aET]J8rrF[[2-QV-2
%1>ld\*#T#WRY%0Ui1rK*GnFB^KTg*.UgnX`"]+\"mTBm73eJ`2gbM_X.H[5,ihX!;dpHoN8".Z.FIG#Qk*E5\kOUjCj\17$Tf_+P
%A__s-1\!qo?s:gVZOXd5KdW4a`nk;2Qr8KDJ$&d(*GKXZcTJt'Df.o"R5nq`LI[5qPDFHo/A?W*1)o%S_C%p1[o&VXF3df>&+Q7<
%i2&U3q%76`Kp-EE,VR&,i&J&*Sg8q.8L$uFM4]E@-EB*T/PgCoc6Sf6PK(l3GaA8Ib7H]*8:L(O3>3&W"EJ$,3-c!_6A1[bEF`/G
%Bc(a%`f\ekUjqahh(;F`a<gBI9od.+42c%D/8(-(T*s]?baaMID?>i^WT0lISG=.BieO!EioQ<4#q,JS'K:O'Du+!'[e7["T9ell
%[iLq3aTo9f/-g1MTpPX=FGI*gd+Ve%qaluqaRi82pBNk=+n>GGIjZh`8KN,BAT36(%cZS9@h+7U,&KLhk?rKD_Y40?4>B2.=ZcfT
%:EoF+*8cVI41kQK4`JaV9[c)F0hr(8T5/KnjZ'5$?:'44H#TW.ph:.3^4VUaEGXiU/053b"0roHi13[=N-BO0-TWMBTC(jh+s$6M
%bHa7`Qk!WTB6G=):kpCoKMQpb:*"B?1D];Im<UNs&*E6U2j\!#EcKuIBK;mEKA,X4J3C'>7jri))W%*<&fsd%iH+n7DhfM(;op'*
%q*@dUTaMAH]>Jdc8b"0ThVm,!'N^>&lgeUM@]dP`Fa1J=U%_WZTej],%#d7ai$8a+bQ<iWE:O]J5/T[5n>R!0LVb3=Ga&W/]A\i6
%*%Hcj)*,eb%L'g_W]5YIL\B`4-sX?;6d"oN)ckVQ(;)Q^_@bln_VkW3S[c3D?%3WE^PD-GR(aC!G2qP!eD,n`T0[]L;Lcp5f7fJc
%ArH1bD@@1g[bRi1%UnJ#+_])cHa,l7,iOs@KkHN8V\Gk41=7PQkS@R=<GJnsGH^4T0DtTW+ST"]nuO&"(7TCQOaH34s0K+Tm54e_
%[<2A9lXsMsY:Z.=UqjWALApMKn?:`@;7'RhQXQ8j,)'&uj]9UpW-S13m9+SMP>cbt/j1DQa&mG.N<fLRp"QgIO_95:P<-[YSW_Gl
%NG,Lpj&s^uSC26m[,hV!iG6VNW#oS[M;<^/%<s;E=Le>XD06PE15u$81!6OIjVORN$WWbJXLpSjDS7HrWg$k>b,J>$<3u/<?EL4(
%T>(9AI/,GpbEr7jJ,]-PhuB0as6u*Lom^'CfDkKhs4d:_r4da[f0B4J$3'IEprbo#omcnk^\f2Rk?n8^gHYVb^]!97?XNg'ci<nr
%s8J@7s6K]mrorO:rq3Jpp@&%PYCCur\,ZD6rZ=]#U[&0bplGI>^]/5erPSX?\6n$.~>
%AI9_PrivateDataEnd
