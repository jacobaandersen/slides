%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: cars1.eps
%%Creator: Adobe Illustrator(R) 21.1
%%For: Alexander Sementsov
%%CreationDate: 3/15/2019
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 21.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 21.1.0 x326 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 9034 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8
%FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FD06A8
%7DA8A8A87DA8A8A87DA8A8A87DFD73A8FFA8A8A8FFFD78A8FFFFFFA8FFAF
%FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFFD07A8FFFD0EA8A1FD51A8FFAFFD05
%FFA8FD1BFFA8FFA8FFA8FFFFFFA8FFA8FFFD4EA8FFA8FFA8FFA8FFA8FFA8
%FD09FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFFFA8FFA8FFA8FFA8
%FFA8FFA8FFA9FFFD48A8FFA87D52522727277D527D527D5252527D7DA87D
%A8A8FFA8FFA8FD0BFFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFFD
%46A8FF7D27FD04F827FD055227F8F8275252FD05F827F827214C2752A8FF
%FD04A87D7DFD0452275227FD07527DA8A8FFFFFFFD43A8CFA827F8F800F8
%27527D527D527D27F8F852527D27F8F821F8F8F800FD04F87DFFA8FFA852
%0027F8F8F8270527FD09F82727527DFFFFFFFD42A87DFD05F827FD065227
%F8F8525252FD0CF852FFA8A87D27FD07F827FD0BF827F8F852A8FFFFFD3E
%A8FF7D27F8F8F821F852527DFD045200F8217D5252F821F827F827F827F8
%27F8F828FFFFAE5200F827F827F827F8272727F827F827F827F827F82727
%27F8F852FFFFFFFD3CA8FF53FD06F8FD0752F8F827525227FD0CF827FFFF
%A828F8F800FD07F8272727FD09F8272727F8F827A8FFFFFD3AA8FF52F8F8
%00F8F82752527D527D5228F8F8277D5227F827F800F827F800F827F8F8F8
%FFFFA827F8F800F827F800F827F8F800272721F827F800F827F8F8F82727
%27F8F827FFFFFFFD39A827FD05F827FD065227F827287D2727FD0DF87DFF
%A852FD0CF827F827FD0BF827FD04F827FFFFFFFD37A827F8F827F827277D
%5252527D5227F827527D2727F827F827F827F827F827F827F87DFFFF7D27
%F827F827F827F827F827F80000272727F827F827F827F827F8272727F827
%F8277DFFFFFFFD34A87DFD05F82728FD055227F8F827527D27FD0EF852FF
%FFA827FD0EF82727FD0BF8272727F8F8F852A8FFFFFD33A852FD05F82752
%7DFD045227F8F8525252F8F8F800F827F800F827F800F827F827FFFFA87D
%F8F8277D525327F8F827F800F827F8272727F800F827F800F821F8272727
%F8F8F8277DFD04FFFD2AA87DFD07A8527DFD05527DFD0452F8F8F8525252
%FD10F8A8FFA8A8F8F87DFD05FF52FD06F8002727FD09F82727FD04527D7D
%A8A8FFA8FFA8A87DFD27A8FFA8FD11FFA8FFA8A87D7D5227F827FD07F827
%F8F8F8217DFFFFFF52F87DFD07FF7E21FD05F8272727F8272752527D52FD
%04A8FFA8A8FD08FFFD22A8FFA8A8A8FFA8FD1BFFA8FFA8A87D7D52522100
%F800F8527DFFFFFF7DF8F8FD09FF2700272727527D7D7DFD04A8FFA8FFA8
%FFFFFFA8FFA8A8FD04FFA8FFFFFFFD1CA8FFA8FFFFFFA8FD29FFA8A8A8FD
%05FFA852F827527DFD04522E5252FD04A8FFA8FFFFA8A8FD07FFA8FFA8FF
%A8FFA8FD09FFA1FD19A8FFFFFFA8A8A8FD1DFFA8FFA8FFA8FFA8FFFD05A8
%FFFFFFA8FFA8FFA8A87DA85227F8F8F852275252A8A8FFA8FFFFFFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8767DFD13A8CA
%A8A9FD04FFA8FD23FFA8FFA8FFA8FD0DFFA8FFA8270527F8A8FD0AFFA8FF
%FFFFA8FD0DFFA8FD09FF4BFD17A8FFA8A8A8FD1FFFA8FFFD05A8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8A8FFFF2727F87DFD04FFA8FFFFFFA8FFA8FF
%A8FFA8A8FD04FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFFFFFA8FFFF7676FD14
%A87EFFA8A8A8FD1BFFA8FFA8A8A8FFA8FFA8FD13FFA8FFFFFFA8FD0BFFA8
%FD05FFA8FD0DFFA8A8FD08FFA17DFD12A8FF7DFD04A8FFA8FD17FFFD04A8
%7EA884FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFA8A8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8FFFFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFFFFFA8FFA8FFA8FFFD12A8AF84A8FFCAFD18FFA8A9A8A8A8
%FFA8FFA8A9A9FD17FFA8FD15FFA8FD19FFFD10A8FFA8FFFFFFA8FFA8FD11
%FFA8CAA8A87EFD06A8FFA8A984FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFA8A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8A8
%FFFFA8FFFFFFA8FFFFFFA8FFA8FFA87D275252A8FFFFA8FFFD10A8FD07FF
%A8FFA8A8A8FFA8FFA8FD07FFA8FFFD05A8FFA1FFFD06A884FD19FFA8FD15
%FFA8FD0EFF7DFD05F87DFD04FFFD10A8FFA8FFA8FFFFFFA8FFA8FFFD0DA8
%FFFFA87EA9A8A87DA8A8A884A884AFA8FFA8FFA8FFA8FFA8FFA8FFA8FD05
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%A8A8FFA8FFA8FFA8FFA8FFA8FFFF7DFD07F87DFFFFFD10A8FD13FFA8FD09
%FFAFFFA8FFA8FFA8FFA8FD0FFFA8A87DA8FD08FFA8FD15FFA8FD0CFFA8F8
%2705272727F82727FFFFFFFD0FA8F8A8FFA87D7D7DA8A8FD07FFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFCFFFFFFFA8FFFFFFA8FFFFFFA8FF
%FFA82727F8F8F82752A8FD04FFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFA8FFA8FFFFFFA8FFFFFFA8FFFFFF27275253522E0527F827A8
%FFFD10A8F852FF27F8F827F8272752527D7DFD23FFA852F8F8F827F827F8
%F8F8A8FD04FFA8FD21FF7D275252277D52522727F8A8FFFFFD0FA8F8527D
%FD0CF827277DA8FFA8FFA8FD0FFFA8FFA8FFA8FFA8FFA8FFA827FD05F827
%FD05F8A8FFFFFFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8522852F82727522727F8F852FFA8A87DFD0DA8
%27527DF827F827F827F827F827F827F8F8F852FD05FF7D527DFD05527D52
%7DA8FD0BFFA827F827F82705272727F827F8F852FFFFFFA8FD14FFA8A8FD
%0BFF277D2752595227522827F87DFFFFFD0EA8FF7DA827FD04F827F8F8F8
%27F8F8F827F8F8F87DFFFFA8FFFD0CF827FFA8FFFFFFA8FD04FF52F8F8F8
%272727F8272727FD04F8A8FFFFA8A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF
%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF7D527D2752A85227275227F852FF
%FD10A8FFFF52F827F827F827F827F827F827F827F8F8F8FD04FF52F827F8
%27F827F827F827F827A8FD08FF7DF827F8270552527D522E2727F8F8F852
%FFFFA8FD15FFA8FD05FFA8FFA8A8A85952277D7D527D527D5227F8522752
%FD10A8FF52FD11F852FFA8FF52FD0CF8FFFFFFA8FFA8FFA8FFF8F8F827F8
%FD04527D5252F827F8F8F8A8FFFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFFD09A8FFA8FF2752F8527D275252272E2727F8F87DFD0EA8FD04
%FF2727F8F8F827F827F827F827F827F827F827FD04FF27F8F827F827F827
%F827F87DFD08FF7DF8F82705525227F85227527D522727F8F87DFFA8FD11
%FFA8FFA8A8A8FD09FFA82727277E7D527D527D5227F8F827FFFD0EA8FFA8
%FFFFFFA87D5227F827FD07F827F8F8F87DFFFFFF7DF8F8F827F8F8F827F8
%F8A8FFFFFFA8FFFFFFA827F8F8F8527D26F8F85227522752270527F852FF
%FFA8FFA8FD05FFA8FFFD07A8FFA8FFA8A8FD08FFA87DF8FD04527E272727
%52F8F827FD11A8FD09FFA87D52522727FD06F87DFD04FF7DFD08F852FD08
%FF7DF827F82752525227277E275227522727F8F852FFA8FFFFFFA8FFA8A8
%A8FFA8A8A8FD0DFFA8A87D7D2727F8F8525227275252275227277DFFFD0F
%A87DFFA87DA8FD0BFFA8A87D7D525252FFA8FFA8FFA8A8FD0752FFFFFFA8
%FFA8FFA8FF27F8F8F8527EF82753A8535204272752F827F852A8A87DFD04
%A8FFA8FFA8FFFFFFA8FD05FFA8A87D7D5252F827FD07F8277D27F8532752
%2EF852FFFD12A87DF827277D7DA8A8FD23FFA827F827F87D7DA82752A8A8
%7D27F8525227F8F852FFA8FD0DFFA8A87D7D5227F827F8F8F827F8F8F827
%F827F827F852FD057D2727FD14A87D27FD05F827275252A8A8FD09FFA8FF
%A8FD09FFA8FFFFFFA8FD04FF7DF8F8F8277DF853A8525252A8FD047D2727
%F852FFFFA8FD05FFA8A87D7D52522727FD0BF852527D7D7DF8F8F827F827
%7D7E5227F87DFD14A8FF7D522727F827F827F8F8F8272752527DA8FD07FF
%A8FD07527DFD09FF27F8F8F8277DF8277DA8275252522727522E05F852FF
%FFFFA8A87D7D5227F827FD09F8272752527D7DA8A8FFA8A8A87DF8F8F827
%F8F8F805F87DFD15A87DA8A87DF827F8F8F827FD09F827277D7DFFFFFFFD
%07F852FFFFA8FFA8FFA8FFA827F8F8F82828F8F8527D27277D5252275227
%27F82752522727FD0BF8272752527D7DFD0DA85227F827F82752FD1BA827
%F827F827F827F827F827F827F827FD04F8277DFFFF2727F827F8277DFD08
%FFA8F827F8F82752F852A87D5252FD047D59272727FD05F827F8F8F827F8
%27277D7DA8A8FFA8FFA8FFFD0DA8FFFD05A8FFFD1BA852FD08F827F8F8F8
%27FD07F82752A87DFD04A8FD07FFA8FF7DF8F827F82727527D2752A87D52
%F8522852F827FD07F852527D7DFD04A8FFFD37A827F8F827F827F827F827
%F827F827F8272727FD05F827527D527DFD065227522727F827F827F8847D
%27277D7D7D272752525227F8272752527D7DA8A8FFFD3FA827FD0CF8277D
%A87D522727FD11F827FD04F85252277DF8FD0452275227F8527DFD47A8FF
%7D27F827FD05F827277DA8FFA8FFA8FFA87D52522727F827F827F827FD05
%F827F827F827F8277D52F8F8527D275252520527A8FFFD48A8FFA87DFD05
%527D7DFD0AA8FFA8A87DA8A8A8FD047D52527D7DFD05F827F8525227F852
%52527D59F82752FD4DA8FFA8FFA8FFA8FFFD13A8FFA8FFA8FFA827F827F8
%27F827F87D7D7DA8A87E7D2727F8FD6EA87DFD08F8527DA87D52F827F87D
%FD6EA8FF7D27F827F827F827F8272727F827F87DFD71A87D27FD0AF8277D
%FD72A8FFA87D5227F827F82727527DFD7AA87DA87DFD7DA8FFFDFCA8FDFC
%A8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFC
%A8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FDFCA8FD0CA8A8
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c137 79.159768, 2016/08/11-13:24:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">cars1</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 2017 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2019-03-15T15:43:22+02:00</xmp:CreateDate>
         <xmp:ModifyDate>2019-03-15T15:43:23+02:00</xmp:ModifyDate>
         <xmp:MetadataDate>2019-03-15T15:43:23+02:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7LirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqvBZXU/91EzD+boPvO2KppZeXGe&#xA;jXcojX/fabt9/QYqjX0fTlIWO2V1A3d5JASfkMVbXSNN/atl+h5P+asVXHR9JPS3I+Tv/E4q0dF0&#xA;mn9yw/2bYqpPoGmnp6i/Jh/FTiqi3ly3P2Z2T/WAb8BTFVq+XIh9qdm/1UCj8T/DFWm8vRjo7N9I&#xA;/piq39ALU1aRR8kb/jYYqptoaDb13Hzhan3qWxVT/QcrNxinidv5SWVvuIxVCXVnc2snpzoUY9O4&#xA;PyIxVQxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KqN5e2VjaS3l9cxWlnAOU1zO6xxoOlWZ&#xA;qDFXg/5hf85MojSaf5HiDEVVtcukrU1629u4pT/KlH+wHXDSvLtNn/MHzhcSSXes30lqz1uLm4uJ&#xA;WjrWtEQtQkdlGw9sKvQ9I0i20u3EcLySSdXuJXLyMfmenyG2RVjuu+ftQnuf0R5ZZ7q9clXuUJKr&#xA;TY8K7H3Y/CP1GlRsHm7XvJ2nctV8zalfajMgEViL24MYUdFVC9ONR9th8h4qsaP57fmwtxJLB5ku&#xA;4UenGHn6iKB0C+qHw0lHw/8AOSf51RHbzGWFalXtLJq+28NfuxpXoX5TfnT+ennbzTb6LaTWdxAG&#xA;E2o3k9ooWC2BAcn0jF16KOpJ606CkPoLzp+YGh+VtOlvtRvIrS1gbhLcSgvWWlRDFEhV5pW/lU0U&#xA;bsRgV8+eYf8AnLy8M7x6Dpk0luD8E2oSonLcdYbVEdf+R5w0qQWP/OTv5g3sssTW9jGPT5KEfUAa&#xA;pToWu2PSpPjjSoe8/wCcnvzQt7ooJLV4xQgMkwqCNxVZgfbbGlWD/nKj8xxT/R7HYAD4r/sa/wDL&#xA;XhpU+8vf85W+c5mdNUs7edUoyxWxMNVqK/FMt03Xrv8AdTBSvZ/y/wDzp8reeo/0XcutpqakBbaS&#xA;iOCfs8as9QagBgd+hCkgEKyW/sJbOXi3xIfsP2P9uKoXFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yqxvz5+YHl7yVpH1/VpazS1WysIyDPO4/kU9FX9pzsPmQCq+TPzB/MvzJ531H19Sl9GwiatlpkRP&#xA;oQjoDT9tyPtO2/hQUAklF+U/y8mu+F7q6tDa7NHa/ZeQeLd1X8flgJQ9Emn0/S7EyStHa2cC06BV&#xA;UDoAB+AGBWDXWra75yuWsNJVrPR1PG5uX2LA9eVPwQfTt0Kt32taJ5Qs303RVW41Vtri5ajcWH85&#xA;HUjsg2Hf3VYDd3lzeXMlzdSNNPKavIxqT/n2wpUsVR+g6Fquv6xaaNpNu11qN9IIreBOpY7kknYK&#xA;oBLMdgNztir68WPyt+Q35amAH19YuArajdxUE1xdOp4RxswNAKMIwRRFDOQW2cIfKnnXz15g846r&#xA;+kNYnLLGClnaKW9G3jJrwjUkn/WYksx3Yk4UsfxVF6U6pqMHIFgzcCB1+MFf44oV9aQcoXr8RBWn&#xA;gAaj/iRxCpbilVtLg29xHMBXgdxtuDsRvXqMUJzfSXdjdQ6jYTNFcWzAxzxncA/ZNR86Hxrir6q/&#xA;Iz87rXztYf4f8wuF1yIAJIRQSjoCG/mr0r328KghXod7ZyWk5ifcdUbsRgVD4q7FXYq7FXYq7FXY&#xA;q7FXYq7FXYqvSKWQ0RGc/wCSCf1Yqxr8wvMmv+WdMH6H8t6jr2tXKE2sFraXE1vF2D3MkSkbf77U&#xA;8j34g1xV8peZfLH5u67q9xquu6BrM9/OeUss1jcqFUdFUemFRFHRRQAZJLIvKn5cnS+F/q8Re+G6&#xA;QstY4W967M4+4dvHAShOfMHmXTdDtvVuW5TsP3Nsp+Nz/BfFjgViFtpes+bJ/wBKa5IbLRYgXhgr&#xA;xBUb1Fegp9p2+jboVQ3mLzvBBbjSPLai2s4xwa5QcSfER9x7udz+JaVhGFLsVcqszBVBLE0AG5JO&#xA;Kvsv8hvyij/L7y3J5l1qEN5q1GIAQP8AD9VjkI9O3qeju3H1WPTp0UlgSh415rt/On52ef7m28rQ&#xA;Ne6PpbGOK9kPpWw5mkl1KzGgaZl+BB8XpqqgfBhVW1P/AJxF/NeztGngk0zUZFFRa21xIsp+Rnig&#xA;j/4fG1t49q2kapo+oTadqtpLY39ueM1tOhjkU9RVWp1G48cUoaORo5FkXZkIZT7g1xVOdejHpF6U&#xA;Ky8QB0HIMf8AjXEICSYpdirNbTyp5h1PTI30/Sru7ie2VmkiglkRfgHxFlUig+1XAhlH5S/lX+Y1&#xA;v5v0zVGsjp9lDJ/pbzSIJTAwKyILZGa5bmtVoqfSOuJV9mNZSXmmQJdbXYjQuxABEnEcqhajr1pg&#xA;Vjs8EsErRyLxdeoxVTxV2KuxV2KuxVciO7BUBZj0A3JxVMYNAvJADIViHgTU/cMVdHp1pIeNs73r&#xA;AlWaLisSkbfFIarseoWp9sVR1r5ZJcPcHb/fKE03/mc0LU7EBcVTSHRbGKlIl29qn7zXFUYkESAA&#xA;KNsVXgACg2GKuxVrgn8o+7FUNcaVp1zGY57aOVCalXVWBNa9CD3xVjmqflx5Cvo3hutDspoZBR4v&#xA;RQLsQRsoA/ZxVht//wA40fkzd1I0I2zt+3BdXK/cpkZP+Fw2rDtS/wCcS/ywkZ1sda1KCcbekHgu&#xA;eJ6f3aQiT5742qQ3X/OFswkBtPNitGW3EtiQVX5rOeR+gY2rOvyz/wCcYvKXk/U4NZ1C7fXdXtW5&#xA;2rSxrDbRSDdZFhBkJdf2SzkDqADQ42qY/n7J5uvfK82i+VrNrq7uh6NzKJIoVijmRxIS8rIv9yro&#xA;VJ/3YG7DAFed/lf+b3lv8sfJkXlfUNEvG1y3mmfU5rc2zwSTvISD6ySurcYgqbfy4UEs3tv+ck7S&#xA;6jSS28p6rPHL/dtEI3DVNPh4k1+jFUr/ADA8hXX5z2um6hLot75WuLHmqX9zFBJPNC9P3Rgaa2fi&#xA;G+JWZtt6A8jjaQkun/8AOHeiqoN/ql3cH/iqWK2PfsYLsDt+0cbVkz/841eREktVubc3STTcZEuJ&#xA;p2pSJmB5QSWdfiWn2e/3C1ZHp35AfljYgejo1ty22khjuV222F4t033sf11bVk2n+RfKekqW0/To&#xA;7Mr8VbX/AEYbb/ZhMSD7sVVYYtKeUN9SsywpVuSTTGlN6KrsT8I74qjNLH1drjT+i2zBrcf8US1M&#xA;YoOgRg0ajwXFUwxVIfOd7pmmaJNq2oP6UFqYw8wFaCSRYxy/yavU+GAmmcIGRoc0nwsHYq7FXYqv&#xA;jikkYrGOTAFqVA2UVPXFVbQ34Xk93NUx24WONANzLKAAgHdhUr+umT24WPVkEenT3pP6QIaNulmv&#xA;90B/xYf92Hxr8Pt3yDJOIoY4lCooAUUFBSgHhiq/FXYq7FXFgOppiqhNe28MZkkcKi7s7EKo+ZOK&#xA;pbceZrBK8JDLQVHpK0gP+zA4fjkuEosLY9Qv7uNZbaBfSbo80oB+arEJQfpYZEhK4W1+/wDe3nEj&#xA;p6EaoD8/U9b8KYq4aXZH+9Qz96Ts0wB8QshYA/IYqilVUUKoCqNgo2AGKt4q7FUuW2hfU7xHWrNH&#xA;FIJOIBXmHjPF+taR4q8Ssv8AnE7TYtfjubvXXu9GSX1HsjBwmkQGvpNMsncdXC18AMUU95tbW3tb&#xA;aK1to1ht4EWOGJAFVEUUVVA6AAYpVcVQl3Yi4kVm4Mq/sOHYf8K6D8MVUL2EQWcX92pW5t+NE4oO&#xA;UyKeIFTUhiOuKplirsVdiqBuKRataSnZZkltzSnxPtKlfkscn34qjsVSHz35fk8xeTdZ0WIgT31p&#xA;LFAWNFEvGsdT4cwK5GQsU24MnBMS7ix/TVvl061W/jMN8IY/rUTEMVl4jmpYEg0au4wjkwnXEa5I&#xA;jCxdirsVZDDoNhLZJHdRCR2ozE1BBPYEeGESIQRao2nNBLbGzhi9C2DCOFmMYDsKc6hXqeNQPmcS&#xA;bSAiY76+h2eyZ2NKmJ42Tt3dom2qf2e2BV41xVAE9rcRP3X0nk7A9YRKvfxxVd+ntPBpJJ6LHYLO&#xA;DCTWo2EgUnp2xVbJ5g08MUjkE0g6xwhpmHzWMMR9OKoS91fVEtpLj0FtoUFS0zcnHyjjqDXt+8GE&#xA;CygmkkudR1Sa3aU3nxMARb2/Fd9qKG+J69z8Xt3yUo0gG1pS3dmljR5JOI4z3IDyI5VgFk+1srcf&#xA;lUE9K4LNL1XxX89xHbRGOOS9SicoHEjSIFYfvGXko+LievicYhSWQabZm0s0gJ5MKs5HTkxqae2+&#xA;MjZSBSKyKXYq7FXYq7FULGgGqXD71aCFT4UV5T/xtiqKxV2KuxV2KoHV152sS9Sbm1IFQD8Nwjd/&#xA;ALXFUdirsVdiryb88vznsvIkNpaae0V15nZvXhspAxiWJkePnOUIYCrVVRuadhvirxnRf+ct/wAw&#xA;bPUA2s2Vlf2Zb97brG1s9KnaKVSwHT9tCcVfTvkTz1oXnby7DrmjSMYHJjmhkFJIZlALRSAVHIch&#xA;02I3GKobVQBqE4H81fvAOKoTFXYqviUNIinoSB95xV5X5G/5yD1ez/JzUfM3mWmqavZ6kdOstkh9&#xA;d5YlmjEnBQo4DmTxX7I8d8VY5Y/85jeZEkrf+XbOeOv2YJpYGp/rOJv1YqyfTf8AnMXyvJT9J+X7&#xA;628fq0kNz/xP6virKtP/AOcofyhulrPqFzYH+W4tZmP/ACQWbFWf+WPOnlXzTbPc+X9Ug1GKMgSi&#xA;FvjQnpzjajpXtyGKp1irsVU3t4H+3GrfNQcNrSn+jtP/AOWWL/gF/pjxFFBUighiHGKNYweoUBR+&#xA;GAlKpirsVeRfm1/zkP5f8lyS6TpSJq/mNKiSENS3tj0/fuv7X/Fa7+JXbFXzhrP5+fmvql2blvMc&#xA;toC3JLazAgjTeoWirVgP8pmxVPvJ/wDzlD+Y2i3iJq88fmDTlIEkM6rFNx7mOdFU193DDFX1n5N8&#xA;4aL5v8vWuvaPIXs7kH4HAEkbrs8cigmjKeu/uNsVTNP+OhN/xii/4lJiqIxV2KuxV2KoO+BNxYD4&#xA;ePrksGFa0hkIp7hgDiqMxV2KpV5p8w2flzy5qOu3g5W+nQPOyAgFyo+GNa/tO1FHucVfFWsXCSaw&#xA;Na83/Wr/AF/zCy3SWVuREfTlbjHylkSQLHQcY0RT8I6rthQp+a/LOjJBJLp00j26yzxCG4o0vCCb&#xA;0DcRuqorI0gp0DDbFXpP/OH2rXMHmHzDoMjH05rVLwIaU528vosygHbl6w/DAl75rApqU3zB+9Ri&#xA;qCxV2Kq1mCbuEAVPNf14q8N/5yM/L7SfJnkKxtdAjlTS7zXJr65RyrLFNNbhEjQhVIQLEeINe++K&#xA;vnLFXYq7FWReQPOuqeTPNVlr2nuwNu4FzADRZ7diPUibsQy9PA0PUYq/QLSNVstW0u01SxkEtnfQ&#xA;pcW8g7pIoZfwOKvgzzX5q/MPTfM2radeeYNUFzZ3c8EoN5cDeOQrt8fTbb2xVKx5888ggjzFqYI3&#xA;BF5cf814qmFp+bf5oWkgki816qzAg0mu5pl2/wAmVnX8MVfZ35N+Y9b8yflpomta4wk1O7SX15FQ&#xA;RhxHcSRo/FaKCyIpNNsVZpiry7/nIL8zX8k+TjFp8nDX9YLW2nMv2olAHrTj3RWAX/KIPbFXxhp+&#xA;n3uq3oijDzySvQ8QXkkkY9B1LMTigs/0/wDLa+LSWyajplrewxvJcWTXB9WNYt29RkV4xxHWr7d8&#xA;KGK6/wCWLqzlMF1B9XuGQSwuhUpIjbrIjqSjq3ZlOKberf8AOJfn19N8y3flC9bjb6vyltQdgt5A&#xA;lWABptLEPvUDAl9Wp/x0Jv8AjFF/xKTFURirsVdirsVQWo+mstjI4J4XA407F43jr/w+Kr5tV0yG&#xA;Qxy3cKSitYi689v8mvLFVn6UjY8Ybe4letOPovF2rXlMI0/HFXmf56a8h0PSdDvYGt7bWL+NruOV&#xA;05va2CteTU9NnAAaKME174q8d8u6n5cubef8wLiFjZRXFZ9OvAZI7K+cqDcW85DOY25KOCoSGINP&#xA;hFChKtS0zy7Z61cRLqUixy2zCysTbXMjI5tZYZQ00iRoVkmPqcqdQOlMVSz8qfzC0z8vPOt9rl1B&#xA;LcpPpr2620PEGSWRoXQMzfYWsVS2/wAjgSH1HpWq6jq+mWmqajbLZ3t7Ck01opJERdQRGSaElVoG&#xA;PjiqKxV2KorTJFjv4Wbpyp/wQp/HFUx1OLyf5ptb3y/fPZ6rEKpfaf6iSMjKf21U80ZW6HYg4q8o&#xA;13/nEf8AL+8Z5NKvr7SnavGLmtxCvhRZB6n3yYqwXV/+cO/NEPI6Rr9leACoF1HLak+3wfWR+OKs&#xA;L1X/AJxs/N+w5MujrexrWslrcQPWngjOkh/4HFWLXv5ZfmLZPxufLGqR705fU52Un2ZVKn6Dir66&#xA;/wCcctP8zad+V1lZ+YLaW0minn+pQXClJVtmbkvJG+JfjZ6V7U7UxVgf/ORv5Gavrep/4v8AKtqb&#xA;u8lVU1bT46eo5QBUniU/aPEcXUb7Aiu+Kvnyf8u/zAt34T+WdVibsHsrgVHSoqmKpj5W/KTz75g1&#xA;200qPRr20W4cCa8ubeWKGGOvxyO7qooo7dT0G+KvvDRNIstG0ey0mxThZ2EEdtAvfhEoUVp3NNzi&#xA;qNxV8Hfnd57fzj+YGo6hFIX02zb6lpYrVfRiJHMf8ZH5SfSBiqbaXpNr5c8r2sV3PPpWseZYWWy1&#xA;fgDbwRn/AHW70JX1v2nX4lQrT9oEoWaP+X3mXQfKOv399blNQ1QQ6Tp0AIk5C5uEWSUshYBWGynv&#xA;X5YgKq67ex63ztrNzLpVpBJBpKtxrby6VGBNGCP91z2qesP8rYfZOKli3ktpbD8y/Lt7CQkjalYs&#xA;oBO/78K/Lf8Aa6YFD7wbVNNh1OdJbqJJBFEOBdQ1eUm3Gta4pVf0rE20MFxK+9FELx1p/lyiNP8A&#xA;hsVd9a1KT+6seFOv1iVUP0ekJ/xpirvT1l9zNbwg9UEbykfJy8YP/AYq2NPlbaa9uJUP7FUjH/BR&#xA;JG//AA2KpP5gm8r6att+lLy1tkMyM0mozqaJGC+zXDHjuvbFUg1L89/ye0ZPRbzDbOE2SKxSS5Xx&#xA;2Nujp+OKsO1b/nLv8v7cMunadqN/IPslkigjP+yZ2f8A4TFXjnnv87F8/ectBu76w/ROj6f6ts8Y&#xA;m9ZhHeUjuJuZjjAIjpQce2Kppputx2/mbT/JdzYxpZITa2elKykwckJF3POFYSTSV5ALtvXYgVKE&#xA;ubzFro0y61G51KeazuoF9K3M8rRRy3dmY1tl5/aaNJ3lkO42jqeRxUsq/Lf8iLWd9O8z+YLj6xHK&#xA;iXVvpXp8Vow5ReuxPxUFCUp867jAl7pirsVdireKvA/zQ/JDzNdeZ9R81eWriLjdSNeSW5kaGdJm&#xA;HKZkegU8n5N9odaYq830X85fzV0jj9R8y3rqo+GO4kF2oUduFwJQPuxVm+j/APOWv5kWgCahbafq&#xA;SD7TvE8Mp+mJ1T/hMVZxpH/OY+iSEDWPLlzbDbk9nPHcV8SFkW3p8uWKs20j/nJn8otQAEuqS6dI&#xA;2wjvLeVfveISxj6WxVnGh+ePJuvOI9G1ux1CYivoW9xG8oHvGG5j6RirHPzS/OLRPy6bT11TT7y7&#xA;GoiQxSWyx8F9LjUMzunxfGNhirA/+hwvI/8A1ZdT+63/AOqmKvS/yy/M3RvzC0W41TS7e4tUtbg2&#xA;0sNyEDcgivyHBnFCHxVmGKsS/NjzEfLv5ceYNWR/Tmhs3jtnHVZp6QxEfKSQHFXwLYwifULS2bZZ&#xA;JY1bv9tgP1Yq9lh88wX/AOYOo+SdXsl1Pyzc3S6dZWgQA2z259FXTjxbjVTyNajqPAlDJovNEmg6&#xA;6fLMMd1cx6ZELu0tLGNZOVo1IEt5PUJkZkL+qWBH3ChKsa0WHQ9J1y502y8n6wElnlVdQvGkMcRa&#xA;KWBpAAvHgY5WryY1G/YYFecaG0MXnfy/NcMiWy31oZXkICBVuFLFidgAOtcSofYt9+dH5R6HcSiT&#xA;zFZeisUaollW6FQz1AFssg7jAliurf8AOW35bWvJbG11HUXFeLJFHFGadKtK6uK/6mKsL1b/AJzI&#xA;1N+S6R5ahhp9mS7uHmr80jSGn/BYqw3VP+coPzd1JuFrd22nc9gllaox37Az+u33HFUra8/P7zT9&#xA;qfXrqGQ9C08FuTT5xw4qidO/5x3/ADKv253iW1gWNXa6uA7fP9wJt/pxVlmmf84tfZbVNf8A9aK1&#xA;g/VJI/8AxpirKLf/AJxv/L2G0liY3lxcPGypczTCqOQQHCRrGp4ncBqjxxV4b50/Kbzt5ZvHW4sZ&#xA;L2xBPpahaRl4WXxYICYz7N+OKpl5M/MfXtLktYLrQo9ZuLFfSsLl4Cb2BOJAiSQDkVodge3thtWe&#xA;+WvIHm3zrq9rqfmqyGkeXLOn1bSinoGRK19JLcEmJGP22b4mGw26Nop7uAAAAKAbADAl2KuxV2Ku&#xA;xV2Kvkb83fyt1HyhrE15bQmTy9dyM9pcIKiHka+jJT7JWtFJ+0PeuKvP/UfbetBQV3oPpxV3Jabi&#xA;hHh3xVfFC0sqQwhppZCFjjjUszOxoFA61+WKsxvPyg/MzTreG9OiXDKyrKhtissqEjkAY4yZFZf9&#xA;XFU0svzi812mlt5Y85WEfmfRlYE2GsCRbmIrsDFcgrNGwGwJrQbDFUTp3mT/AJx8PKTUPJ+rRuw2&#xA;gi1D1o1PsxNu334q9K8qf85G/k75Q0hNK8t+WtTtLUn1J1IgLPKQAXaRp3ZzQdT91MVTaX/nMPyY&#xA;IyYtD1F5P2VYwKD8yHb9WKvP/wA4f+ch7Hz55SXy/p+mT6fzuop7maaRHVoogx4UQV+2Vb6MVeIQ&#xA;XDwXUdwgAeJ1kUdqqajFXszJpnl/zFPe+VgdU8x6yDqC39wqra6dZ3f74tU1Xlwf4nbbj4VIJQm9&#xA;rr+hT+XLO80R7l9RGpNpRuoAlvHPf3kMhWd1NeUDTS8lU8aH9namFUjsdb8z2OjXC6vqF3PeWFvd&#xA;NqPrys3C71ACC1tdzQtFGHnZf2a07UwKWJ6V+WvnjzYq3Oj2Am0+NjELppI4kDDd/tsrNQmnwg4F&#xA;DLtL/wCcYvNk3FtR1Oys1PVYvUncfMcYl+5sUst0v/nGDyvCFOpateXjDqIVjt0J+REzf8NirLtM&#xA;/JL8stPoU0VLiQdXunkmr81din/C4qyzTtE0XTF46dp9tZL4W8McQ/4QLiqNxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxVTuLa3uYJLe5iSeCUFZYZFDoynqGVqgjFXnGs/wDOPX5b6lK0sVvcaa7mrCyl&#xA;4rX2SVZVX6BiqVw/84w+RVctJf6lItaqnqQKKeDEQ1P0UxVm/lT8svJPlZvV0jTUS7pQ3kpM0/0O&#xA;5PH/AGNMVZRiqE1LR9I1OL0tSsoL2L+S4iSVd/ZwcVYldfkl+V1zIZJNBjVjvSKa4hXf/JjkRfwx&#xA;VBz/AJAfldLXhpckG1P3dzcHfx+N3xVLZ/8AnGv8vJDVJdQhFQaJPGR8vjifFXnv51flBp3lTR7H&#xA;VPL8Uz2Ku0WpySv6jBmp6LmgACn4lNBStMVeN4q9E8ta3pvmby5B5N1/VpdJe1eulX9eVu6sa+hd&#xA;LVahD/dsTtX7yr0jRvy203QvJlvBd69Cqw6pBq8l6OPon0CAsaVYH4lHWvXthpDAdf1FNc1O08te&#xA;VLaR7V53NpFIxaa5uZjWS6nY7/S3RR27BX0v5S8u23lzy5YaNbnmtpEFkl7ySseUsh/13YtgSm+K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVSu7S2u7aW1uol&#xA;ntp1Mc0MgDI6MKFWB6g4q8J86f8AOM3q3El35SvEhjclv0beFuK96RzAOaeAcf7LFWATfkF+asch&#xA;VNHWVR0dLq1Cn/g5VP4YqnOif84/fmbcuEvXt9LgIAdpplmcDwRYvU3/ANkPnir238vvyq8veTI2&#xA;ngLX2rzLxuNTnA5lf5Y139NfapJ7k4qzTFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FX//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:OriginalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:12d1a592-b9a5-b546-91c2-ba1697fd368a</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:12d1a592-b9a5-b546-91c2-ba1697fd368a</xmpMM:InstanceID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:8cdf145a-4da6-4f18-b4ca-687d10460776</stRef:instanceID>
            <stRef:documentID>xmp.did:a4ffcacb-4090-cc4c-88ae-01a7dad32f05</stRef:documentID>
            <stRef:originalDocumentID>uuid:65E6390686CF11DBA6E2D887CEACB407</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:31568511-86e7-3444-b520-5e909e44ca76</stEvt:instanceID>
                  <stEvt:when>2019-03-15T13:43:03+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:12d1a592-b9a5-b546-91c2-ba1697fd368a</stEvt:instanceID>
                  <stEvt:when>2019-03-15T15:43:23+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Web</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.8 .8 .8 rgb
f
412.447 238.067 mo
410.81 232.406 409.016 226.469 404.424 222.428 cv
403.128 221.287 401.637 220.37 400.006 219.794 cv
400.006 219.794 397.517 217.787 390.431 217.823 cv
390.071 218.065 389.715 218.325 389.361 218.597 cv
389.358 218.651 389.355 218.682 389.355 218.687 cv
389.252 218.68 li
388.531 219.241 387.823 219.864 387.131 220.532 cv
395.799 220.052 398.761 222.44 398.761 222.44 cv
400.393 223.017 401.882 223.934 403.179 225.074 cv
407.771 229.115 409.563 235.054 411.202 240.715 cv
413.052 247.105 412.372 254.577 410.492 261.022 cv
410.909 260.936 li
411.001 260.678 411.091 260.419 411.178 260.159 cv
413.469 253.341 414.469 245.059 412.447 238.067 cv
cp
0 0 0 rgb
f
233.604 240.644 mo
240.121 246.378 242.667 254.808 244.992 262.843 cv
245.592 264.915 246.002 267.067 246.249 269.264 cv
246.689 262.686 246.825 255.294 245.473 251.481 cv
243.127 244.871 235.876 237.514 231.185 235.808 cv
228.8 234.94 223.384 233.661 217.529 234.236 cv
224.705 234.787 227.334 236.905 227.334 236.905 cv
229.649 237.723 231.764 239.023 233.604 240.644 cv
cp
f
99.1118 290.356 mo
98.8623 290.299 98.6152 290.243 98.3721 290.188 cv
97.0264 289.885 95.7554 289.61 94.5718 289.369 cv
94.4414 289.341 94.3115 289.315 94.1836 289.29 cv
94.0806 289.27 93.98 289.25 93.8789 289.229 cv
91.8647 290.174 89.8472 290.662 87.9312 290.66 cv
83.2041 290.657 78.3623 288.863 74.1997 285.413 cv
62.9497 282.915 50.3345 279.708 41.8457 277.35 cv
41.9199 279.421 42.1191 281.074 42.4365 282.171 cv
44.3623 288.838 50.4492 293.908 56.4009 296.98 cv
63.584 300.689 73.1602 301.12 81.0703 300.222 cv
87.6787 299.471 94.1558 296.943 99.1787 292.584 cv
99.8306 292.019 100.455 291.425 101.052 290.807 cv
100.815 290.751 100.579 290.694 100.345 290.64 cv
99.9268 290.544 99.5171 290.448 99.1118 290.356 cv
cp
.0588235 .0588235 .0588235 rgb
f
77.2021 286.07 mo
79.6196 287.224 82.1284 287.78 84.5234 287.781 cv
84.7993 287.782 85.0815 287.762 85.3682 287.726 cv
82.8418 287.252 80.0874 286.69 77.2021 286.07 cv
cp
.109804 .109804 .109804 rgb
f
363.065 261.322 mo
370.762 260.012 li
363.065 261.321 li
363.065 261.322 li
cp
.0588235 .0588235 .0588235 rgb
f
410.48 253.241 mo
409.128 267.064 400.864 275.182 394.304 275.178 cv
385.687 275.172 376.524 266.724 376.524 251.456 cv
376.524 236.864 386.29 224.544 394.304 224.544 cv
406.004 224.544 411.967 238.046 410.48 253.241 cv
cp
411.202 240.715 mo
409.563 235.054 407.771 229.115 403.179 225.074 cv
401.882 223.934 400.393 223.017 398.761 222.44 cv
398.761 222.44 395.799 220.052 387.131 220.532 cv
382.229 225.264 378.169 232.355 376.732 237.3 cv
376.006 239.806 374.972 243.677 373.967 247.518 cv
373.984 247.623 li
372.304 253.881 370.762 260.012 370.762 260.012 cv
370.762 260.012 370.399 267.035 371.963 269.025 cv
366.083 269.943 li
365.173 270.115 364.269 270.285 363.37 270.454 cv
365.292 273.863 368.721 276.511 372.089 278.25 cv
377.15 280.862 383.896 281.166 389.47 280.533 cv
394.126 280.004 398.689 278.224 402.229 275.152 cv
405.936 271.935 408.372 267.461 409.934 262.807 cv
410.13 262.222 410.316 261.626 410.492 261.022 cv
412.372 254.577 413.052 247.105 411.202 240.715 cv
cp
f
406.223 253.247 mo
405.158 264.124 397.065 273.152 391.902 273.149 cv
385.122 273.146 377.05 266.839 377.05 252.189 cv
377.05 240.709 386.446 230.254 392.751 230.254 cv
401.957 230.254 407.392 241.29 406.223 253.247 cv
cp
394.304 224.544 mo
386.29 224.544 376.524 236.864 376.524 251.456 cv
376.524 266.724 385.687 275.172 394.304 275.178 cv
400.864 275.182 409.128 267.064 410.48 253.241 cv
411.967 238.046 406.004 224.544 394.304 224.544 cv
cp
.160784 .176471 .180392 rgb
f
404.32 246.229 mo
404.32 247.104 403.269 246.706 403.118 245.979 cv
402.968 245.254 402.893 243.926 402.817 242.948 cv
402.743 241.971 400.038 238.066 399.622 237.09 cv
399.206 236.113 400.377 235.169 400.64 235.438 cv
403.944 238.817 403.795 241.372 404.32 242.349 cv
404.846 243.325 404.32 245.354 404.32 246.229 cv
cp
405.468 250.542 mo
405.556 250.853 405.476 251.149 405.323 251.408 cv
405.034 252.34 404.771 252.678 403.419 252.641 cv
402.066 252.603 399.834 252.746 399.212 252.438 cv
399.125 252.395 399.028 252.323 398.929 252.232 cv
397.613 251.915 397.699 251.055 398.11 250.461 cv
398.159 250.266 398.292 250.107 398.541 250.019 cv
398.656 249.938 398.771 249.884 398.874 249.864 cv
399.205 249.735 399.8 249.554 400.752 249.431 cv
402.367 249.223 404.133 248.922 404.809 249.26 cv
405.268 249.489 405.473 249.968 405.468 250.542 cv
cp
402.817 260.79 mo
401.766 262.743 398.272 266.989 397.841 266.989 cv
397.409 266.989 397.378 265.486 397.378 265.486 cv
397.378 265.486 400.979 260.829 401.673 259.477 cv
402.367 258.125 402.893 254.756 402.893 254.756 cv
404.17 254.788 li
404.17 254.788 403.869 258.837 402.817 260.79 cv
cp
395.652 268.558 mo
395.406 268.689 li
394.797 269.016 394.055 268.596 394.021 267.904 cv
393.639 259.977 li
393.624 259.664 393.765 259.364 394.016 259.177 cv
394.608 258.733 395.458 259.117 395.518 259.855 cv
396.146 267.652 li
396.176 268.025 395.981 268.381 395.652 268.558 cv
cp
389 269.168 mo
387.608 269.091 385.95 268.484 385.156 268.041 cv
383.812 267.29 381.934 266.013 382.685 265.412 cv
383.436 264.811 385.822 263.423 385.822 263.423 cv
389.37 260.131 li
389.37 260.131 390.788 259.251 390.905 261.28 cv
390.981 262.589 390.96 265.341 390.935 267.128 cv
390.921 268.062 389.933 269.22 389 269.168 cv
cp
380.199 263.078 mo
380.044 262.574 380.212 262.025 380.594 261.662 cv
381.731 260.579 384.858 257.615 385.389 257.248 cv
386.04 256.798 389.847 255.107 388.544 257.905 cv
387.242 260.704 382.384 263.781 381.883 263.896 cv
381.495 263.983 380.476 263.974 380.199 263.078 cv
cp
378.478 254.349 mo
378.478 252.898 379.407 248.34 379.871 246.152 cv
379.979 245.644 380.612 245.462 380.973 245.838 cv
382.254 247.173 384.646 249.655 385.614 250.587 cv
386.967 251.89 381.332 258.018 379.83 258.372 cv
378.327 258.726 378.478 256.282 378.478 254.349 cv
cp
382.723 239.617 mo
383.093 239.348 383.603 239.385 383.93 239.704 cv
385.042 240.788 387.528 243.218 388.466 244.177 cv
389.69 245.429 388.444 246.229 387.843 246.431 cv
387.402 246.577 386.586 246.141 386.18 245.896 cv
386.094 245.858 386.012 245.811 385.938 245.744 cv
382.048 242.224 li
381.904 242.095 381.813 241.93 381.772 241.755 cv
381.585 241.561 381.446 241.408 381.382 241.321 cv
381.087 240.921 382.034 240.122 382.723 239.617 cv
cp
386.762 234.731 mo
387.808 233.821 388.923 232.965 389.631 232.749 cv
391.286 232.244 394.172 231.418 393.818 233.371 cv
393.465 235.324 392.509 240.102 389.749 241.401 cv
389.306 241.736 388.995 241.873 388.995 241.873 cv
384.087 237.265 li
384.773 236.028 385.732 235.234 386.762 234.731 cv
cp
396.732 260.416 mo
395.869 258.012 396.508 256.021 396.508 256.021 cv
396.508 256.021 397.486 255.244 398.686 255.119 cv
398.686 255.119 401.315 254.631 401.203 255.57 cv
401.09 256.51 399.438 260.225 398.949 260.79 cv
398.461 261.354 397.597 262.82 396.732 260.416 cv
cp
394.354 245.379 mo
394.972 245.5 396.808 248.083 397.378 248.834 cv
397.948 249.585 397.609 251.789 397.378 253.292 cv
397.146 254.794 395.355 257.799 394.784 258.156 cv
394.213 258.514 391.899 257.849 389.646 256.798 cv
387.393 255.746 387.242 253.342 387.635 249.857 cv
388.027 246.373 390.748 245.729 390.958 245.638 cv
390.958 245.638 393.736 245.257 394.354 245.379 cv
cp
394.113 242.495 mo
395.985 233.497 li
396.102 232.936 396.69 232.609 397.229 232.807 cv
397.681 232.973 li
398.127 233.136 398.38 233.606 398.271 234.069 cv
397.816 236.003 396.645 240.882 395.921 242.992 cv
395.791 243.372 395.435 243.626 395.033 243.626 cv
394.438 243.626 393.992 243.078 394.113 242.495 cv
cp
399.111 239.318 mo
399.111 239.318 401.816 243.676 401.866 246.33 cv
401.866 246.33 401.165 247.231 399.111 246.931 cv
397.059 246.631 397.209 246.291 397.659 243.155 cv
398.11 240.02 398.743 238.692 399.111 239.318 cv
cp
392.751 230.254 mo
386.446 230.254 377.05 240.709 377.05 252.189 cv
377.05 266.839 385.122 273.146 391.902 273.149 cv
397.065 273.152 405.158 264.124 406.223 253.247 cv
407.392 241.29 401.957 230.254 392.751 230.254 cv
cp
.717647 .721569 .741176 rgb
f
392.701 234.109 mo
392.701 234.109 393.252 234.861 392.2 237.896 cv
391.548 239.778 390.473 240.855 389.749 241.401 cv
392.509 240.102 393.465 235.324 393.818 233.371 cv
394.172 231.418 391.286 232.244 389.631 232.749 cv
388.923 232.965 387.808 233.821 386.762 234.731 cv
389.484 233.399 392.701 234.109 392.701 234.109 cv
cp
.172549 .176471 .176471 rgb
f
381.772 241.755 mo
381.708 241.479 381.771 241.176 381.972 240.946 cv
382.423 240.429 li
382.777 240.021 383.406 240.01 383.776 240.403 cv
387.387 244.236 li
387.704 244.573 387.719 245.095 387.421 245.45 cv
387.251 245.653 li
386.981 245.974 386.542 246.058 386.18 245.896 cv
386.586 246.141 387.402 246.577 387.843 246.431 cv
388.444 246.229 389.69 245.429 388.466 244.177 cv
387.528 243.218 385.042 240.788 383.93 239.704 cv
383.603 239.385 383.093 239.348 382.723 239.617 cv
382.034 240.122 381.087 240.921 381.382 241.321 cv
381.446 241.408 381.585 241.561 381.772 241.755 cv
cp
f
389.749 241.401 mo
390.473 240.855 391.548 239.778 392.2 237.896 cv
393.252 234.861 392.701 234.109 392.701 234.109 cv
392.701 234.109 389.484 233.399 386.762 234.731 cv
385.732 235.234 384.773 236.028 384.087 237.265 cv
388.995 241.873 li
388.995 241.873 389.306 241.736 389.749 241.401 cv
cp
.0509804 .0588235 .0470588 rgb
f
399.111 246.931 mo
401.165 247.231 401.866 246.33 401.866 246.33 cv
401.816 243.676 399.111 239.318 399.111 239.318 cv
398.743 238.692 398.11 240.02 397.659 243.155 cv
397.209 246.291 397.059 246.631 399.111 246.931 cv
cp
f
387.251 245.653 mo
387.421 245.45 li
387.719 245.095 387.704 244.573 387.387 244.236 cv
383.776 240.403 li
383.406 240.01 382.777 240.021 382.423 240.429 cv
381.972 240.946 li
381.771 241.176 381.708 241.479 381.772 241.755 cv
381.813 241.93 381.904 242.095 382.048 242.224 cv
385.938 245.744 li
386.012 245.811 386.094 245.858 386.18 245.896 cv
386.542 246.058 386.981 245.974 387.251 245.653 cv
cp
f
380.741 263.073 mo
380.646 262.907 li
380.478 262.616 380.539 262.247 380.792 262.027 cv
385.046 258.328 li
385.323 258.087 385.741 258.102 386.002 258.361 cv
386.282 258.643 386.274 259.101 385.983 259.371 cv
381.826 263.235 li
381.496 263.542 380.967 263.463 380.741 263.073 cv
cp
381.883 263.896 mo
382.384 263.781 387.242 260.704 388.544 257.905 cv
389.847 255.107 386.04 256.798 385.389 257.248 cv
384.858 257.615 381.731 260.579 380.594 261.662 cv
380.212 262.025 380.044 262.574 380.199 263.078 cv
380.476 263.974 381.495 263.983 381.883 263.896 cv
cp
.172549 .176471 .176471 rgb
f
395.033 243.626 mo
395.435 243.626 395.791 243.372 395.921 242.992 cv
396.645 240.882 397.816 236.003 398.271 234.069 cv
398.38 233.606 398.127 233.136 397.681 232.973 cv
397.229 232.807 li
396.69 232.609 396.102 232.936 395.985 233.497 cv
394.113 242.495 li
393.992 243.078 394.438 243.626 395.033 243.626 cv
cp
.0588235 .0588235 .0588235 rgb
f
385.983 259.371 mo
386.274 259.101 386.282 258.643 386.002 258.361 cv
385.741 258.102 385.323 258.087 385.046 258.328 cv
380.792 262.027 li
380.539 262.247 380.478 262.616 380.646 262.907 cv
380.741 263.073 li
380.967 263.463 381.496 263.542 381.826 263.235 cv
385.983 259.371 li
cp
f
395.518 259.855 mo
395.458 259.117 394.608 258.733 394.016 259.177 cv
393.765 259.364 393.624 259.664 393.639 259.977 cv
394.021 267.904 li
394.055 268.596 394.797 269.016 395.406 268.689 cv
395.652 268.558 li
395.981 268.381 396.176 268.025 396.146 267.652 cv
395.518 259.855 li
cp
f
391.233 249.363 mo
391.29 249.339 391.353 249.321 391.42 249.31 cv
391.985 249.21 392.868 249.464 393.197 249.96 cv
393.321 250.146 393.375 250.368 393.42 250.587 cv
393.52 251.067 393.596 251.557 393.633 252.046 cv
393.661 252.422 393.711 252.747 393.489 253.084 cv
393.319 253.341 393.065 253.53 392.799 253.683 cv
392.458 253.877 392.089 254.021 391.707 254.105 cv
391.459 254.161 391.189 254.189 390.961 254.08 cv
390.761 253.983 390.622 253.795 390.511 253.603 cv
389.825 252.417 389.919 250.851 390.765 249.768 cv
390.893 249.604 391.042 249.446 391.233 249.363 cv
cp
393.11 246.83 mo
393.128 246.691 393.155 246.549 393.233 246.433 cv
393.308 246.321 393.423 246.242 393.545 246.187 cv
393.792 246.072 394.005 246.06 394.174 246.124 cv
394.475 246.237 394.636 246.595 394.599 247.055 cv
394.573 247.364 394.404 247.669 394.13 247.815 cv
393.855 247.961 393.48 247.918 393.276 247.684 cv
393.08 247.459 393.072 247.127 393.11 246.83 cv
cp
394.875 255.665 mo
394.955 256.056 394.763 256.449 394.543 256.782 cv
394.383 257.023 394.18 257.271 393.896 257.324 cv
393.65 257.37 393.398 257.257 393.217 257.086 cv
392.708 256.607 392.149 255.195 393.075 254.829 cv
393.186 254.785 393.315 254.76 393.469 254.756 cv
394.041 254.743 394.748 255.05 394.875 255.665 cv
cp
394.809 250.876 mo
394.833 250.686 394.87 250.491 394.977 250.332 cv
395.078 250.18 395.236 250.072 395.402 249.995 cv
395.74 249.84 396.031 249.822 396.262 249.91 cv
396.674 250.065 396.893 250.554 396.843 251.182 cv
396.809 251.605 396.577 252.022 396.202 252.222 cv
395.827 252.421 395.315 252.361 395.036 252.042 cv
394.767 251.734 394.757 251.281 394.809 250.876 cv
cp
389.634 255.566 mo
389.576 255.647 389.515 255.732 389.423 255.771 cv
389.287 255.829 389.13 255.768 389.002 255.693 cv
388.692 255.516 388.427 255.265 388.231 254.968 cv
387.982 254.588 387.944 254.127 388.34 253.843 cv
388.399 253.8 388.479 253.782 388.571 253.783 cv
388.955 253.788 389.388 253.985 389.669 254.243 cv
389.823 254.384 389.94 254.574 389.955 254.782 cv
389.975 255.07 389.8 255.331 389.634 255.566 cv
cp
388.999 248.54 mo
389.047 248.091 389.296 247.499 389.631 247.182 cv
389.924 246.902 390.374 247.018 390.705 247.165 cv
390.809 247.211 390.906 247.303 390.905 247.416 cv
390.903 247.755 390.588 248.349 390.404 248.623 cv
390.213 248.908 389.915 249.142 389.572 249.172 cv
389.401 249.188 389.214 249.144 389.104 249.012 cv
388.997 248.885 388.981 248.705 388.999 248.54 cv
cp
387.635 249.857 mo
387.242 253.342 387.393 255.746 389.646 256.798 cv
391.899 257.849 394.213 258.514 394.784 258.156 cv
395.355 257.799 397.146 254.794 397.378 253.292 cv
397.609 251.789 397.948 249.585 397.378 248.834 cv
396.808 248.083 394.972 245.5 394.354 245.379 cv
393.736 245.257 390.958 245.638 390.958 245.638 cv
390.748 245.729 388.027 246.373 387.635 249.857 cv
cp
.658824 .666667 .678431 rgb
f
401.203 255.57 mo
401.315 254.631 398.686 255.119 398.686 255.119 cv
397.486 255.244 396.508 256.021 396.508 256.021 cv
396.508 256.021 395.869 258.012 396.732 260.416 cv
397.597 262.82 398.461 261.354 398.949 260.79 cv
399.438 260.225 401.09 256.51 401.203 255.57 cv
cp
.0588235 .0588235 .0588235 rgb
f
390.511 253.603 mo
390.622 253.795 390.761 253.983 390.961 254.08 cv
391.189 254.189 391.459 254.161 391.707 254.105 cv
392.089 254.021 392.458 253.877 392.799 253.683 cv
393.065 253.53 393.319 253.341 393.489 253.084 cv
393.711 252.747 393.661 252.422 393.633 252.046 cv
393.596 251.557 393.52 251.067 393.42 250.587 cv
393.375 250.368 393.321 250.146 393.197 249.96 cv
392.868 249.464 391.985 249.21 391.42 249.31 cv
391.353 249.321 391.29 249.339 391.233 249.363 cv
391.042 249.446 390.893 249.604 390.765 249.768 cv
389.919 250.851 389.825 252.417 390.511 253.603 cv
cp
f
396.202 252.222 mo
396.577 252.022 396.809 251.605 396.843 251.182 cv
396.893 250.554 396.674 250.065 396.262 249.91 cv
396.031 249.822 395.74 249.84 395.402 249.995 cv
395.236 250.072 395.078 250.18 394.977 250.332 cv
394.87 250.491 394.833 250.686 394.809 250.876 cv
394.757 251.281 394.767 251.734 395.036 252.042 cv
395.315 252.361 395.827 252.421 396.202 252.222 cv
cp
f
394.13 247.815 mo
394.404 247.669 394.573 247.364 394.599 247.055 cv
394.636 246.595 394.475 246.237 394.174 246.124 cv
394.005 246.06 393.792 246.072 393.545 246.187 cv
393.423 246.242 393.308 246.321 393.233 246.433 cv
393.155 246.549 393.128 246.691 393.11 246.83 cv
393.072 247.127 393.08 247.459 393.276 247.684 cv
393.48 247.918 393.855 247.961 394.13 247.815 cv
cp
f
393.075 254.829 mo
392.149 255.195 392.708 256.607 393.217 257.086 cv
393.398 257.257 393.65 257.37 393.896 257.324 cv
394.18 257.271 394.383 257.023 394.543 256.782 cv
394.763 256.449 394.955 256.056 394.875 255.665 cv
394.748 255.05 394.041 254.743 393.469 254.756 cv
393.315 254.76 393.186 254.785 393.075 254.829 cv
cp
f
388.571 253.783 mo
388.479 253.782 388.399 253.8 388.34 253.843 cv
387.944 254.127 387.982 254.588 388.231 254.968 cv
388.427 255.265 388.692 255.516 389.002 255.693 cv
389.13 255.768 389.287 255.829 389.423 255.771 cv
389.515 255.732 389.576 255.647 389.634 255.566 cv
389.8 255.331 389.975 255.07 389.955 254.782 cv
389.94 254.574 389.823 254.384 389.669 254.243 cv
389.388 253.985 388.955 253.788 388.571 253.783 cv
cp
f
389.572 249.172 mo
389.915 249.142 390.213 248.908 390.404 248.623 cv
390.588 248.349 390.903 247.755 390.905 247.416 cv
390.906 247.303 390.809 247.211 390.705 247.165 cv
390.374 247.018 389.924 246.902 389.631 247.182 cv
389.296 247.499 389.047 248.091 388.999 248.54 cv
388.981 248.705 388.997 248.885 389.104 249.012 cv
389.214 249.144 389.401 249.188 389.572 249.172 cv
cp
f
398.541 250.019 mo
398.292 250.107 398.159 250.266 398.11 250.461 cv
398.234 250.281 398.388 250.127 398.541 250.019 cv
cp
.160784 .176471 .180392 rgb
f
404.32 252.337 mo
404.245 252.333 402.63 252.565 399.622 252.337 cv
399.355 252.316 399.127 252.28 398.929 252.232 cv
399.028 252.323 399.125 252.395 399.212 252.438 cv
399.834 252.746 402.066 252.603 403.419 252.641 cv
404.771 252.678 405.034 252.34 405.323 251.408 cv
405 251.956 404.357 252.338 404.32 252.337 cv
cp
f
400.752 249.431 mo
399.8 249.554 399.205 249.735 398.874 249.864 cv
399.662 249.779 404.22 249.384 404.32 249.436 cv
405.035 249.8 405.365 250.181 405.468 250.542 cv
405.473 249.968 405.268 249.489 404.809 249.26 cv
404.133 248.922 402.367 249.223 400.752 249.431 cv
cp
f
404.32 249.436 mo
404.22 249.384 399.662 249.779 398.911 249.857 cv
398.771 249.884 398.656 249.938 398.541 250.019 cv
398.388 250.127 398.234 250.281 398.11 250.461 cv
397.699 251.055 397.613 251.915 398.929 252.232 cv
399.127 252.28 399.355 252.316 399.622 252.337 cv
402.63 252.565 404.245 252.333 404.32 252.337 cv
404.357 252.338 405 251.956 405.323 251.408 cv
405.476 251.149 405.556 250.853 405.468 250.542 cv
405.365 250.181 405.035 249.8 404.32 249.436 cv
cp
.0588235 .0588235 .0588235 rgb
f
385.614 250.587 mo
384.646 249.655 382.254 247.173 380.973 245.838 cv
380.612 245.462 379.979 245.644 379.871 246.152 cv
379.407 248.34 378.478 252.898 378.478 254.349 cv
378.478 256.282 378.327 258.726 379.83 258.372 cv
381.332 258.018 386.967 251.89 385.614 250.587 cv
cp
f
390.905 261.28 mo
390.788 259.251 389.37 260.131 389.37 260.131 cv
385.822 263.423 li
385.822 263.423 383.436 264.811 382.685 265.412 cv
381.934 266.013 383.812 267.29 385.156 268.041 cv
385.95 268.484 387.608 269.091 389 269.168 cv
389.933 269.22 390.921 268.062 390.935 267.128 cv
390.96 265.341 390.981 262.589 390.905 261.28 cv
cp
f
399.622 237.09 mo
400.038 238.066 402.743 241.971 402.817 242.948 cv
402.893 243.926 402.968 245.254 403.118 245.979 cv
403.269 246.706 404.32 247.104 404.32 246.229 cv
404.32 245.354 404.846 243.325 404.32 242.349 cv
403.795 241.372 403.944 238.817 400.64 235.438 cv
400.377 235.169 399.206 236.113 399.622 237.09 cv
cp
f
401.673 259.477 mo
400.979 260.829 397.378 265.486 397.378 265.486 cv
397.378 265.486 397.409 266.989 397.841 266.989 cv
398.272 266.989 401.766 262.743 402.817 260.79 cv
403.869 258.837 404.17 254.788 404.17 254.788 cv
402.893 254.756 li
402.893 254.756 402.367 258.125 401.673 259.477 cv
cp
f
221.007 311.758 mo
208.776 311.75 195.771 299.759 195.771 278.088 cv
195.771 257.378 209.633 239.891 221.007 239.891 cv
237.614 239.891 246.078 259.055 243.968 280.623 cv
242.049 300.242 230.319 311.765 221.007 311.758 cv
cp
245.26 280.698 mo
245.44 278.485 245.927 274.094 246.249 269.264 cv
246.002 267.067 245.592 264.915 244.992 262.843 cv
242.667 254.808 240.121 246.378 233.604 240.644 cv
231.764 239.023 229.649 237.723 227.334 236.905 cv
227.334 236.905 224.705 234.787 217.529 234.236 cv
211.865 234.792 205.79 237.083 201.648 243.165 cv
193.225 255.533 186.081 277.499 184.908 281.124 cv
184.893 281.169 184.878 281.219 184.861 281.27 cv
184.846 281.314 184.831 281.361 184.816 281.412 cv
184.794 281.479 184.773 281.549 184.748 281.621 cv
184.739 281.655 184.729 281.689 184.716 281.724 cv
184.69 281.805 184.68 281.839 184.669 281.873 cv
184.411 282.698 184.029 283.931 183.562 285.44 cv
183.536 285.526 183.509 285.611 183.483 285.699 cv
183.349 286.134 183.208 286.588 183.063 287.063 cv
183.022 287.191 182.984 287.317 182.946 287.447 cv
182.805 287.906 182.658 288.382 182.508 288.87 cv
182.47 288.994 182.432 289.117 182.393 289.241 cv
182.295 289.563 182.195 289.892 182.093 290.222 cv
182.05 290.365 182.005 290.508 181.96 290.652 cv
181.916 290.802 181.869 290.951 181.824 291.103 cv
181.686 291.551 181.547 292.007 181.406 292.466 cv
181.314 292.764 181.223 293.064 181.129 293.367 cv
181.112 293.428 181.092 293.485 181.075 293.545 cv
180.954 293.718 180.833 293.884 180.71 294.055 cv
180.638 294.148 180.61 294.18 180.576 294.219 cv
180.186 294.669 179.809 295.12 179.397 295.549 cv
178.988 295.976 178.561 296.383 178.118 296.77 cv
177.987 296.882 177.853 296.988 177.721 297.098 cv
177.623 297.166 177.335 297.381 177.26 297.433 cv
176.842 297.718 176.414 297.984 175.966 298.224 cv
175.678 298.375 175.383 298.509 175.091 298.652 cv
175.165 299.737 175.316 300.63 175.512 301.309 cv
177.438 307.976 183.525 313.046 189.477 316.118 cv
196.66 319.827 206.236 320.258 214.146 319.359 cv
220.755 318.608 227.231 316.081 232.255 311.722 cv
237.518 307.154 240.975 300.805 243.192 294.198 cv
243.396 293.593 243.592 292.978 243.78 292.356 cv
243.451 292.416 li
243.97 289.789 244.95 284.485 245.26 280.698 cv
cp
f
217.599 308.879 mo
207.976 308.873 196.518 299.923 196.518 279.13 cv
196.518 262.834 209.854 247.994 218.803 247.994 cv
231.87 247.994 239.584 263.66 237.924 280.631 cv
236.414 296.068 224.927 308.884 217.599 308.879 cv
cp
243.968 280.623 mo
246.078 259.055 237.614 239.891 221.007 239.891 cv
209.633 239.891 195.771 257.378 195.771 278.088 cv
195.771 299.759 208.776 311.75 221.007 311.758 cv
230.319 311.765 242.049 300.242 243.968 280.623 cv
cp
.160784 .176471 .180392 rgb
f
233.092 291.336 mo
231.599 294.108 226.64 300.136 226.027 300.136 cv
225.415 300.136 225.371 298.003 225.371 298.003 cv
225.371 298.003 230.482 291.393 231.467 289.473 cv
232.452 287.554 233.198 282.772 233.198 282.772 cv
235.011 282.818 li
235.011 282.818 234.585 288.564 233.092 291.336 cv
cp
224.455 290.806 mo
223.229 287.394 224.135 284.568 224.135 284.568 cv
224.135 284.568 225.524 283.466 227.228 283.288 cv
227.228 283.288 230.959 282.596 230.799 283.928 cv
230.64 285.261 228.293 290.534 227.601 291.336 cv
226.907 292.139 225.681 294.218 224.455 290.806 cv
cp
222.92 302.361 mo
222.572 302.548 li
221.707 303.013 220.654 302.416 220.606 301.436 cv
220.063 290.183 li
220.042 289.738 220.242 289.313 220.598 289.048 cv
221.439 288.418 222.646 288.962 222.729 290.011 cv
223.621 301.077 li
223.664 301.606 223.389 302.11 222.92 302.361 cv
cp
214.396 285.67 mo
211.197 284.177 210.984 280.765 211.542 275.819 cv
212.099 270.874 215.96 269.96 216.258 269.83 cv
216.258 269.83 220.201 269.29 221.078 269.462 cv
221.955 269.634 224.562 273.301 225.371 274.367 cv
226.18 275.434 225.699 278.562 225.371 280.693 cv
225.042 282.826 222.5 287.092 221.689 287.599 cv
220.878 288.105 217.595 287.162 214.396 285.67 cv
cp
216.225 300.333 mo
216.206 301.658 214.802 303.302 213.479 303.228 cv
211.504 303.118 209.15 302.258 208.023 301.629 cv
206.115 300.563 203.449 298.75 204.515 297.896 cv
205.582 297.044 208.969 295.074 208.969 295.074 cv
214.005 290.4 li
214.005 290.4 216.017 289.153 216.184 292.032 cv
216.292 293.89 216.261 297.796 216.225 300.333 cv
cp
200.987 294.585 mo
200.767 293.869 201.005 293.091 201.548 292.574 cv
203.163 291.037 207.601 286.831 208.354 286.31 cv
209.278 285.67 214.681 283.271 212.832 287.242 cv
210.984 291.215 204.089 295.582 203.378 295.744 cv
202.827 295.87 201.379 295.855 200.987 294.585 cv
cp
198.544 282.194 mo
198.544 280.136 199.863 273.666 200.522 270.561 cv
200.676 269.838 201.574 269.581 202.085 270.113 cv
203.904 272.01 207.3 275.532 208.674 276.855 cv
210.593 278.703 202.596 287.402 200.463 287.904 cv
198.331 288.406 198.544 284.938 198.544 282.194 cv
cp
204.57 261.285 mo
205.094 260.901 205.818 260.954 206.283 261.408 cv
207.862 262.947 211.391 266.395 212.721 267.756 cv
214.458 269.533 212.69 270.671 211.837 270.955 cv
211.223 271.159 210.096 270.566 209.51 270.217 cv
209.375 270.162 209.247 270.084 209.132 269.98 cv
203.611 264.985 li
203.408 264.801 203.278 264.567 203.221 264.319 cv
202.954 264.043 202.757 263.827 202.667 263.704 cv
202.248 263.135 203.592 262.001 204.57 261.285 cv
cp
210.308 254.346 mo
211.791 253.056 213.372 251.842 214.375 251.536 cv
216.724 250.82 220.82 249.647 220.318 252.419 cv
219.816 255.191 218.459 261.972 214.542 263.817 cv
213.914 264.293 213.472 264.486 213.472 264.486 cv
206.505 257.946 li
207.482 256.188 208.845 255.06 210.308 254.346 cv
cp
220.737 265.369 mo
223.394 252.599 li
223.56 251.802 224.394 251.338 225.158 251.618 cv
225.8 251.854 li
226.433 252.086 226.793 252.754 226.639 253.41 cv
225.993 256.155 224.329 263.08 223.303 266.075 cv
223.118 266.614 222.611 266.975 222.042 266.975 cv
221.196 266.975 220.564 266.197 220.737 265.369 cv
cp
227.831 260.86 mo
227.831 260.86 231.67 267.045 231.741 270.813 cv
231.741 270.813 230.746 272.093 227.831 271.666 cv
224.917 271.239 225.13 270.758 225.77 266.307 cv
226.409 261.856 227.308 259.972 227.831 260.86 cv
cp
229.999 255.352 mo
234.691 260.15 234.478 263.775 235.225 265.161 cv
235.971 266.548 235.225 269.427 235.225 270.669 cv
235.225 271.91 233.731 271.346 233.519 270.315 cv
233.305 269.285 233.198 267.4 233.092 266.013 cv
232.985 264.625 229.146 259.084 228.556 257.697 cv
227.965 256.312 229.627 254.971 229.999 255.352 cv
cp
236.853 276.791 mo
236.978 277.232 236.864 277.652 236.647 278.021 cv
236.237 279.343 235.864 279.823 233.944 279.77 cv
232.025 279.716 228.856 279.92 227.974 279.481 cv
227.851 279.42 227.713 279.319 227.571 279.19 cv
225.705 278.74 225.826 277.519 226.41 276.676 cv
226.48 276.399 226.667 276.174 227.021 276.049 cv
227.186 275.934 227.348 275.856 227.494 275.829 cv
227.963 275.646 228.809 275.388 230.159 275.214 cv
232.452 274.918 234.958 274.491 235.917 274.972 cv
236.568 275.297 236.859 275.976 236.853 276.791 cv
cp
237.924 280.631 mo
239.584 263.66 231.87 247.994 218.803 247.994 cv
209.854 247.994 196.518 262.834 196.518 279.13 cv
196.518 299.923 207.976 308.873 217.599 308.879 cv
224.927 308.884 236.414 296.068 237.924 280.631 cv
cp
.717647 .721569 .741176 rgb
f
218.732 253.468 mo
218.732 253.468 219.514 254.534 218.021 258.842 cv
217.096 261.514 215.569 263.042 214.542 263.817 cv
218.459 261.972 219.816 255.191 220.318 252.419 cv
220.82 249.647 216.724 250.82 214.375 251.536 cv
213.372 251.842 211.791 253.056 210.308 254.346 cv
214.17 252.459 218.732 253.468 218.732 253.468 cv
cp
.172549 .176471 .176471 rgb
f
203.221 264.319 mo
203.129 263.927 203.219 263.497 203.503 263.171 cv
204.144 262.438 li
204.647 261.859 205.54 261.842 206.065 262.4 cv
211.189 267.841 li
211.64 268.319 211.661 269.06 211.238 269.563 cv
210.996 269.853 li
210.623 270.298 210.017 270.426 209.51 270.217 cv
210.096 270.566 211.223 271.159 211.837 270.955 cv
212.69 270.671 214.458 269.533 212.721 267.756 cv
211.391 266.395 207.862 262.947 206.283 261.408 cv
205.818 260.954 205.094 260.901 204.57 261.285 cv
203.592 262.001 202.248 263.135 202.667 263.704 cv
202.757 263.827 202.954 264.043 203.221 264.319 cv
cp
f
214.542 263.817 mo
215.569 263.042 217.096 261.514 218.021 258.842 cv
219.514 254.534 218.732 253.468 218.732 253.468 cv
218.732 253.468 214.17 252.459 210.308 254.346 cv
208.845 255.06 207.482 256.188 206.505 257.946 cv
213.472 264.486 li
213.472 264.486 213.914 264.293 214.542 263.817 cv
cp
.0509804 .0588235 .0470588 rgb
f
227.831 271.666 mo
230.746 272.093 231.741 270.813 231.741 270.813 cv
231.67 267.045 227.831 260.86 227.831 260.86 cv
227.308 259.972 226.409 261.856 225.77 266.307 cv
225.13 270.758 224.917 271.239 227.831 271.666 cv
cp
f
210.996 269.853 mo
211.238 269.563 li
211.661 269.06 211.64 268.319 211.189 267.841 cv
206.065 262.4 li
205.54 261.842 204.647 261.859 204.144 262.438 cv
203.503 263.171 li
203.219 263.497 203.129 263.927 203.221 264.319 cv
203.278 264.567 203.408 264.801 203.611 264.985 cv
209.132 269.98 li
209.247 270.084 209.375 270.162 209.51 270.217 cv
210.017 270.426 210.623 270.298 210.996 269.853 cv
cp
f
209.197 289.322 mo
203.296 294.808 li
202.829 295.243 202.078 295.131 201.757 294.577 cv
201.621 294.342 li
201.382 293.93 201.47 293.405 201.83 293.093 cv
207.867 287.843 li
208.261 287.5 208.854 287.521 209.224 287.89 cv
209.622 288.289 209.61 288.938 209.197 289.322 cv
cp
212.832 287.242 mo
214.681 283.271 209.278 285.67 208.354 286.31 cv
207.601 286.831 203.163 291.037 201.548 292.574 cv
201.005 293.091 200.767 293.869 200.987 294.585 cv
201.379 295.855 202.827 295.87 203.378 295.744 cv
204.089 295.582 210.984 291.215 212.832 287.242 cv
cp
.172549 .176471 .176471 rgb
f
222.042 266.975 mo
222.611 266.975 223.118 266.614 223.303 266.075 cv
224.329 263.08 225.993 256.155 226.639 253.41 cv
226.793 252.754 226.433 252.086 225.8 251.854 cv
225.158 251.618 li
224.394 251.338 223.56 251.802 223.394 252.599 cv
220.737 265.369 li
220.564 266.197 221.196 266.975 222.042 266.975 cv
cp
.0588235 .0588235 .0588235 rgb
f
207.867 287.843 mo
201.83 293.093 li
201.47 293.405 201.382 293.93 201.621 294.342 cv
201.757 294.577 li
202.078 295.131 202.829 295.243 203.296 294.808 cv
209.197 289.322 li
209.61 288.938 209.622 288.289 209.224 287.89 cv
208.854 287.521 208.261 287.5 207.867 287.843 cv
cp
f
222.729 290.011 mo
222.646 288.962 221.439 288.418 220.598 289.048 cv
220.242 289.313 220.042 289.738 220.063 290.183 cv
220.606 301.436 li
220.654 302.416 221.707 303.013 222.572 302.548 cv
222.92 302.361 li
223.389 302.11 223.664 301.606 223.621 301.077 cv
222.729 290.011 li
cp
f
220.427 286.418 mo
220.08 286.483 219.722 286.321 219.465 286.079 cv
218.743 285.399 217.949 283.396 219.264 282.876 cv
219.419 282.814 219.604 282.777 219.822 282.772 cv
220.634 282.754 221.637 283.189 221.817 284.063 cv
221.932 284.617 221.658 285.176 221.346 285.648 cv
221.12 285.991 220.832 286.342 220.427 286.418 cv
cp
216.262 281.813 mo
215.979 281.676 215.782 281.407 215.624 281.135 cv
214.651 279.452 214.784 277.229 215.983 275.692 cv
216.166 275.458 216.378 275.235 216.65 275.118 cv
216.73 275.083 216.819 275.058 216.915 275.041 cv
217.717 274.9 218.97 275.262 219.438 275.965 cv
219.613 276.229 219.688 276.545 219.752 276.855 cv
219.894 277.537 220.002 278.231 220.055 278.926 cv
220.095 279.459 220.166 279.921 219.851 280.398 cv
219.61 280.763 219.25 281.032 218.871 281.249 cv
218.388 281.525 217.864 281.729 217.321 281.85 cv
216.97 281.928 216.587 281.969 216.262 281.813 cv
cp
214.378 283.923 mo
214.297 284.038 214.209 284.158 214.08 284.213 cv
213.886 284.296 213.664 284.207 213.481 284.103 cv
213.043 283.851 212.666 283.495 212.388 283.072 cv
212.035 282.534 211.981 281.88 212.542 281.477 cv
212.627 281.415 212.74 281.39 212.871 281.392 cv
213.416 281.399 214.03 281.679 214.429 282.044 cv
214.647 282.244 214.814 282.515 214.834 282.81 cv
214.863 283.219 214.615 283.589 214.378 283.923 cv
cp
213.478 273.949 mo
213.545 273.313 213.899 272.473 214.374 272.021 cv
214.79 271.625 215.429 271.789 215.899 271.998 cv
216.046 272.063 216.185 272.193 216.184 272.354 cv
216.181 272.836 215.733 273.679 215.472 274.066 cv
215.2 274.472 214.777 274.804 214.292 274.847 cv
214.049 274.868 213.783 274.806 213.626 274.619 cv
213.475 274.439 213.453 274.184 213.478 273.949 cv
cp
219.313 271.522 mo
219.339 271.326 219.377 271.124 219.488 270.959 cv
219.593 270.8 219.757 270.688 219.93 270.608 cv
220.281 270.447 220.583 270.43 220.823 270.52 cv
221.25 270.682 221.478 271.188 221.425 271.841 cv
221.39 272.28 221.149 272.714 220.76 272.921 cv
220.371 273.128 219.839 273.066 219.549 272.734 cv
219.27 272.415 219.259 271.943 219.313 271.522 cv
cp
221.724 277.265 mo
221.759 276.995 221.812 276.72 221.962 276.493 cv
222.106 276.277 222.33 276.124 222.566 276.015 cv
223.046 275.794 223.459 275.771 223.787 275.895 cv
224.371 276.115 224.682 276.808 224.61 277.699 cv
224.562 278.3 224.233 278.892 223.702 279.175 cv
223.17 279.458 222.443 279.374 222.046 278.92 cv
221.665 278.483 221.65 277.84 221.724 277.265 cv
cp
221.689 287.599 mo
222.5 287.092 225.042 282.826 225.371 280.693 cv
225.699 278.562 226.18 275.434 225.371 274.367 cv
224.562 273.301 221.955 269.634 221.078 269.462 cv
220.201 269.29 216.258 269.83 216.258 269.83 cv
215.96 269.96 212.099 270.874 211.542 275.819 cv
210.984 280.765 211.197 284.177 214.396 285.67 cv
217.595 287.162 220.878 288.105 221.689 287.599 cv
cp
.658824 .666667 .678431 rgb
f
227.601 291.336 mo
228.293 290.534 230.64 285.261 230.799 283.928 cv
230.959 282.596 227.228 283.288 227.228 283.288 cv
225.524 283.466 224.135 284.568 224.135 284.568 cv
224.135 284.568 223.229 287.394 224.455 290.806 cv
225.681 294.218 226.907 292.139 227.601 291.336 cv
cp
.0588235 .0588235 .0588235 rgb
f
219.851 280.398 mo
220.166 279.921 220.095 279.459 220.055 278.926 cv
220.002 278.231 219.894 277.537 219.752 276.855 cv
219.688 276.545 219.613 276.229 219.438 275.965 cv
218.97 275.262 217.717 274.9 216.915 275.041 cv
216.819 275.058 216.73 275.083 216.65 275.118 cv
216.378 275.235 216.166 275.458 215.983 275.692 cv
214.784 277.229 214.651 279.452 215.624 281.135 cv
215.782 281.407 215.979 281.676 216.262 281.813 cv
216.587 281.969 216.97 281.928 217.321 281.85 cv
217.864 281.729 218.388 281.525 218.871 281.249 cv
219.25 281.032 219.61 280.763 219.851 280.398 cv
cp
f
223.702 279.175 mo
224.233 278.892 224.562 278.3 224.61 277.699 cv
224.682 276.808 224.371 276.115 223.787 275.895 cv
223.459 275.771 223.046 275.794 222.566 276.015 cv
222.33 276.124 222.106 276.277 221.962 276.493 cv
221.812 276.72 221.759 276.995 221.724 277.265 cv
221.65 277.84 221.665 278.483 222.046 278.92 cv
222.443 279.374 223.17 279.458 223.702 279.175 cv
cp
f
220.76 272.921 mo
221.149 272.714 221.39 272.28 221.425 271.841 cv
221.478 271.188 221.25 270.682 220.823 270.52 cv
220.583 270.43 220.281 270.447 219.93 270.608 cv
219.757 270.688 219.593 270.8 219.488 270.959 cv
219.377 271.124 219.339 271.326 219.313 271.522 cv
219.259 271.943 219.27 272.415 219.549 272.734 cv
219.839 273.066 220.371 273.128 220.76 272.921 cv
cp
f
221.817 284.063 mo
221.637 283.189 220.634 282.754 219.822 282.772 cv
219.604 282.777 219.419 282.814 219.264 282.876 cv
217.949 283.396 218.743 285.399 219.465 286.079 cv
219.722 286.321 220.08 286.483 220.427 286.418 cv
220.832 286.342 221.12 285.991 221.346 285.648 cv
221.658 285.176 221.932 284.617 221.817 284.063 cv
cp
f
214.429 282.044 mo
214.03 281.679 213.416 281.399 212.871 281.392 cv
212.74 281.39 212.627 281.415 212.542 281.477 cv
211.981 281.88 212.035 282.534 212.388 283.072 cv
212.666 283.495 213.043 283.851 213.481 284.103 cv
213.664 284.207 213.886 284.296 214.08 284.213 cv
214.209 284.158 214.297 284.038 214.378 283.923 cv
214.615 283.589 214.863 283.219 214.834 282.81 cv
214.814 282.515 214.647 282.244 214.429 282.044 cv
cp
f
214.292 274.847 mo
214.777 274.804 215.2 274.472 215.472 274.066 cv
215.733 273.679 216.181 272.836 216.184 272.354 cv
216.185 272.193 216.046 272.063 215.899 271.998 cv
215.429 271.789 214.79 271.625 214.374 272.021 cv
213.899 272.473 213.545 273.313 213.478 273.949 cv
213.453 274.184 213.475 274.439 213.626 274.619 cv
213.783 274.806 214.049 274.868 214.292 274.847 cv
cp
f
227.021 276.049 mo
226.667 276.174 226.48 276.399 226.41 276.676 cv
226.586 276.422 226.804 276.202 227.021 276.049 cv
cp
.160784 .176471 .180392 rgb
f
230.159 275.214 mo
228.809 275.388 227.963 275.646 227.494 275.829 cv
228.613 275.708 235.081 275.147 235.225 275.22 cv
236.239 275.737 236.707 276.277 236.853 276.791 cv
236.859 275.976 236.568 275.297 235.917 274.972 cv
234.958 274.491 232.452 274.918 230.159 275.214 cv
cp
f
235.225 279.338 mo
235.117 279.334 232.825 279.663 228.556 279.338 cv
228.178 279.31 227.854 279.259 227.571 279.19 cv
227.713 279.319 227.851 279.42 227.974 279.481 cv
228.856 279.92 232.025 279.716 233.944 279.77 cv
235.864 279.823 236.237 279.343 236.647 278.021 cv
236.188 278.799 235.277 279.341 235.225 279.338 cv
cp
f
235.225 275.22 mo
235.081 275.147 228.613 275.708 227.547 275.819 cv
227.348 275.856 227.186 275.934 227.021 276.049 cv
226.804 276.202 226.586 276.422 226.41 276.676 cv
225.826 277.519 225.705 278.74 227.571 279.19 cv
227.854 279.259 228.178 279.31 228.556 279.338 cv
232.825 279.663 235.117 279.334 235.225 279.338 cv
235.277 279.341 236.188 278.799 236.647 278.021 cv
236.864 277.652 236.978 277.232 236.853 276.791 cv
236.707 276.277 236.239 275.737 235.225 275.22 cv
cp
.0588235 .0588235 .0588235 rgb
f
208.674 276.855 mo
207.3 275.532 203.904 272.01 202.085 270.113 cv
201.574 269.581 200.676 269.838 200.522 270.561 cv
199.863 273.666 198.544 280.136 198.544 282.194 cv
198.544 284.938 198.331 288.406 200.463 287.904 cv
202.596 287.402 210.593 278.703 208.674 276.855 cv
cp
f
214.005 290.4 mo
208.969 295.074 li
208.969 295.074 205.582 297.044 204.515 297.896 cv
203.449 298.75 206.115 300.563 208.023 301.629 cv
209.15 302.258 211.504 303.118 213.479 303.228 cv
214.802 303.302 216.206 301.658 216.225 300.333 cv
216.261 297.796 216.292 293.89 216.184 292.032 cv
216.017 289.153 214.005 290.4 214.005 290.4 cv
cp
f
233.092 266.013 mo
233.198 267.4 233.305 269.285 233.519 270.315 cv
233.731 271.346 235.225 271.91 235.225 270.669 cv
235.225 269.427 235.971 266.548 235.225 265.161 cv
234.478 263.775 234.691 260.15 229.999 255.352 cv
229.627 254.971 227.965 256.312 228.556 257.697 cv
229.146 259.084 232.985 264.625 233.092 266.013 cv
cp
f
231.467 289.473 mo
230.482 291.393 225.371 298.003 225.371 298.003 cv
225.371 298.003 225.415 300.136 226.027 300.136 cv
226.64 300.136 231.599 294.108 233.092 291.336 cv
234.585 288.564 235.011 282.818 235.011 282.818 cv
233.198 282.772 li
233.198 282.772 232.452 287.554 231.467 289.473 cv
cp
f
387.396 179.827 mo
388.564 179.559 389.518 179.255 390.29 178.921 cv
390.449 178.553 390.654 178.132 390.914 177.695 cv
391.68 176.408 390.062 170.444 387.502 166.925 cv
384.943 163.406 378.226 157.115 376.732 155.409 cv
375.24 153.703 366.869 147.902 366.869 147.902 cv
366.604 147.81 366.332 147.719 366.051 147.632 cv
367.684 151.082 373.774 163.966 375.737 168.382 cv
377.561 172.484 378.653 178.869 379.015 181.242 cv
379.063 181.235 379.113 181.227 379.162 181.22 cv
382.973 180.659 385.864 180.179 387.396 179.827 cv
cp
.0392157 .0313726 .0509804 rgb
f
367.35 169.164 mo
366.39 163.3 363.404 158.182 362.338 155.516 cv
361.493 153.405 358.579 148.089 357.401 145.966 cv
350.884 145.188 343.796 145.066 340.266 145.066 cv
337.294 145.066 331.472 144.908 324.978 144.985 cv
326.246 149.22 329.576 160.73 330.35 167.298 cv
331.088 173.578 331.712 183.171 331.961 187.255 cv
331.999 187.25 332.037 187.246 332.075 187.241 cv
332.176 187.206 li
343.983 185.818 357.713 184.137 368.676 182.679 cv
368.528 180.152 368.104 173.771 367.35 169.164 cv
cp
f
271.232 192.942 mo
270.458 191.863 270.673 190.846 270.673 190.846 cv
270.673 190.846 270.104 184.164 277.354 179.827 cv
284.605 175.491 293.064 179.045 294.984 180.183 cv
296.903 181.32 302.59 183.239 303.585 190.277 cv
303.582 190.357 303.567 190.439 303.547 190.521 cv
306.145 190.277 li
306.145 190.277 313.874 189.395 324.6 188.128 cv
325.017 178.133 319.062 150.774 317.815 145.179 cv
313.464 145.372 309.161 145.725 305.505 146.346 cv
294.202 148.265 292.283 151.25 282.26 159.568 cv
272.236 167.885 260.721 193.028 260.721 193.028 cv
259.917 194.728 260.721 194.542 260.721 194.542 cv
270.748 193.601 li
271.232 192.942 li
cp
f
206.858 141.036 mo
210.903 141.092 214.939 141.183 218.348 141.273 cv
207.489 140.985 190.244 140.685 186.72 141.547 cv
181.496 142.827 171.686 149.651 164.755 153.81 cv
157.824 157.968 130.634 181.107 130.634 181.107 cv
130.634 181.107 141.849 181.372 153.028 181.816 cv
162.611 173.863 192.909 149.018 206.858 141.036 cv
cp
f
168.886 182.646 mo
168.852 182.644 168.817 182.641 168.783 182.639 cv
168.817 182.641 168.852 182.644 168.886 182.646 cv
cp
f
171.58 182.878 mo
171.508 182.872 171.438 182.865 171.368 182.858 cv
171.438 182.865 171.508 182.872 171.58 182.878 cv
cp
f
218.488 141.277 mo
218.582 141.279 218.674 141.282 218.767 141.284 cv
218.674 141.282 218.582 141.279 218.488 141.277 cv
cp
f
279.808 145.066 mo
227.346 141.547 li
227.346 141.547 226.803 141.528 225.844 141.496 cv
225.935 141.499 226.023 141.502 226.106 141.505 cv
172.769 182.996 li
172.365 182.955 171.981 182.917 171.615 182.882 cv
174.994 183.209 180.068 183.793 185.889 184.501 cv
184.841 184.374 183.816 184.25 182.822 184.131 cv
236.299 142.149 li
244.031 142.667 li
190.721 185.095 li
190.013 185.007 189.312 184.921 188.619 184.835 cv
208.097 187.234 233.851 190.703 233.851 190.703 cv
246.966 191.556 251.978 183.453 251.978 183.453 cv
251.978 183.453 276.502 152.637 279.808 148.905 cv
283.112 145.173 279.808 145.066 279.808 145.066 cv
cp
f
324.6 188.128 mo
324.94 188.088 325.284 188.048 325.631 188.007 cv
326.253 178.461 320.327 150.632 319.127 145.125 cv
318.689 145.141 318.253 145.159 317.815 145.179 cv
319.062 150.774 325.017 178.133 324.6 188.128 cv
cp
.184314 .2 .196078 rgb
f
362.338 155.516 mo
363.404 158.182 366.39 163.3 367.35 169.164 cv
368.104 173.771 368.528 180.152 368.676 182.679 cv
369.172 182.613 369.662 182.547 370.146 182.482 cv
369.968 179.441 369.272 168.849 368.061 164.97 cv
366.639 160.421 358.528 146.107 358.528 146.107 cv
358.155 146.058 357.779 146.011 357.401 145.966 cv
358.579 148.089 361.493 153.405 362.338 155.516 cv
cp
f
325.631 188.007 mo
327.653 187.768 329.772 187.516 331.961 187.255 cv
331.712 183.171 331.088 173.578 330.35 167.298 cv
329.576 160.73 326.246 149.22 324.978 144.985 cv
323.067 145.008 321.099 145.051 319.127 145.125 cv
320.327 150.632 326.253 178.461 325.631 188.007 cv
cp
.14902 .14902 .156863 rgb
f
375.737 168.382 mo
373.774 163.966 367.684 151.082 366.051 147.632 cv
363.911 146.969 361.295 146.475 358.528 146.107 cv
358.528 146.107 366.639 160.421 368.061 164.97 cv
369.272 168.849 369.968 179.441 370.146 182.482 cv
373.379 182.048 376.34 181.636 378.899 181.26 cv
378.938 181.254 378.977 181.249 379.015 181.242 cv
378.653 178.869 377.561 172.484 375.737 168.382 cv
cp
f
376.732 155.409 mo
378.226 157.115 384.943 163.406 387.502 166.925 cv
390.062 170.444 391.68 176.408 390.914 177.695 cv
390.654 178.132 390.449 178.553 390.29 178.921 cv
396.284 176.335 391.326 171.979 390.381 168.996 cv
389.314 165.628 375.087 151.967 368.735 148.691 cv
368.184 148.407 367.556 148.145 366.869 147.902 cv
366.869 147.902 375.24 153.703 376.732 155.409 cv
cp
.184314 .2 .196078 rgb
f
328.077 197.533 mo
328.077 197.533 323.489 199.233 319.793 199.589 cv
316.097 199.944 314.025 199.936 314.025 199.936 cv
315.261 198.737 318.135 197.668 321.568 197.264 cv
324.11 196.965 326.438 197.091 328.077 197.533 cv
cp
318.114 201.646 mo
318.073 201.299 319.807 200.81 321.984 200.553 cv
324.163 200.296 325.963 200.37 326.004 200.716 cv
326.044 201.063 324.312 201.552 322.133 201.809 cv
319.954 202.065 318.155 201.993 318.114 201.646 cv
cp
322.283 203.335 mo
318.916 203.732 315.923 203.382 314.413 202.541 cv
314.413 202.541 324.982 203.641 329.174 201.186 cv
329.027 201.335 328.637 201.569 327.937 201.869 cv
326.478 202.539 324.496 203.075 322.283 203.335 cv
cp
334.036 254.069 mo
333.961 251.279 333.712 246.253 333.502 242.002 cv
333.336 238.639 333.192 235.732 333.192 235.061 cv
333.192 233.27 334.396 218.758 334.757 215.075 cv
334.911 213.5 334.833 208.584 333.584 194.109 cv
333.549 193.698 li
333.435 192.365 332.981 190.591 332.591 189.245 cv
329.285 189.676 327.233 189.942 327.129 189.956 cv
326.854 189.986 314.866 191.321 301.221 192.826 cv
299.435 193.93 297.138 194.853 296.192 195.182 cv
295.167 195.539 289.64 195.839 284.24 195.768 cv
277.354 203.641 li
277.354 203.641 267.261 205.916 266.763 199.021 cv
268.714 196.367 li
264.841 196.776 262.247 197.039 261.721 197.065 cv
258.878 197.208 li
258.184 197.181 li
258.192 196.968 li
258.877 196.995 li
261.711 196.853 li
262.243 196.826 264.911 196.555 268.885 196.134 cv
270.748 193.601 li
260.721 194.542 li
260.721 194.542 259.917 194.728 260.721 193.028 cv
260.721 193.028 272.236 167.885 282.26 159.568 cv
292.283 151.25 294.202 148.265 305.505 146.346 cv
309.161 145.725 313.464 145.372 317.815 145.179 cv
318.253 145.159 318.689 145.141 319.127 145.125 cv
321.099 145.051 323.067 145.008 324.978 144.985 cv
331.472 144.908 337.294 145.066 340.266 145.066 cv
343.796 145.066 350.884 145.188 357.401 145.966 cv
357.779 146.011 358.155 146.058 358.528 146.107 cv
361.295 146.475 363.911 146.969 366.051 147.632 cv
366.332 147.719 366.604 147.81 366.869 147.902 cv
367.556 148.145 368.184 148.407 368.735 148.691 cv
375.087 151.967 389.314 165.628 390.381 168.996 cv
391.326 171.979 396.284 176.335 390.29 178.921 cv
389.518 179.255 388.564 179.559 387.396 179.827 cv
385.864 180.179 382.973 180.659 379.162 181.22 cv
379.369 181.432 379.706 181.847 380.191 182.638 cv
384.641 182.005 388.017 181.497 389.509 181.215 cv
392.113 180.724 393.71 179.839 394.39 178.512 cv
395.458 176.423 394.069 173.459 392.844 170.845 cv
390.802 166.488 372.869 149.531 369.283 147.289 cv
365.81 145.118 346.5 143.418 335.639 142.756 cv
324.209 142.059 299.709 144.314 294.028 146.587 cv
288.202 148.917 275.329 164.26 270.048 171.573 cv
265.072 178.462 259.396 193.299 258.309 196.203 cv
258.24 196.384 li
258.182 196.543 258.143 196.647 258.128 196.689 cv
259.637 216.855 li
259.638 266.478 li
334.036 254.069 li
cp
.956863 .956863 .956863 rgb
f
334.046 256.023 mo
334.066 255.734 334.063 255.122 334.042 254.285 cv
259.638 266.694 li
259.638 278.931 li
333.636 266.332 li
333.529 266.327 li
333.533 266.244 333.905 257.992 334.046 256.023 cv
cp
f
160.063 202.433 mo
153.239 205.631 114.426 215.654 108.242 217.263 cv
102.057 218.872 85.6362 218.427 70.708 217.263 cv
55.7803 216.099 67.083 206.058 74.9731 200.3 cv
82.8638 194.542 128.714 183.453 128.714 183.453 cv
128.714 183.453 148.76 180.254 179.043 187.097 cv
209.326 193.939 166.887 199.233 160.063 202.433 cv
cp
251.978 183.453 mo
251.978 183.453 246.966 191.556 233.851 190.703 cv
233.851 190.703 208.097 187.234 188.619 184.835 cv
187.693 184.722 186.783 184.61 185.889 184.501 cv
180.068 183.793 174.994 183.209 171.615 182.882 cv
171.508 182.872 171.438 182.865 171.368 182.858 cv
171.278 182.85 171.189 182.841 171.103 182.833 cv
170.543 182.781 170.076 182.74 169.66 182.706 cv
169.409 182.686 169.15 182.666 168.886 182.646 cv
168.852 182.644 168.817 182.641 168.783 182.639 cv
164.579 182.325 158.808 182.046 153.028 181.817 cv
141.849 181.372 130.634 181.107 130.634 181.107 cv
130.634 181.107 157.824 157.968 164.755 153.81 cv
171.686 149.651 181.496 142.827 186.72 141.547 cv
190.244 140.685 207.489 140.985 218.348 141.273 cv
218.395 141.274 218.441 141.275 218.488 141.277 cv
218.582 141.279 218.674 141.282 218.767 141.284 cv
221.828 141.366 224.345 141.446 225.844 141.496 cv
226.803 141.528 227.346 141.547 227.346 141.547 cv
279.808 145.066 li
279.808 145.066 283.112 145.173 279.808 148.905 cv
276.502 152.637 251.978 183.453 251.978 183.453 cv
cp
154.731 258.732 mo
152.172 264.277 149.081 265.557 148.44 265.774 cv
147.801 265.992 129.354 265.77 125.516 264.597 cv
121.677 263.424 118.478 259.479 115.386 252.868 cv
112.293 246.257 113.36 241.352 113.36 241.352 cv
114 240.179 116.239 240.393 117.305 240.393 cv
118.371 240.393 136.711 240.393 148.547 241.352 cv
160.383 242.312 157.717 246.684 158.037 247.643 cv
158.357 248.603 157.291 253.188 154.731 258.732 cv
cp
146.201 281.444 mo
145.881 283.577 140.977 285.496 140.657 285.177 cv
140.337 284.856 131.487 285.496 128.714 285.177 cv
125.942 284.856 122.743 283.577 119.971 279.845 cv
117.198 276.113 121.57 275.687 121.57 275.687 cv
121.57 275.687 141.723 275.474 143.855 275.687 cv
145.988 275.899 146.521 279.312 146.201 281.444 cv
cp
46.7168 257.666 mo
41.812 256.387 36.3735 255.214 36.2671 247.11 cv
36.1606 239.006 38.293 234.848 38.293 234.848 cv
38.293 234.848 39.8926 230.369 46.1836 231.009 cv
52.4746 231.648 81.9043 235.914 81.9043 235.914 cv
81.9043 235.914 90.7544 235.061 95.7661 243.484 cv
100.777 251.908 102.91 258.626 102.91 258.626 cv
102.91 258.626 104.83 265.983 96.832 265.77 cv
88.835 265.557 51.6216 258.945 46.7168 257.666 cv
cp
32.5352 244.23 mo
32.002 244.551 28.5898 242.524 28.4834 239.539 cv
28.3765 236.554 28.4834 228.876 28.4834 228.876 cv
28.4834 228.876 28.6211 226.981 30.1821 228.236 cv
30.1821 228.236 33.1748 229.623 33.4946 233.888 cv
33.8145 238.153 33.0684 243.911 32.5352 244.23 cv
cp
424.716 219.919 mo
424.716 217.29 424.093 212.481 423.359 207.721 cv
422.741 207.623 422.206 207.348 421.837 206.804 cv
420.056 204.181 419.811 201.686 419.277 197.527 cv
418.953 194.996 419.223 192.938 419.48 191.716 cv
416.149 186.532 409.333 179.586 407.016 177.268 cv
404.029 174.283 387.396 151.038 376.732 145.066 cv
376.732 145.066 372.416 144.635 368.735 144.17 cv
366.441 143.883 364.396 143.58 363.794 143.36 cv
363.011 143.075 362.691 142.119 362.137 141.154 cv
348.9 138.804 329.35 136.752 310.641 135.259 cv
301.438 136.396 291.941 139.104 291.003 139.521 cv
291.003 139.521 289.85 139.549 288.832 139.368 cv
287.562 139.142 286.504 138.587 288.16 137.246 cv
289.493 136.168 293.147 135.11 297.48 134.289 cv
296.949 134.253 296.42 134.218 295.893 134.183 cv
293.618 134.569 264.241 133.838 242.604 133.284 cv
232.167 133.819 222.323 134.67 214.335 135.453 cv
212.098 137.815 205.565 139.694 199.448 136.996 cv
198.753 137.066 198.132 137.127 197.596 137.176 cv
188.213 138.029 171.472 147.732 165.181 152.424 cv
158.89 157.115 128.288 181.213 128.288 181.213 cv
123.383 181.427 97.792 186.971 96.0859 186.971 cv
95.854 186.971 95.1738 187.013 94.1504 187.097 cv
89.5171 188.781 84.9409 190.622 80.4194 192.586 cv
75.9019 194.558 71.438 196.662 67.1138 199.027 cv
64.9536 200.211 62.8271 201.46 60.7832 202.835 cv
58.748 204.215 56.7632 205.701 55.0728 207.489 cv
54.6577 207.941 54.2505 208.403 53.896 208.903 cv
53.5391 209.4 53.2241 209.931 52.895 210.452 cv
50.9316 213.585 li
50.606 214.108 50.2827 214.633 49.9678 215.162 cv
49.6548 215.691 49.3423 216.224 49.0967 216.781 cv
49.0386 216.92 48.9854 217.062 48.9492 217.206 cv
48.9209 217.347 48.8965 217.498 48.9502 217.617 cv
49 217.736 49.1284 217.807 49.2661 217.853 cv
49.4033 217.902 49.5537 217.929 49.7036 217.954 cv
50.3081 218.042 50.9282 218.109 51.5322 218.251 cv
51.6836 218.284 51.8335 218.328 51.9839 218.363 cv
52.4336 218.458 li
52.7344 218.518 53.0308 218.592 53.3364 218.635 cv
53.9448 218.731 54.5513 218.836 55.1606 218.925 cv
56.3804 219.1 57.5996 219.276 58.8223 219.434 cv
61.2651 219.76 63.7114 220.061 66.1587 220.359 cv
71.0527 220.952 75.9502 221.517 80.8496 222.07 cv
85.7476 222.62 90.6509 223.174 95.5483 223.686 cv
98.001 223.857 100.47 223.837 102.922 223.653 cv
105.371 223.454 107.814 223.063 110.157 222.329 cv
110.454 222.251 110.736 222.129 111.024 222.025 cv
111.311 221.916 111.601 221.816 111.883 221.698 cv
113.555 220.909 li
114.707 220.439 115.887 220.081 117.067 219.721 cv
119.431 219.011 121.812 218.369 124.194 217.734 cv
128.961 216.473 133.746 215.279 138.533 214.101 cv
148.11 211.749 157.707 209.48 167.309 207.236 cv
176.912 204.995 186.521 202.783 196.136 200.594 cv
205.753 198.415 215.374 196.253 225 194.115 cv
215.381 196.287 205.769 198.483 196.159 200.696 cv
186.548 202.9 176.94 205.121 167.341 207.374 cv
165.538 207.798 163.736 208.224 161.934 208.649 cv
165.689 208.011 169.369 207.91 171.152 209.612 cv
174.28 212.598 171.863 217.432 166.319 222.266 cv
160.774 227.1 153.523 226.246 148.832 226.246 cv
144.14 226.246 123.667 224.682 123.667 224.682 cv
122.246 220.275 131.913 216.01 134.899 215.583 cv
137.58 215.199 146.905 212.411 152.384 210.919 cv
147.778 212.023 143.174 213.138 138.576 214.273 cv
133.79 215.457 129.008 216.657 124.244 217.923 cv
121.864 218.561 119.484 219.206 117.126 219.917 cv
115.95 220.276 114.769 220.638 113.637 221.101 cv
111.966 221.893 li
111.68 222.013 111.387 222.114 111.098 222.225 cv
110.807 222.33 110.521 222.454 110.222 222.532 cv
107.855 223.27 105.398 223.659 102.938 223.856 cv
100.474 224.039 97.999 224.055 95.5332 223.88 cv
90.624 223.362 85.73 222.802 80.8296 222.247 cv
75.9307 221.687 71.0332 221.116 66.1392 220.517 cv
63.6924 220.216 61.2456 219.912 58.8022 219.583 cv
57.5796 219.424 56.3594 219.246 55.1392 219.069 cv
54.5288 218.979 53.9209 218.873 53.3115 218.776 cv
53.0068 218.733 52.7046 218.657 52.4009 218.596 cv
51.9458 218.5 li
51.7964 218.465 51.6504 218.422 51.5005 218.389 cv
50.9038 218.248 50.2959 218.182 49.6812 218.091 cv
49.5278 218.065 49.373 218.038 49.2197 217.984 cv
49.0718 217.934 48.8994 217.847 48.8242 217.672 cv
48.7505 217.501 48.7856 217.33 48.8154 217.174 cv
48.8545 217.019 48.9106 216.872 48.9707 216.727 cv
49.2236 216.156 49.5376 215.624 49.8516 215.093 cv
50.1685 214.563 50.4927 214.039 50.8193 213.516 cv
52.7866 210.384 li
53.1157 209.864 53.4312 209.334 53.7944 208.83 cv
54.1533 208.324 54.564 207.859 54.9824 207.405 cv
56.6865 205.607 58.6782 204.121 60.7192 202.74 cv
62.769 201.366 64.8989 200.116 67.064 198.936 cv
71.4004 196.583 75.873 194.495 80.3989 192.539 cv
84.9282 190.59 89.5112 188.765 94.1504 187.097 cv
87.6421 187.627 67.1265 189.863 57.9126 194.009 cv
56.8335 194.495 55.7397 195.06 54.6416 195.693 cv
54.0039 196.061 53.3618 196.451 52.7241 196.862 cv
51.8711 198.146 51.0884 201.688 50.2354 204.245 cv
49.3823 206.804 49.561 207.796 47.8896 209.873 cv
46.4502 211.661 43.1978 214.108 41.5186 214.873 cv
40.3447 215.406 36.2798 213.761 35.2222 212.541 cv
33.4072 214.669 31.9038 216.657 30.8291 218.32 cv
26.3506 225.251 27.2036 250.948 27.2036 250.948 cv
21.019 255.107 29.5493 272.808 32.1084 274.3 cv
32.2515 274.384 32.5073 274.494 32.8657 274.631 cv
31.7866 272.858 30.4326 270.276 30.2104 268.187 cv
29.833 264.633 33.2451 266.054 39.0757 267.76 cv
44.9043 269.466 100.494 279.275 100.494 279.275 cv
100.494 279.275 108.738 279.845 117.412 284.82 cv
126.085 289.798 136.748 290.365 152.102 289.938 cv
167.457 289.512 177.407 289.371 177.407 289.371 cv
177.407 289.371 180.819 273.447 183.238 266.48 cv
185.654 259.515 193.331 245.581 195.89 242.169 cv
198.449 238.757 209.539 229.517 217.786 227.953 cv
226.03 226.388 239.679 229.942 244.229 240.036 cv
248.778 250.132 251.906 253.544 251.764 265.486 cv
251.754 266.297 251.745 267.065 251.739 267.795 cv
259.424 266.514 li
259.424 216.863 li
257.911 196.66 li
257.919 196.638 257.961 196.523 258.041 196.31 cv
258.108 196.128 li
259.197 193.22 264.884 178.359 269.875 171.448 cv
275.169 164.118 288.083 148.735 293.949 146.389 cv
299.648 144.109 324.202 141.844 335.651 142.543 cv
346.533 143.207 365.887 144.915 369.396 147.108 cv
371.097 148.171 376.498 152.962 381.694 158.016 cv
384.663 160.904 391.711 167.926 393.037 170.754 cv
394.283 173.413 395.696 176.427 394.579 178.609 cv
393.868 179.999 392.222 180.92 389.548 181.425 cv
388.064 181.705 384.721 182.208 380.312 182.836 cv
381.351 184.576 383.017 187.949 385.475 194.465 cv
389.94 206.298 389.426 217.484 389.361 218.597 cv
389.715 218.325 390.071 218.065 390.431 217.823 cv
391.049 217.403 391.674 217.034 392.301 216.721 cv
399.338 213.202 409.574 218.427 412.986 224.398 cv
416.398 230.369 416.505 242.099 416.932 249.136 cv
416.932 249.136 420.805 247.118 424.609 244.956 cv
424.647 244.832 424.684 244.732 424.716 244.657 cv
425.355 243.165 424.716 225.251 424.716 219.919 cv
cp
f
259.424 266.729 mo
251.755 268.009 li
251.738 267.908 li
251.641 277.819 251.764 280.271 251.764 280.271 cv
259.53 278.949 li
259.424 278.949 li
259.424 266.729 li
cp
f
334.254 254.249 mo
334.276 255.111 334.28 255.742 334.259 256.039 cv
334.121 257.96 333.764 265.871 333.743 266.313 cv
363.065 261.321 li
370.762 260.012 li
370.762 260.012 372.304 253.881 373.938 247.631 cv
334.254 254.249 li
cp
f
378.314 190.261 mo
378.314 190.261 373.727 191.961 370.03 192.317 cv
366.334 192.672 364.263 192.664 364.263 192.664 cv
365.497 191.465 368.371 190.396 371.805 189.992 cv
374.348 189.692 376.676 189.819 378.314 190.261 cv
cp
379.41 193.914 mo
379.265 194.063 378.873 194.296 378.174 194.597 cv
376.714 195.266 374.733 195.803 372.521 196.063 cv
369.153 196.46 366.16 196.11 364.65 195.268 cv
364.65 195.268 375.22 196.369 379.41 193.914 cv
cp
368.352 194.374 mo
368.311 194.027 370.043 193.538 372.222 193.281 cv
374.4 193.024 376.199 193.098 376.24 193.444 cv
376.281 193.791 374.549 194.28 372.37 194.537 cv
370.191 194.793 368.392 194.72 368.352 194.374 cv
cp
385.275 194.54 mo
382.771 187.905 381.103 184.553 380.088 182.868 cv
366.612 184.784 343.466 187.825 332.805 189.217 cv
333.196 190.569 333.646 192.342 333.761 193.68 cv
333.797 194.091 li
335.047 208.583 335.125 213.512 334.97 215.096 cv
334.608 218.776 333.406 233.274 333.406 235.061 cv
333.406 235.728 333.55 238.631 333.716 241.992 cv
333.925 246.227 334.172 251.229 334.249 254.034 cv
373.949 247.413 li
373.967 247.518 li
374.972 243.677 376.006 239.806 376.732 237.3 cv
378.169 232.355 382.229 225.264 387.131 220.532 cv
387.823 219.864 388.531 219.241 389.252 218.68 cv
389.143 218.672 li
389.15 218.555 389.939 206.902 385.275 194.54 cv
cp
f
325.631 188.007 mo
325.284 188.048 324.94 188.088 324.6 188.128 cv
313.874 189.395 306.145 190.277 306.145 190.277 cv
303.547 190.521 li
303.375 191.199 302.613 191.909 301.626 192.567 cv
315.092 191.082 326.833 189.774 327.104 189.744 cv
327.207 189.731 329.245 189.467 332.53 189.038 cv
332.229 188.02 331.98 187.292 331.975 187.276 cv
332.075 187.241 li
332.037 187.246 331.999 187.25 331.961 187.255 cv
329.772 187.516 327.653 187.768 325.631 188.007 cv
cp
f
370.146 182.482 mo
369.662 182.547 369.172 182.613 368.676 182.679 cv
357.713 184.137 343.983 185.818 332.184 187.228 cv
332.227 187.355 332.464 188.059 332.744 189.01 cv
343.366 187.623 366.468 184.587 379.967 182.669 cv
379.395 181.747 379.052 181.39 378.899 181.26 cv
376.34 181.636 373.379 182.048 370.146 182.482 cv
cp
f
303.547 190.521 mo
303.567 190.439 303.582 190.357 303.585 190.277 cv
270.673 190.846 li
270.673 190.846 270.458 191.863 271.232 192.942 cv
270.748 193.601 li
268.885 196.134 li
276.789 195.297 289.865 193.864 301.626 192.567 cv
302.613 191.909 303.375 191.199 303.547 190.521 cv
cp
.129412 .145098 .141176 rgb
f
277.354 203.641 mo
284.24 195.768 li
289.64 195.839 295.167 195.539 296.192 195.182 cv
297.138 194.853 299.435 193.93 301.221 192.826 cv
289.477 194.121 276.506 195.542 268.714 196.367 cv
266.763 199.021 li
267.261 205.916 277.354 203.641 277.354 203.641 cv
cp
f
294.984 180.183 mo
293.064 179.045 284.605 175.491 277.354 179.827 cv
270.104 184.164 270.673 190.846 270.673 190.846 cv
303.585 190.277 li
302.59 183.239 296.903 181.32 294.984 180.183 cv
cp
.968627 .972549 .976471 rgb
f
416.932 249.136 mo
416.505 242.099 416.398 230.369 412.986 224.398 cv
409.574 218.427 399.338 213.202 392.301 216.721 cv
391.674 217.034 391.049 217.403 390.431 217.823 cv
397.517 217.787 400.006 219.794 400.006 219.794 cv
401.637 220.37 403.128 221.287 404.424 222.428 cv
409.016 226.469 410.81 232.406 412.447 238.067 cv
414.469 245.059 413.469 253.341 411.178 260.159 cv
411.091 260.419 411.001 260.678 410.909 260.936 cv
412.449 260.561 413.597 260.246 414.266 260.012 cv
421.758 257.381 423.867 247.251 424.609 244.956 cv
420.805 247.118 416.932 249.136 416.932 249.136 cv
cp
.0666667 .0666667 .0666667 rgb
f
143.855 275.687 mo
141.723 275.474 121.57 275.687 121.57 275.687 cv
121.57 275.687 117.198 276.113 119.971 279.845 cv
122.743 283.577 125.942 284.856 128.714 285.177 cv
131.487 285.496 140.337 284.856 140.657 285.177 cv
140.977 285.496 145.881 283.577 146.201 281.444 cv
146.521 279.312 145.988 275.899 143.855 275.687 cv
cp
f
96.832 265.77 mo
104.83 265.983 102.91 258.626 102.91 258.626 cv
102.91 258.626 100.777 251.908 95.7661 243.484 cv
90.7544 235.061 81.9043 235.914 81.9043 235.914 cv
81.9043 235.914 52.4746 231.648 46.1836 231.009 cv
39.8926 230.369 38.293 234.848 38.293 234.848 cv
38.293 234.848 36.1606 239.006 36.2671 247.11 cv
36.3735 255.214 41.812 256.387 46.7168 257.666 cv
51.6216 258.945 88.835 265.557 96.832 265.77 cv
cp
f
148.547 241.352 mo
136.711 240.393 118.371 240.393 117.305 240.393 cv
116.239 240.393 114 240.179 113.36 241.352 cv
113.36 241.352 112.293 246.257 115.386 252.868 cv
118.478 259.479 121.677 263.424 125.516 264.597 cv
129.354 265.77 147.801 265.992 148.44 265.774 cv
149.081 265.557 152.172 264.277 154.731 258.732 cv
157.291 253.188 158.357 248.603 158.037 247.643 cv
157.717 246.684 160.383 242.312 148.547 241.352 cv
cp
f
30.1821 228.236 mo
28.6211 226.981 28.4834 228.876 28.4834 228.876 cv
28.4834 228.876 28.3765 236.554 28.4834 239.539 cv
28.5898 242.524 32.002 244.551 32.5352 244.23 cv
33.0684 243.911 33.8145 238.153 33.4946 233.888 cv
33.1748 229.623 30.1821 228.236 30.1821 228.236 cv
cp
f
41.5186 214.873 mo
43.1978 214.108 46.4502 211.661 47.8896 209.873 cv
49.561 207.796 49.3823 206.804 50.2354 204.245 cv
51.0884 201.688 51.8711 198.146 52.7241 196.862 cv
50.0308 198.585 47.3481 200.656 44.8062 202.868 cv
45.9043 203.674 46.6401 204.849 46.7573 206.203 cv
46.9917 208.943 44.6055 211.387 41.4258 211.66 cv
39.7622 211.803 38.21 211.323 37.0752 210.438 cv
36.4272 211.15 35.8086 211.852 35.2222 212.541 cv
36.2798 213.761 40.3447 215.406 41.5186 214.873 cv
cp
.686275 .737255 .811765 rgb
f
259.637 216.855 mo
258.128 196.689 li
258.143 196.647 258.182 196.543 258.24 196.384 cv
258.309 196.203 li
259.396 193.299 265.072 178.462 270.048 171.573 cv
275.329 164.26 288.202 148.917 294.028 146.587 cv
299.709 144.314 324.209 142.059 335.639 142.756 cv
346.5 143.418 365.81 145.118 369.283 147.289 cv
372.869 149.531 390.802 166.488 392.844 170.845 cv
394.069 173.459 395.458 176.423 394.39 178.512 cv
393.71 179.839 392.113 180.724 389.509 181.215 cv
388.017 181.497 384.641 182.005 380.191 182.638 cv
379.706 181.847 379.369 181.432 379.162 181.22 cv
379.113 181.227 379.063 181.235 379.015 181.242 cv
378.977 181.249 378.938 181.254 378.899 181.26 cv
379.052 181.39 379.395 181.747 379.967 182.669 cv
366.468 184.587 343.366 187.623 332.744 189.01 cv
332.464 188.059 332.227 187.355 332.184 187.228 cv
332.176 187.206 332.075 187.241 332.075 187.241 cv
331.975 187.276 li
331.98 187.292 332.229 188.02 332.53 189.038 cv
329.245 189.467 327.207 189.731 327.104 189.744 cv
326.833 189.774 315.092 191.082 301.626 192.567 cv
289.865 193.864 276.789 195.297 268.885 196.134 cv
264.911 196.555 262.243 196.826 261.711 196.853 cv
258.877 196.995 li
258.192 196.968 li
258.184 197.181 li
258.878 197.208 li
261.721 197.065 li
262.247 197.039 264.841 196.776 268.714 196.367 cv
276.506 195.542 289.477 194.121 301.221 192.826 cv
314.866 191.321 326.854 189.986 327.129 189.956 cv
327.233 189.942 329.285 189.676 332.591 189.245 cv
332.981 190.591 333.435 192.365 333.549 193.698 cv
333.584 194.109 li
334.833 208.584 334.911 213.5 334.757 215.075 cv
334.396 218.758 333.192 233.27 333.192 235.061 cv
333.192 235.732 333.336 238.639 333.502 242.002 cv
333.712 246.253 333.961 251.279 334.036 254.069 cv
259.638 266.478 li
259.637 216.855 li
cp
251.738 267.908 mo
251.755 268.009 li
259.424 266.729 li
259.424 278.949 li
259.53 278.949 li
259.638 278.949 li
259.638 278.931 259.638 266.694 259.638 266.694 cv
334.042 254.285 li
334.063 255.122 334.066 255.734 334.046 256.023 cv
333.905 257.992 333.533 266.244 333.529 266.327 cv
333.636 266.332 li
333.742 266.337 li
333.764 265.871 334.121 257.96 334.259 256.039 cv
334.28 255.742 334.276 255.111 334.254 254.249 cv
373.938 247.631 li
373.984 247.623 373.967 247.518 373.967 247.518 cv
373.949 247.413 li
334.249 254.034 li
334.172 251.229 333.925 246.227 333.716 241.992 cv
333.55 238.631 333.406 235.728 333.406 235.061 cv
333.406 233.274 334.608 218.776 334.97 215.096 cv
335.125 213.512 335.047 208.583 333.797 194.091 cv
333.761 193.68 li
333.646 192.342 333.196 190.569 332.805 189.217 cv
343.466 187.825 366.612 184.784 380.088 182.868 cv
381.103 184.553 382.771 187.905 385.275 194.54 cv
389.939 206.902 389.15 218.555 389.143 218.672 cv
389.252 218.68 li
389.355 218.687 li
389.355 218.682 389.358 218.651 389.361 218.597 cv
389.426 217.484 389.94 206.298 385.475 194.465 cv
383.017 187.949 381.351 184.576 380.312 182.836 cv
384.721 182.208 388.064 181.705 389.548 181.425 cv
392.222 180.92 393.868 179.999 394.579 178.609 cv
395.696 176.427 394.283 173.413 393.037 170.754 cv
391.711 167.926 384.663 160.904 381.694 158.016 cv
376.498 152.962 371.097 148.171 369.396 147.108 cv
365.887 144.915 346.533 143.207 335.651 142.543 cv
324.202 141.844 299.648 144.109 293.949 146.389 cv
288.083 148.735 275.169 164.118 269.875 171.448 cv
264.884 178.359 259.197 193.22 258.108 196.128 cv
258.041 196.31 li
257.961 196.523 257.919 196.638 257.919 196.638 cv
257.911 196.66 259.424 216.863 259.424 216.863 cv
259.424 266.514 li
251.739 267.795 li
251.72 267.799 251.738 267.908 251.738 267.908 cv
cp
.247059 .247059 .247059 rgb
f
419.277 197.527 mo
419.811 201.686 420.056 204.181 421.837 206.804 cv
422.206 207.348 422.741 207.623 423.359 207.721 cv
422.606 202.829 421.736 197.986 421.304 195.608 cv
421.114 194.559 420.442 193.211 419.48 191.716 cv
419.223 192.938 418.953 194.996 419.277 197.527 cv
cp
.368627 .0313726 .0313726 rgb
f
67.064 198.936 mo
64.8989 200.116 62.769 201.366 60.7192 202.74 cv
58.6782 204.121 56.6865 205.607 54.9824 207.405 cv
54.564 207.859 54.1533 208.324 53.7944 208.83 cv
53.4312 209.334 53.1157 209.864 52.7866 210.384 cv
50.8193 213.516 li
50.4927 214.039 50.1685 214.563 49.8516 215.093 cv
49.5376 215.624 49.2236 216.156 48.9707 216.727 cv
48.9106 216.872 48.8545 217.019 48.8154 217.174 cv
48.7856 217.33 48.7505 217.501 48.8242 217.672 cv
48.8994 217.847 49.0718 217.934 49.2197 217.984 cv
49.373 218.038 49.5278 218.065 49.6812 218.091 cv
50.2959 218.182 50.9038 218.248 51.5005 218.389 cv
51.6504 218.422 51.7964 218.465 51.9458 218.5 cv
52.4009 218.596 li
52.7046 218.657 53.0068 218.733 53.3115 218.776 cv
53.9209 218.873 54.5288 218.979 55.1392 219.069 cv
56.3594 219.246 57.5796 219.424 58.8022 219.583 cv
61.2456 219.912 63.6924 220.216 66.1392 220.517 cv
71.0332 221.116 75.9307 221.687 80.8296 222.247 cv
85.73 222.802 90.624 223.362 95.5332 223.88 cv
97.999 224.055 100.474 224.039 102.938 223.856 cv
105.398 223.659 107.855 223.27 110.222 222.532 cv
110.521 222.454 110.807 222.33 111.098 222.225 cv
111.387 222.114 111.68 222.013 111.966 221.893 cv
113.637 221.101 li
114.769 220.638 115.95 220.276 117.126 219.917 cv
119.484 219.206 121.864 218.561 124.244 217.923 cv
129.008 216.657 133.79 215.457 138.576 214.273 cv
143.174 213.138 147.778 212.023 152.384 210.919 cv
153.007 210.75 153.583 210.596 154.092 210.465 cv
156.23 209.916 159.104 209.13 161.934 208.649 cv
163.736 208.224 165.538 207.798 167.341 207.374 cv
176.94 205.121 186.548 202.9 196.159 200.696 cv
205.769 198.483 215.381 196.287 225 194.115 cv
215.374 196.253 205.753 198.415 196.136 200.594 cv
186.521 202.783 176.912 204.995 167.309 207.236 cv
157.707 209.48 148.11 211.749 138.533 214.101 cv
133.746 215.279 128.961 216.473 124.194 217.734 cv
121.812 218.369 119.431 219.011 117.067 219.721 cv
115.887 220.081 114.707 220.439 113.555 220.909 cv
111.883 221.698 li
111.601 221.816 111.311 221.916 111.024 222.025 cv
110.736 222.129 110.454 222.251 110.157 222.329 cv
107.814 223.063 105.371 223.454 102.922 223.653 cv
100.47 223.837 98.001 223.857 95.5483 223.686 cv
90.6509 223.174 85.7476 222.62 80.8496 222.07 cv
75.9502 221.517 71.0527 220.952 66.1587 220.359 cv
63.7114 220.061 61.2651 219.76 58.8223 219.434 cv
57.5996 219.276 56.3804 219.1 55.1606 218.925 cv
54.5513 218.836 53.9448 218.731 53.3364 218.635 cv
53.0308 218.592 52.7344 218.518 52.4336 218.458 cv
51.9839 218.363 li
51.8335 218.328 51.6836 218.284 51.5322 218.251 cv
50.9282 218.109 50.3081 218.042 49.7036 217.954 cv
49.5537 217.929 49.4033 217.902 49.2661 217.853 cv
49.1284 217.807 49 217.736 48.9502 217.617 cv
48.8965 217.498 48.9209 217.347 48.9492 217.206 cv
48.9854 217.062 49.0386 216.92 49.0967 216.781 cv
49.3423 216.224 49.6548 215.691 49.9678 215.162 cv
50.2827 214.633 50.606 214.108 50.9316 213.585 cv
52.895 210.452 li
53.2241 209.931 53.5391 209.4 53.896 208.903 cv
54.2505 208.403 54.6577 207.941 55.0728 207.489 cv
56.7632 205.701 58.748 204.215 60.7832 202.835 cv
62.8271 201.46 64.9536 200.211 67.1138 199.027 cv
71.438 196.662 75.9019 194.558 80.4194 192.586 cv
84.9409 190.622 89.5171 188.781 94.1504 187.097 cv
89.5112 188.765 84.9282 190.59 80.3989 192.539 cv
75.873 194.495 71.4004 196.583 67.064 198.936 cv
cp
.247059 .247059 .247059 rgb
f
168.397 210.996 mo
171.064 213.442 169.003 217.401 164.276 221.36 cv
159.548 225.32 153.367 224.621 149.366 224.621 cv
148.266 224.621 146.145 224.524 143.651 224.383 cv
142.813 224.792 141.845 225.026 140.813 225.026 cv
139.486 225.026 138.264 224.639 137.289 223.99 cv
132.365 223.667 127.912 223.34 127.912 223.34 cv
126.699 219.73 134.942 216.236 137.487 215.886 cv
137.55 215.878 137.62 215.867 137.69 215.855 cv
138.591 215.355 139.662 215.063 140.813 215.063 cv
140.927 215.063 141.04 215.067 141.152 215.073 cv
144.776 214.155 149.861 212.717 153.014 211.907 cv
154.17 211.275 155.54 210.908 157.011 210.908 cv
161.22 209.943 166.318 209.09 168.397 210.996 cv
cp
152.384 210.919 mo
146.905 212.411 137.58 215.199 134.899 215.583 cv
131.913 216.01 122.246 220.275 123.667 224.682 cv
123.667 224.682 144.14 226.246 148.832 226.246 cv
153.523 226.246 160.774 227.1 166.319 222.266 cv
171.863 217.432 174.28 212.598 171.152 209.612 cv
169.369 207.91 165.689 208.011 161.934 208.649 cv
159.104 209.13 156.23 209.916 154.092 210.465 cv
153.583 210.596 153.007 210.75 152.384 210.919 cv
cp
.686275 .737255 .811765 rgb
f
164.49 217.355 mo
164.49 220.917 161.141 223.804 157.011 223.804 cv
152.88 223.804 149.531 220.917 149.531 217.355 cv
149.531 215.062 150.921 213.05 153.014 211.907 cv
149.861 212.717 144.776 214.155 141.152 215.073 cv
144.186 215.224 146.591 217.392 146.591 220.045 cv
146.591 221.906 145.406 223.528 143.651 224.383 cv
146.145 224.524 148.266 224.621 149.366 224.621 cv
153.367 224.621 159.548 225.32 164.276 221.36 cv
169.003 217.401 171.064 213.442 168.397 210.996 cv
166.318 209.09 161.22 209.943 157.063 210.909 cv
161.17 210.934 164.49 213.81 164.49 217.355 cv
cp
.854902 .87451 .898039 rgb
f
135.036 220.045 mo
135.036 218.286 136.094 216.742 137.69 215.855 cv
137.62 215.867 137.55 215.878 137.487 215.886 cv
134.942 216.236 126.699 219.73 127.912 223.34 cv
127.912 223.34 132.365 223.667 137.289 223.99 cv
135.919 223.08 135.036 221.651 135.036 220.045 cv
cp
f
179.043 187.097 mo
148.76 180.254 128.714 183.453 128.714 183.453 cv
128.714 183.453 82.8638 194.542 74.9731 200.3 cv
67.083 206.058 55.7803 216.099 70.708 217.263 cv
85.6362 218.427 102.057 218.872 108.242 217.263 cv
114.426 215.654 153.239 205.631 160.063 202.433 cv
166.887 199.233 209.326 193.939 179.043 187.097 cv
cp
1 1 1 rgb
f
288.832 139.368 mo
288.832 139.368 304.438 135.47 306.997 135.15 cv
309.557 134.83 317.66 133.764 322.032 134.19 cv
326.404 134.617 345.49 136.496 348.689 136.73 cv
351.889 136.962 358.18 137.423 361.271 138.899 cv
364.364 140.375 365.644 140.801 366.71 141.761 cv
367.348 142.334 368.175 143.403 368.735 144.17 cv
372.416 144.635 376.732 145.066 376.732 145.066 cv
376.732 145.066 374.031 141.797 370.335 138.812 cv
366.64 135.826 358.962 135.966 352.421 134.83 cv
345.881 133.693 321.429 132.981 313.608 132.749 cv
309.278 132.619 302.856 133.271 297.48 134.289 cv
293.147 135.11 289.493 136.168 288.16 137.246 cv
286.504 138.587 287.562 139.142 288.832 139.368 cv
cp
.992157 .996078 1 rgb
f
366.71 141.761 mo
365.644 140.801 364.364 140.375 361.271 138.899 cv
358.18 137.423 351.889 136.962 348.689 136.73 cv
345.49 136.496 326.404 134.617 322.032 134.19 cv
317.66 133.764 309.557 134.83 306.997 135.15 cv
304.438 135.47 288.832 139.368 288.832 139.368 cv
289.85 139.549 291.003 139.521 291.003 139.521 cv
291.941 139.104 301.438 136.396 310.641 135.259 cv
313.991 134.846 317.303 134.64 320.149 134.83 cv
330.812 135.54 355.69 138.242 359.103 138.899 cv
360.804 139.226 361.587 140.195 362.137 141.154 cv
362.691 142.119 363.011 143.075 363.794 143.36 cv
364.396 143.58 366.441 143.883 368.735 144.17 cv
368.175 143.403 367.348 142.334 366.71 141.761 cv
cp
.909804 .913725 .917647 rgb
f
214.335 135.453 mo
216.573 133.09 219.633 132.748 219.633 132.748 cv
220.666 132.716 230.404 132.972 242.604 133.284 cv
264.241 133.838 293.618 134.569 295.893 134.183 cv
296.044 134.157 296.078 134.127 295.979 134.091 cv
293.563 133.209 259.441 130.28 256.74 130.565 cv
254.038 130.849 217.785 129.711 214.088 130.565 cv
210.394 131.417 199.458 136.991 199.448 136.996 cv
205.565 139.694 212.098 137.815 214.335 135.453 cv
cp
.992157 .996078 1 rgb
f
140.813 224.507 mo
137.955 224.507 135.637 222.509 135.637 220.045 cv
135.637 217.58 137.955 215.583 140.813 215.583 cv
143.672 215.583 145.99 217.58 145.99 220.045 cv
145.99 222.509 143.672 224.507 140.813 224.507 cv
cp
146.591 220.045 mo
146.591 217.392 144.186 215.224 141.152 215.073 cv
141.04 215.067 140.927 215.063 140.813 215.063 cv
139.662 215.063 138.591 215.355 137.69 215.855 cv
136.094 216.742 135.036 218.286 135.036 220.045 cv
135.036 221.651 135.919 223.08 137.289 223.99 cv
138.264 224.639 139.486 225.026 140.813 225.026 cv
141.845 225.026 142.813 224.792 143.651 224.383 cv
145.406 223.528 146.591 221.906 146.591 220.045 cv
cp
.458824 .458824 .458824 rgb
f
144.353 219.462 mo
144.393 219.651 144.417 219.845 144.417 220.045 cv
144.417 221.796 142.803 223.216 140.813 223.216 cv
138.824 223.216 137.21 221.796 137.21 220.045 cv
137.21 218.293 138.824 216.873 140.813 216.873 cv
141.04 216.873 141.261 216.894 141.475 216.929 cv
141.838 216.635 142.321 216.455 142.853 216.455 cv
143.979 216.455 144.892 217.258 144.892 218.25 cv
144.892 218.718 144.687 219.143 144.353 219.462 cv
cp
140.813 215.583 mo
137.955 215.583 135.637 217.58 135.637 220.045 cv
135.637 222.509 137.955 224.507 140.813 224.507 cv
143.672 224.507 145.99 222.509 145.99 220.045 cv
145.99 217.58 143.672 215.583 140.813 215.583 cv
cp
.94902 .94902 .94902 rgb
f
157.011 211.272 mo
160.849 211.272 163.96 213.954 163.96 217.263 cv
163.96 220.571 160.849 223.254 157.011 223.254 cv
153.172 223.254 150.061 220.571 150.061 217.263 cv
150.061 213.954 153.172 211.272 157.011 211.272 cv
cp
149.531 217.355 mo
149.531 220.917 152.88 223.804 157.011 223.804 cv
161.141 223.804 164.49 220.917 164.49 217.355 cv
164.49 213.81 161.17 210.934 157.063 210.909 cv
155.54 210.908 154.17 211.275 153.014 211.907 cv
150.921 213.05 149.531 215.062 149.531 217.355 cv
cp
.458824 .458824 .458824 rgb
f
157.011 213.325 mo
157.062 213.325 157.112 213.33 157.163 213.332 cv
157.679 212.766 158.469 212.403 159.357 212.403 cv
160.911 212.403 162.17 213.512 162.17 214.879 cv
162.17 215.533 161.88 216.126 161.41 216.568 cv
161.456 216.794 161.484 217.025 161.484 217.263 cv
161.484 219.438 159.481 221.201 157.011 221.201 cv
154.54 221.201 152.537 219.438 152.537 217.263 cv
152.537 215.088 154.54 213.325 157.011 213.325 cv
cp
157.011 223.254 mo
160.849 223.254 163.96 220.571 163.96 217.263 cv
163.96 213.954 160.849 211.272 157.011 211.272 cv
153.172 211.272 150.061 213.954 150.061 217.263 cv
150.061 220.571 153.172 223.254 157.011 223.254 cv
cp
.94902 .94902 .94902 rgb
f
157.011 221.201 mo
159.481 221.201 161.484 219.438 161.484 217.263 cv
161.484 217.025 161.456 216.794 161.41 216.568 cv
160.897 217.052 160.168 217.355 159.357 217.355 cv
157.804 217.355 156.544 216.247 156.544 214.879 cv
156.544 214.293 156.777 213.756 157.163 213.332 cv
157.112 213.33 157.062 213.325 157.011 213.325 cv
154.54 213.325 152.537 215.088 152.537 217.263 cv
152.537 219.438 154.54 221.201 157.011 221.201 cv
cp
.717647 .717647 .717647 rgb
f
140.813 218.25 mo
140.813 217.727 141.069 217.257 141.475 216.929 cv
141.261 216.894 141.04 216.873 140.813 216.873 cv
138.824 216.873 137.21 218.293 137.21 220.045 cv
137.21 221.796 138.824 223.216 140.813 223.216 cv
142.803 223.216 144.417 221.796 144.417 220.045 cv
144.417 219.845 144.393 219.651 144.353 219.462 cv
143.98 219.819 143.447 220.045 142.853 220.045 cv
141.727 220.045 140.813 219.241 140.813 218.25 cv
cp
f
142.853 216.455 mo
142.321 216.455 141.838 216.635 141.475 216.929 cv
141.069 217.257 140.813 217.727 140.813 218.25 cv
140.813 219.241 141.727 220.045 142.853 220.045 cv
143.447 220.045 143.98 219.819 144.353 219.462 cv
144.687 219.143 144.892 218.718 144.892 218.25 cv
144.892 217.258 143.979 216.455 142.853 216.455 cv
cp
1 1 1 rgb
f
41.4258 211.66 mo
44.6055 211.387 46.9917 208.943 46.7573 206.203 cv
46.6401 204.849 45.9043 203.674 44.8062 202.868 cv
44.6631 202.991 44.52 203.115 44.3794 203.241 cv
45.3794 203.966 46.0513 205.028 46.1582 206.254 cv
46.3691 208.711 44.23 210.899 41.3833 211.144 cv
39.8755 211.274 38.4722 210.833 37.4526 210.026 cv
37.3247 210.165 37.1992 210.302 37.0752 210.438 cv
38.21 211.323 39.7622 211.803 41.4258 211.66 cv
cp
.458824 .458824 .458824 rgb
f
41.3833 211.144 mo
44.23 210.899 46.3691 208.711 46.1582 206.254 cv
46.0513 205.028 45.3794 203.966 44.3794 203.241 cv
44.0146 203.561 43.6543 203.883 43.2983 204.211 cv
44.0234 204.727 44.5137 205.497 44.5908 206.388 cv
44.7397 208.135 43.2534 209.688 41.2725 209.858 cv
41.0464 209.877 40.8247 209.877 40.6089 209.86 cv
40.2744 210.182 39.8052 210.404 39.2764 210.449 cv
38.6128 210.506 37.999 210.276 37.5913 209.873 cv
37.5444 209.924 37.4976 209.976 37.4526 210.026 cv
38.4722 210.833 39.8755 211.274 41.3833 211.144 cv
cp
.94902 .94902 .94902 rgb
f
41.1528 208.487 mo
41.1978 209.007 40.9844 209.498 40.6089 209.86 cv
40.8247 209.877 41.0464 209.877 41.2725 209.858 cv
43.2534 209.688 44.7397 208.135 44.5908 206.388 cv
44.5137 205.497 44.0234 204.727 43.2983 204.211 cv
42.2427 205.171 41.2168 206.149 40.2314 207.133 cv
40.7456 207.417 41.104 207.905 41.1528 208.487 cv
cp
.717647 .717647 .717647 rgb
f
39.2764 210.449 mo
39.8052 210.404 40.2744 210.182 40.6089 209.86 cv
40.9844 209.498 41.1978 209.007 41.1528 208.487 cv
41.104 207.905 40.7456 207.417 40.2314 207.133 cv
39.6152 207.747 39.0161 208.361 38.436 208.973 cv
38.1504 209.274 37.8687 209.574 37.5913 209.873 cv
37.999 210.276 38.6128 210.506 39.2764 210.449 cv
cp
1 1 1 rgb
f
159.357 217.355 mo
160.168 217.355 160.897 217.052 161.41 216.568 cv
161.88 216.126 162.17 215.533 162.17 214.879 cv
162.17 213.512 160.911 212.403 159.357 212.403 cv
158.469 212.403 157.679 212.766 157.163 213.332 cv
156.777 213.756 156.544 214.293 156.544 214.879 cv
156.544 216.247 157.804 217.355 159.357 217.355 cv
cp
f
314.025 199.936 mo
314.025 199.936 316.097 199.944 319.793 199.589 cv
323.489 199.233 328.077 197.533 328.077 197.533 cv
326.438 197.091 324.11 196.965 321.568 197.264 cv
318.135 197.668 315.261 198.737 314.025 199.936 cv
314.025 199.936 li
cp
.776471 .776471 .776471 rgb
f
317.944 203.072 mo
316.203 203.037 314.413 202.541 314.413 202.541 cv
315.923 203.382 318.916 203.732 322.283 203.335 cv
324.496 203.075 326.478 202.539 327.937 201.869 cv
325.275 203.012 319.687 203.108 317.944 203.072 cv
cp
f
329.227 201.154 mo
324.982 203.641 314.413 202.541 314.413 202.541 cv
314.413 202.541 316.203 203.037 317.944 203.072 cv
319.687 203.108 325.275 203.012 327.937 201.869 cv
328.637 201.569 329.027 201.335 329.227 201.154 cv
cp
.647059 .658824 .666667 rgb
f
326.004 200.716 mo
325.963 200.37 324.163 200.296 321.984 200.553 cv
319.807 200.81 318.073 201.299 318.114 201.646 cv
318.155 201.993 319.954 202.065 322.133 201.809 cv
324.312 201.552 326.044 201.063 326.004 200.716 cv
cp
1 1 1 rgb
f
364.263 192.664 mo
364.263 192.664 366.334 192.672 370.03 192.317 cv
373.727 191.961 378.314 190.261 378.314 190.261 cv
376.676 189.819 374.348 189.692 371.805 189.992 cv
368.371 190.396 365.497 191.465 364.263 192.664 cv
364.263 192.664 li
cp
.776471 .776471 .776471 rgb
f
372.521 196.063 mo
374.733 195.803 376.714 195.266 378.174 194.597 cv
375.513 195.739 369.923 195.835 368.182 195.8 cv
366.44 195.765 364.65 195.268 364.65 195.268 cv
366.16 196.11 369.153 196.46 372.521 196.063 cv
cp
f
378.174 194.597 mo
378.873 194.296 379.265 194.063 379.463 193.882 cv
375.22 196.369 364.65 195.268 364.65 195.268 cv
364.65 195.268 366.44 195.765 368.182 195.8 cv
369.923 195.835 375.513 195.739 378.174 194.597 cv
cp
.647059 .658824 .666667 rgb
f
376.24 193.444 mo
376.199 193.098 374.4 193.024 372.222 193.281 cv
370.043 193.538 368.311 194.027 368.352 194.374 cv
368.392 194.72 370.191 194.793 372.37 194.537 cv
374.549 194.28 376.281 193.791 376.24 193.444 cv
cp
1 1 1 rgb
f
226.106 141.505 mo
226.023 141.502 225.935 141.499 225.844 141.496 cv
224.345 141.446 221.828 141.366 218.767 141.284 cv
218.674 141.282 218.582 141.279 218.488 141.277 cv
218.441 141.275 218.395 141.274 218.348 141.273 cv
214.939 141.183 210.903 141.092 206.858 141.036 cv
192.909 149.018 162.611 173.863 153.028 181.816 cv
158.808 182.046 164.579 182.325 168.783 182.639 cv
168.817 182.641 168.852 182.644 168.886 182.646 cv
169.15 182.666 169.409 182.686 169.66 182.706 cv
170.076 182.74 170.543 182.781 171.054 182.829 cv
171.189 182.841 171.278 182.85 171.368 182.858 cv
171.438 182.865 171.508 182.872 171.58 182.878 cv
171.981 182.917 172.365 182.955 172.769 182.996 cv
226.106 141.505 li
cp
.427451 .427451 .427451 rgb
f
244.031 142.667 mo
236.299 142.149 li
182.822 184.131 li
183.816 184.25 184.841 184.374 185.889 184.501 cv
186.783 184.61 187.693 184.722 188.619 184.835 cv
189.312 184.921 190.013 185.007 190.721 185.095 cv
244.031 142.667 li
cp
f
77.2021 286.07 mo
80.0874 286.69 82.8418 287.252 85.3682 287.726 cv
85.0815 287.762 84.7993 287.782 84.5234 287.781 cv
82.1284 287.78 79.6196 287.224 77.2021 286.07 cv
cp
371.963 269.025 mo
370.399 267.035 370.762 260.012 370.762 260.012 cv
363.065 261.322 li
333.743 266.313 li
333.742 266.337 333.636 266.332 333.636 266.332 cv
259.638 278.931 li
259.638 278.949 259.53 278.949 259.53 278.949 cv
251.764 280.271 li
251.764 280.271 251.641 277.819 251.738 267.908 cv
251.72 267.799 li
251.745 267.065 251.754 266.297 251.764 265.486 cv
251.906 253.544 248.778 250.132 244.229 240.036 cv
239.679 229.942 226.03 226.388 217.786 227.953 cv
209.539 229.517 198.449 238.757 195.89 242.169 cv
193.331 245.581 185.654 259.515 183.238 266.48 cv
180.819 273.447 177.407 289.371 177.407 289.371 cv
177.407 289.371 167.457 289.512 152.102 289.938 cv
136.748 290.365 126.085 289.798 117.412 284.82 cv
108.738 279.845 100.494 279.275 100.494 279.275 cv
100.494 279.275 44.9043 269.466 39.0757 267.76 cv
33.2451 266.054 29.833 264.633 30.2104 268.187 cv
30.4326 270.276 31.7866 272.858 32.8657 274.631 cv
34.3457 275.189 37.5742 276.162 41.8457 277.35 cv
50.3345 279.708 62.9497 282.915 74.1997 285.413 cv
78.3623 288.863 83.2041 290.657 87.9312 290.66 cv
89.8472 290.662 91.8647 290.174 93.8789 289.229 cv
93.98 289.25 94.0806 289.27 94.1836 289.29 cv
94.3115 289.315 94.4414 289.341 94.5718 289.369 cv
95.7554 289.61 97.0264 289.885 98.3721 290.188 cv
98.6152 290.243 98.8623 290.299 99.1118 290.356 cv
99.5171 290.448 99.9268 290.544 100.345 290.64 cv
100.579 290.694 100.815 290.751 101.052 290.807 cv
101.133 290.826 101.212 290.845 101.293 290.864 cv
103.141 291.299 105.096 291.776 107.132 292.286 cv
107.504 292.378 107.875 292.472 108.252 292.567 cv
108.549 292.643 108.847 292.72 109.148 292.794 cv
109.417 292.862 109.688 292.931 109.96 293.001 cv
110.174 293.057 110.389 293.109 110.604 293.165 cv
111.338 293.353 112.08 293.545 112.829 293.736 cv
113.268 293.85 113.663 293.952 114.062 294.057 cv
114.46 294.159 114.859 294.264 115.26 294.368 cv
115.714 294.485 116.17 294.604 116.629 294.726 cv
116.778 294.765 116.928 294.805 117.077 294.844 cv
117.279 294.896 117.482 294.95 117.687 295.003 cv
118.367 295.181 119.049 295.361 119.736 295.543 cv
120.284 295.688 120.834 295.835 121.387 295.98 cv
121.771 296.082 122.157 296.185 122.544 296.287 cv
122.781 296.351 123.02 296.413 123.257 296.477 cv
123.715 296.428 124.178 296.464 124.618 296.615 cv
126.207 297.166 127.832 297.584 129.484 297.891 cv
129.904 297.968 130.327 298.04 130.749 298.104 cv
130.838 298.119 131.092 298.153 131.22 298.172 cv
132.009 298.269 132.8 298.35 133.594 298.413 cv
136.818 298.678 140.058 298.712 143.291 298.755 cv
148.741 298.822 154.087 299.388 159.511 299.861 cv
162.14 300.092 164.785 300.247 167.425 300.149 cv
168.209 300.119 168.992 300.068 169.775 299.987 cv
169.86 299.977 170.349 299.908 170.427 299.899 cv
170.634 299.865 170.843 299.834 171.048 299.795 cv
172.223 299.575 173.383 299.274 174.509 298.872 cv
174.692 298.806 174.878 298.737 175.06 298.665 cv
175.383 298.509 175.678 298.375 175.966 298.224 cv
176.414 297.984 176.842 297.718 177.26 297.433 cv
177.335 297.381 177.623 297.166 177.721 297.098 cv
177.853 296.988 177.987 296.882 178.118 296.77 cv
178.561 296.383 178.988 295.976 179.397 295.549 cv
179.809 295.12 180.186 294.669 180.576 294.219 cv
180.61 294.18 180.638 294.148 180.664 294.12 cv
180.833 293.884 180.954 293.718 181.075 293.547 cv
181.092 293.485 181.112 293.428 181.129 293.367 cv
181.223 293.064 181.314 292.764 181.406 292.466 cv
181.547 292.007 181.686 291.551 181.824 291.103 cv
181.869 290.951 181.916 290.802 181.96 290.652 cv
182.005 290.508 182.05 290.365 182.093 290.222 cv
182.195 289.892 182.295 289.563 182.393 289.241 cv
182.432 289.117 182.47 288.994 182.508 288.87 cv
182.658 288.382 182.805 287.906 182.946 287.447 cv
182.984 287.317 183.022 287.191 183.063 287.063 cv
183.208 286.588 183.349 286.134 183.483 285.699 cv
183.509 285.611 183.536 285.526 183.562 285.44 cv
184.029 283.931 184.411 282.698 184.669 281.873 cv
184.68 281.839 184.69 281.805 184.701 281.771 cv
184.729 281.689 184.739 281.655 184.748 281.621 cv
184.773 281.549 184.794 281.479 184.816 281.412 cv
184.831 281.361 184.846 281.314 184.861 281.27 cv
184.878 281.219 184.893 281.169 184.908 281.124 cv
186.081 277.499 193.225 255.533 201.648 243.165 cv
205.79 237.083 211.865 234.792 217.529 234.236 cv
223.384 233.661 228.8 234.94 231.185 235.808 cv
235.876 237.514 243.127 244.871 245.473 251.481 cv
246.825 255.294 246.689 262.686 246.249 269.264 cv
245.927 274.094 245.44 278.485 245.26 280.698 cv
244.95 284.485 243.97 289.789 243.451 292.416 cv
243.78 292.356 li
332.162 276.22 li
332.162 276.22 346.574 273.61 363.37 270.454 cv
364.269 270.285 365.173 270.115 366.083 269.943 cv
371.963 269.025 li
cp
.0666667 .0666667 .0666667 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 21.1.0
%%For: (Alexander Sementsov) ()
%%Title: (cars1.eps)
%%CreationDate: 3/15/2019 3:43 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB3XXnfC8\5^97&L^tum!JrQo].LPkf+@)_*.=7]#5<Q^Z?#(c1Th.B@3Odq_]g\<iR9@3s-H#CpeEf)N7\^q\rs\]??U,/?
%+9"$Fr+C<NaLKaS+%!oj6FX*V3gl::d+drT=Yj:LO>$<#C\UZ410i4SGC$B'rq&Wp>+l:O+t<%.C"2dNfrAg.T+kg,,QC(k?aZRD
%%"Re<]DRhl6W7%SF8uUaS'65)(j/W2LuH+VLJ,<sZo]kAA!i7RFTd]",W^$JDeenG$l8E=n8AagqVlfmlde+=:7hUlD`d8K*+IB@
%hSb^<kp=/6/G[=gs6(h2kr%,n!\F=p^kUb*Hd9\/"?K=*'?<*m$6ULiiA,%g@#$)EQ8O7>E\OECRl.=C'2`b>(_hB!qT&QN"pPqV
%^jsW4--6sb">QiI5*7'3=VX/(Y`>+D+,9bNj?(etU>E2O)/46!`c$s-V&ED+A[ePGXr9b7fL?*DW?=s\U0[pWSaOUg7RZR:P.Xs0
%3NZ<44.qLDXc%3*q%Ui_G1Ndn[9kt0*G\AihUEK)o9pd?OC]L]o-bY\&q(*b7cbm'5*cjfo!:j)mb$26<^tJI5R5V>7bMI.!iug3
%'KORhcbl&GFOX5%SH"7sT]5fJm9^6$+M?1N)`I+8pC]Q1WB(\Tc!%I7.c#EbTc(p2:*I@Z+r1?9DoB&D(@nF507[U4oL47PoJTrb
%i.pLc<KciO<Uhp^ZWh\rs7/9Yja"M]oCQcQ8\3AgP([5+KV'Lr_'B?',Uo.g#?=cW;,r9HiJ2MV<<Q6#"N,HYMI<\+K#M3O2&=([
%Yo(>'PB\sQPU+[?R7)R9P'3Qj;j8_#FA@,s]@tk^*kLAR"@Kci'u>taRp(+IM8E>I6)*k6cu-1BG"0(4'gEj=pkhF9B$m<7."!>J
%iu;f(\o:]m;i1U-+_g_/0ZbTKfhs$8;bg7t;HDa,m7O@U"An_>G'&1b]IbTPK`3)2dYP(d'GVmiS6iN)LMm_4Bs]0\=[P7qNVJC'
%O?ffNphCt5:&'TR80biH@8_6AbbZ07S@1$]jD@Vs77U4N]LOZu4I\9oH:e0'St\\eVIS@iUEK7@_B=E<NZs%M4/JHR7N1e3_5OL]
%NKc*'1VP%A&d[<1/[m<gZB*9s2;M;G>A7oe,KNfKTh8`4M(MrSI>T-.4e7urO!&?K`hnfkO'q\ZFEfhH]hX&.jJehNc).eE%&-*7
%aU_B_a80Klk\aV.@qR^+*'9g^DVK]:M57bY9t'.Fd^FGg8-<k;fh&b:/@!U1;7:,7"4OD(bE*hDCUm'gqVaD[an\SZ"G)#FrmDnP
%/rI$Xq+H3JR=9>YdN:oOT,"1]]41_,,4q&iQi9CJoX".Ur]p4&S2NBWkt`Kh5<FAZ&(CE\r&i+5?`AG;BDWA@M_oH@9G!EXA1XI&
%p([c'QT?JRN't8#nVDesLArU\1(Sn,qAF73bOf]cgYb"^eAL+l]4ClW/@+q-!J@Vu\B*+$cm%3"j(rh1>LGZfODnQJIL5D#3dTr)
%hr3lajN4StAl@i*3=]0ta3")ehqPp@:Q?ZTj>a"IMJL-i1PU]_J!8MjORT"bk@Ed-,SflO`-IORI_sdBKj919NYQ$UMS1G*![<5J
%@Kc$e\cTnaab\s#-%HhB0K1!h1_4<`A;;dh"'hSm=nAup9#(aV0TAMia:[7*@#,XEP'L&Z,T4$L1Ii2%+p)irECAlifa*9dHr'FZ
%ieD9#8!AgiR70l@:CtfUN)OOl.I*-280Q#OJ^LN_Jb5;U::cQ",71E'm/FtRK5J!/f,[_s:dTM$MEK=R<2]p>&J@E>A,pB5&Y.P:
%X>=(AJ[YK''M$76A4YucH=P\2j=ElapD1%m;>+@t4&nX<(&C3mXJfjN?2J<5Zk2<JLo%V!#nq8%9[X]Sl9f6o--l2,fX:d,=P:^A
%ju]h-gB?n(W4J!)(&au?LepM*7Y-XtoRXsF?`Uf6gUuIqD,(s*?;$Os<)Y>d@lIPLM7P"iVrbS1.?P*0*49YH0&oeuM:&0F8a=SP
%Mk^V'nd]:Q:l7^!&?O]*FgpR);#uPZ`1gU.<%017)mfpgJ&GKp0VTR^n<1c%,b\,A2:&N/3XiU/!Dc@$V<1'q#OB+`Z2i(X*9:7,
%G_dD0*E46aFP9'GD-kk07N=;^=UXaZ6UDF+\H?>k#d^c94D5'i\`pUmpo=rb!AOhLVkna)<m&.-+Q^NoJq;j?,A_0=hS_F^LD`Ba
%Ud!O68kY!RQL>QYmagm5'>c:r)mPLDps#ha>dOSPG<37n^,UeYboF[Ad<NfL8&,U^It/U:m>J^0Y:LiJ/B5:-<?&?dYW0\tJYQGT
%hHM.^dN@`$DKF;/,WlX40YZnj+O2=i1tr0*dGFni^8&8OS'tc&dc:7u`(+EB]lp&U!fR91>u%nkN/hEfYc;&UBG*\=$dh\^Xnr]r
%E1!C4fVLjK'uC'(AsJIa.Dj+Sfl2g<EHAL)_QVdps*(.5&@2Z5Oeb;TO%%t_*DE<BEG6FMWK]#%T>_>,Ul$]Z@KQ$f<qf^Lk^%iX
%flSoZN#:B#/``HL-]abp2r_dMEQWl!M:u2&3[KL4]h@\f$q9U9n-D\D916^O+-]"'HlaJ:dLM73^i3C6L_hP/$[GPieQn'*W8RCp
%D/`JgJ+7_:T-$m(.pQ3PKZu?sI)%Pbfn\*4c<-f,@Or15.2-5Ypm3>(k_,H;6s50F+Fl%->(6*8AX(mWs0YJmOk4s%M3I9<($U"8
%6)!uO*T?0OK3FD&a7r"b/r"B"ST9tU9)XU=?$+a0gs.KVq0Z(3\fG?%,'q\gF=ZP5-ug"L(/o3\lK_o&OuY));85lGCV*3*R=7Wo
%`qha?l"SMAFe)HPfGTc^10.?rRfH[KLc_NrJt8iC=_4Dlp76)=9m"uJ7!/Zk8<R7H;-Xm?<N?CJ-/Q#ua-e1?/Di'L*.:K68R]ps
%fensdM26\!q316,\_*[(FdjFG`\*7u(8qXTiaV*BQ:I\uI8kl%q4?M0>."&(g((t3-OS"rG7s=!_3LP_4GdaP%fW6/TS[?c8<iLh
%bCr'Y#0Y_hAYnG&q%3hePE`KM@'>DH1toV:XRkX9mIqU"RVe&uIeRM&8t2Il5\PARWj0<lj)/MhWoL08'g!GFH0m;BZE,uLAN&k3
%16rk[D:]*l:(6^J.`*_ek]<$,Q&=<#H=_]f-BoW;XKIRm!:qH`YGT(ae%1F`IYG&Yk\R![+@YFj@SZR<5^QoA=lE3Go!"pUZX^_g
%@d8Fkm>c)5g5rVb6.YGdgcB*PBG]Rd[O\_O!,/oWLCAMh_G5(31aS/\F<.":<,;2t/j@@:hs8H<>l5qV]SP*!6o@H,ZVqKN<C;$d
%3[qIIi8EPE#.hO&`B#_Uc<<c3q($#$[;_!S%?A`>#PGS@#NFnq9$[9aKgFLRJ_OTnJ,<8ABIpETG$(HIAg]Xug2._9]aq9qg'Zi@
%.k$(1S<]\_FZKhsSI/g?bFFh34&Kr9%d=Ht#tc/9>m)(-Ci/L9g!2PC%*M,sY+8Q_q@mY41q;)(AiD?#)o5t7C8nnBlmT>15]?&,
%cD4Uj:5`sVZL-$\OO-dQ8:["3bj3S_BNJt(dU#MOR;/kQ3i:WG@c\kH9Wt%s@BnOF%'%PhpT3!tC2R0N[p`L2@f'"@*c,a^'gu#J
%Z!SJkQ$ikrfH*==l.##%?0\-gP7u+R7=,nVYgjrW$61rolr:gDXHK_+NXk,ZRQtL,>im"5;LR5XBWpAs\gY+[VZ!P$,cA%aVc'pf
%F-OrN(3W.dUYN=`V(HbSFi7j(e95ME;Bj%MO=bgWhT"puqD.C9OO:6FiWuq8.rgG.3<3D:=tA[:]/E^a*g\+[:"bf-V)42P7,+]o
%A6=c6W*-Pe$Nm=@Q/RMCBcsU#C,JZmX:Q,5&eW(hMtC&5*AFR(7'\T1@?Y]`7IJI+4l74C#nECaLVrP_<((b[EeD$6m(g=cB_f6S
%G!#4mh3jWFQBi2D,&X]khT!c#DMQ(l2KT$rVIe?&Z?=^n5d"\k::L$(h-38c?Hu7.?o2hhcQE0IUXt`s9W\[=%pNYTR;.u15Q7u)
%.@PP<QSobnO'_I@X6[JWd\aE55L!4D5,O4Kk3T&TC.<8m_P#S^hC2D.LUC=cRt7d96H<m[^\+>i4T>U-E"q*DkKC9?!`0;tHSAb1
%9\-S:9gA7r+76gLqT&7A+R]_(>8)u<HHg9;#,Z?G7a0AhL=YWEc'Hcg\>"ORSKSSAn(`4-;fB(5^_S[t^JH6Y\1W&q9']H(d@/o?
%[X4duNt1;C%;k^49Y]k<ZY$T1^%'l0),M]U:t)bcg)\u_K4A)eAs?M'ZXOVrd8m_^n`<HNef0%UocE8`CZH-%oZ3>YhJ/Q>."?ta
%[/^CYN3kXQcP4^VlSWE(\2[-fA.+&HUZUdTe=4KnT#+WH+X`-O35dP+ruk)0VZn2(D<*&].^HTq1l?g-[VKu,a-Oqq'6e]uZ5'L@
%'6CQ)Zd+Zl$cFoHg^4027PpF)(UM_K&4/Ff?$O!UhA:c>\#8IHZ`')^EMJ%gHaVG.$(#g_COaoN%Cd5TcErOX\"eR#gB,/]X/-9B
%'IlSSf[:]AK(EiW^d7]Ii_/GNOpr5ZR,rJJFr#gKPl!aqBXOuHoB-sPL/t2`3&SZe>"SMNJV7B;7fpkY+ek\Mj\!Pq,rX\'POm6O
%Ft+Q3Z/E?RQq6Kg;JT=?(NqQ*7aV<$#kV-8Qm=h;4l.r^V@rE)jI$2_`:ZE7Gp?ncHt&0L-hAXf[In''J+)Z^Jf"/:!<6%;^eL]-
%dB0#W3nb,#Mnn/a?U[nkgWF^`F"ca@M5.a2P1:NLb6XP18kX)HCL6"O%JWra1sBdVJ<Xn+8SnNaO(ime]fp+jc=S%"lpha`G*7/h
%Oq,&7s&]b<+sK_D-P:&Nop,gX\-L,8T[RaE7UqrQm#0L%oi6ZUc#0ST+4BH2$UpWmqJpp+2-?>IAKK(W+2WUT/!CRtNpA"KcFfC2
%$52Kth"6^bCSdOT0BN0bV4<=@I7>_I%n\s*Q!C;b!=H4jdqI'C\WOhSCUn^B2m;=47dPCP2m;>W8M(b:^-OX>NJM;PkCi;(cZp^I
%G3ZW:r^3l#.pC?uq01_hS&K\$?gEaDJ[:_[H73deSRPk(@?At(4JeH`n?:(=aBHOVaT;s[DS'b!NTbU-SF4&CK=2N.K\YQ'``t/R
%G_rrL0+>C'WRTK\+/mR<\h\2qGueb[S;:i*Xdirb"I5ijkgm+Aim4LTcl6<`CUhQSV0Lk]Mj]QJ8,F!K:7&/YYD*oODT=;i@rQou
%`YY4pH,?bRQc29!m]208Yjn[JD3_J[Sh4X4#jMNl._8H)cF`*ND=5b`[GV>KiK(=[;F(f4SGBRM!9]?#h]Bl6rT-%/`\\U)['t1C
%Xa^h?X;1NY<nNh^V!$Lg')5u@4nX"'^0c9[9[Trk4J07/0l7ssCDi[8?13$Kmkdt7^dGc8Na!6<;h@7j?n51Ea_F;#4;.RO>a^A)
%]#o@s0n-]Jn=j.;02sMVVEU$c4rW(W:0de[>6+Xqc;.Y\rQKldX9eGtDj>J+j@j/IhLj2LPfH"G`I+#uhmRd<4SqcaSi2g,q81g/
%gZ68$Y>%28e#YuB])LI%I@g7U)rKVb%6!G/3VA\=1qI!Q@KV(EaGU7O6fg72GO_p*3\prRQSmi<pFG-A:YD`#C0'h75n=:?'UBn`
%2`C>HloRA"jlIYRBm4'.k;=j:/+=SQP3+p/Hd@_#Ito8i4?^eF)[8LD]3lL0RE:CO)"1lDjnur>`8bVTN6cjmNG$6gHQZqs?*fmm
%nd4295G6pV$9U+n5f'tD&oQBIh;/(<gY+fYrUfR3aa9,jm'pL8`6;NWs5_ajLDtlNMUlJ)[B*[Z?]a7.52f>)YG1L6_qj(ndl6(D
%Mka#%BK'^16-$0Y3RsQS)0-RdrQdFpQL0#\=f18^Q^#;jr$qZHCG;96qhqdX/pLKYR[k;g*DRaL'PM,i.49krP+I,50@T=GnfAQ0
%B#ZmE4Ma.<a*r7Fde$bW(YA?)T6b(g7=Y'kWF#;:"q0k"`9G+">X\6359gk9,]3V]X,(SZ%1fM:>+s<FG<`UXh+*k@poDIcH/''7
%128[b)ol]#7ncQ'7>;%%'oN9Fn"1C>og#E7Pa,Eah2?@\fN6JZ+`_^!0/\FYFYqU,L9>fH7&-F*$E'bfSb=\_Y9HT>rR?:A#Y1!*
%FgRITm#OJ^RBCfXVs*6$0adTMQ%ddClCJ("ej"l)2`R0VTR;B_.#%,s'?(>6dpL4ETB2!!hMLf_^MV<?@<;%R-ssa!>kh'@;7mGr
%p!25hKUMNQT_#iF;]gHNUm<gB(WDTk:]Fac_KX^lie<c1/"Z2uq=!R;mmWY4O>C;Ib'YkboTosCBeP>[@\u@Zc1dr+NINJ&pS(@]
%?5,%ZRXV=;K"WS=E0k/PpXFFca;L-%C`f83Bq*g]'(a!Pk3!P0)M;sNIUOMp&gq>/]_p$t>dG9^]I[:4:\snXYDi7"-SKu?PaT'h
%qi"mGk'kPW$g)nTmapTMD'o0aU'3.?FR=FOCH;fFma^H+mGI<]k/l>d9%N-2D=5sReR$LK8*K&Q^.CPIcHQG!rnCY^1N`e=DFU6W
%,C+/r*`t*TUU_98l&<^Y6k?mA.FFKR2C,kA^FC0)kE%Fte8(J@p?Ug%4OH.gDBTNaqF67L9X;/'aXs89Rt?i.>'f!EH\0A@S_V*Y
%fH$"BYp-h955<rbp[EA30)30.(3ZHMe4W8@r0Q44m;Hk,=srb&PR85nfBM=>4FF'_`$8V9'/`#Dj_GBS@D.?Tms*j8[&$6;:L@Nn
%1OJlr#F4]kMeVIWQ#HJXKen52dTB!=C[S`,s!.)H]kOnu%mBB-pkJ[6ERu8fg5J"CQn>,%oE&4>kZ$hna,@p\PW/*9MHLsDUWH4:
%!mO9oS1/s]SPI;u5YH7T5.!LZj/8@N0+(bY6N-IaoAf'$UOesG)jprQ^Von]Mm8mrHa=pFq3-83oD?;/GQ7D!*1Ak%s6CsMR,@q7
%huB8)s8AF>"5X(@QlV6=@XcXIIa@b\TkaQQ+7jino6\4CHbT)u^/J1.bjY@&UC[-rf4sHoaTAFZj[oaX!X1]\dXuKC4+(1glG4um
%>9ugqZ<e&gmfWS>\r&tVeFiAa*&HWi4Y27i7*!LUj=h#r6k/gVH?i5u,PQSXcDs8(5u2cjrL;iq["X-NZpNn(@a17]k0%<8X!DJY
%gsYl8%QGATa(Q0HZFTSE0PbuIVkk2Rba-fsHeW;LIPtOtS$/I/f?\.0ol'epghBEI=N/2V%dg`&mrl^!%pY_3YT^bRYp9k@kV`.r
%EV[f^qo-`8EJ%5?BhSiJFDjdA<e4s82k<[NpTgUCe-h@([M"'J+[>X!W=O4K1'd-]%W#rGYnSqJjm2K(EGH!?@E$QVIa6r9T<1BM
%B0YMd0Csmaq81=&iPi\Q">7%-KbnM>L9//6(LH530Csmaq81=&iFO>dcu6A^;Ysj-@[?EjcPM[h-M("VP-o&?R9i2UV?]hCT?"7P
%k=WXiW1&tlM"AM2VU?]:LVkIODcrQYO&e%t)9j#1:-X[)b_q?Qq\^&RBUJKL-G5k41$rUII+*!]R0UcXE1Dr!Eb5C6r"Q$mMNIF.
%R&2)pH;>[`Fhr&5n$de`h9Cg>kGKtMrUJ]=?](XcZ5'KTrg\I0c+iA%U2Ta)^5'V6B(Dr!q;^hj=>G6uU<)=RYL@]Frm.ds/2&i)
%ppO0(oOXW.<,1_><25acoOoL+j3kZnC$"MG<<'rVi3+QnX@W#*`PAiPk*mtncRZBk=.oe"EI"jEHHA1]0]hdnKU8Lp$ZcfDB06`&
%dCnr+l2c>O3J&&fIMtXNHQ4WIY9Ltha-[sW4C?-r`M?k0Y@GdOU,DQ.(s4d>a7)F5HlZ_2N\On]R'1#Df.k"C;!.'\Z`oI@'j=-!
%[+B8'T7)LkN!Xei-RGt(ojg^Fn*5maQX"A-rl`kf4R>%CFR/+DNqUB>1];4LY9L!rdK#!TR;$nk-A2#]86Bg*0-R=Q@5V_1dV1AQ
%9YKaCr662?^?B6rCrb`R`iY0m/_M7OcDZ$Z!e&EOlLqo9o_IH.UF;TRc8.\_k$NO3NMh`?e2$>r<0)QX*@2c@/?!')ae-e\ULJ[i
%cto3koPZlNkau&Ra`Uh`D@Q0'fj#5]T75drHMG@teN=Re1U:!W\VIi[$`+nbLZOr]mcB.UC#A9rI':e$T#d=jc!F/$IMqm1odm5&
%c#5"T.]Sm)HUkoiAsSjsU!T3l8'foV"=31Mh,'K9AaF[o2m;=TZ'P"D''@a"]UG<kF44IpbcA:XYN@rXq"&7gHW5&-c68S&@a5'e
%1KVeK_qebmEc,4/c-*YC3B&VSk2i,rK+,I[60F5`BeS_hmo@e],%l'k\f9*LQ<TfEJ2a[p^-b'Xc&Q<':r:K<E=<n\ae![>r2("=
%cMY3coCF^"k=YZ5M#.B_CjnXhPdmhn%FS8QIIa(Z9e01eI'h"3C'CC(/*(EP]&!0^o<RXq_0qU"&Mh+`47GeeB=u&^RSa\4D^MUM
%gT>Am[=`CpIZa5+-O4L/$tS_npBadcgL_^"R-j@cqcWI]/9/r2lKl;V_K-)sYesNkRtnZnm;Au#(%c<.o9SY5JU\D?T"eo]At5BH
%6Sp?g@qL@@Zb2WNFg/p9bA6D!\*#D+oP.3Nd/U8SFkWPjbBr`Fg2EbColSBS#Ph@t,uNkf*&/^a31NXF_'b9OpFb)O:7pMMn]Y]c
%pGBAY8OSAi:0WRu9P/?Pc>^,)KK&F6dqn6>U?HQ_.1SO"ZCf2NL:_gJIIhQ.2Uh1lIC&UjUu_-Ckh@FQo:0Kc'2:qACUpj@:5ZdA
%')m+0T_ps*kGP8I06[@kcH0i>SP!2^FC=u>Gm"Y?YWD2a^RGi=qC3DrYE2Mo8#mMuN+S$N4_N05Gu:hd`tn?I(dHh5GgWYY(TNdV
%'p.]?Qp)G@Y>/K>h+lRIE1@0Rkt!/a!HL4Ao<\`n0/Q@LJFm==diKXFS&`8r2U::ho)-Z8V`!`7IYKarh_R6/)Y'@/A=\4hgM@kh
%1\!l#=j2s,YqJhD+&);;3UmtOR#(Dif"Y)NH7b=,8D\Y)SdkHp8m0bR3"IAsb_-WlK\l),2?D's&,_ArT9Y(n4I1*cOlfBIS+rl,
%N.'<q55qfDi[\kZk0M*SI"t'E!Zii+WBV]hr&[+Kq`U:mB)%IEDn!4DYF*WEgi(*lG9e[4]oE?s7#`lNc="(>&\.MX_fL#XUM-`q
%YAp/UI/7oU@90ICjqDJDbABgh-&pK"=oe@bLHTJek'S6<`cSS89u$D5rn%JS<?`b\r;CDm?g1:Jh+$@D-J_3hp+a:lRa$k]*R:ON
%Z#aP993N,0d`ir2`5-KtE\4E@/p[7>KdkOIDn#B/l!=*@Z0FWSqIXI6kGj/;.GAB\l%<etMpuMAN1/"#L%AI=Rh\)W[4R^E&-ed)
%&u=V[MIg*,NFMA"O@Yjs9eU-k,6O^&,AI9\HW2X;%JQ,Prc?X9f+`N_;sV<d3Vb!85U]Meo=?U/lF&4W;luaYop5'Z<<O9h?1cOF
%0s+J4au'*#TK1K&D8U.u:`47uHefLF&-='PdJ4#<)hT510Fl!CCEF6<pfN7o^\EkbS"K\/oMp2hdctB55k)54#Qs`Y9c,seeauU,
%s5Q>"AgS%<K<h.*$BPmbA49H#nqI`F"l?0dX0SJ-T53iQ&k6PY>%Cq3Bq9):])<(c(qB(UIkh0g!SnTIs)']E]-1f@=dM:t9=dU_
%SFsYJol?,`*Pu`:O0Jo16lf>$)"K]dVh*]5&bK9,MM/g#ai3VMHJYa^;#ejYgB4S<B!Cc`RtY`#$A#_<!?Nf,CtfE_^@>]?Uk/eP
%(`RI?Hr'h$?<Hu0%J)O'1<t5"^O-lHQXA<E)XWk5>-#=m1%YN$?C4i\pTSB+J"1db24u#`_PN](W9P$,7O"5PTNb>\@,>ST(O]$7
%m0^(j1KhD47]>iBW#P['</U^I.3Blrb:h^S@Ghc[-d2!'kq?+kcT?j-&+=B:@AcKOOj6;&h(e4oi;W^Q'b.RYHF'JY$jA`bY,VF/
%]?*h)fCZhtkBiV;]C^.OoQpd)H+RZ&^5j4GI+t"!<r5GGhLn$<mQ)JHP=_4Qop-`iCJ%.g6BSa\ng-i:^<CdZB_1l0^'"](Rsi&C
%12o'Ie,5$)]\.k3,-@1mk:NGkH-MKp1Yc\Znd".kkqXjd3oIct7t-ZUO;W&KO+A=R<Rs6n=lB-G3u.Lc&At'96N,Mr1Ps#FfrAhO
%O$j!3P#9[mK^L5A%K;oa%jj@IZe7(u`c$o2#;55>d#,rj*`!-(eA6QX;Zo&SZqr_JJpKS`(K7S@VIcJ?HQmO0c]$6)CmjCNhJO8s
%][>C;58?$7NK+<_qn9&\N/kB;Z3NH+`(_"T_`WXPooHgAYb/`1%T>[Tg1$6CG_nf\cV[mgUidUHY_eM:J%K1<T:ej]8lf%>p[=sd
%Z$,Bp<8^X*4'GMIN-f+&1WZNp2):(YlX$/1PB9+>mLQ4AdHK/0Q[7DfFfg#$]n%@VQM'og(4n;`S%`DBc+9UXHl32ZHH53[-,DVG
%CF#bQ:A&eLGH%u3HHX_af0!(MT'>Q]hX*/3SOoC=W&"dq[+6XL[Bf5DR*BMi0XZehFM3J6ijF]$6XI7bqV+`Nis\6.l<:gb7\4!c
%C`:,U5R:u1G7uO3Jm#FN+YVM.276o@&Q'h8Mf_$mNs.G)+t%>%O)ELG[5rS3CDD9Y]7t^'%s!;o?;1RJ44I&ZD=oYp8JHGi4=L(E
%:_s?&=L^Y_&qSduln^mY[#PV`l/]:Bf;[Sr)DcKC@2>jiBO\M`]!]V6<IITD#r^-glJ7ok;GGFoE<eGZ2RO;A7g9&570*AT,2+n/
%Z)-"^h3ZUjm._2^USHo[=#.]d]YaDt[T,Mg21B6+X>=P)T'+=p>L!$u?K+;<qm'mB5-1/tX`g[&]=#(7fVm;q\$5ocD<'66[E),2
%8/qInqaCHAbdVEZ`^^&X3R\efAr!pJ+L.B_7"C(>\oB]g[p1u>;=6:.Z\+Y6Wi\?=:?n9_'P^ppbAL*3@rO8o^O/n\:dl+5fI3m?
%F`9P34srsW_e*8aRkL2;+t/K+C\Ees=:RZY6[>=PNp4IKJ6L!;@l0)*ch;#Y\,fC5_Iu'e5Z\ET:Uc6#\8Ls)C/7V;/Db6pMuoG^
%&rJL!/#l[X+,2eA/u`cB/AM<3SaO1^mCjRY8tTL\*quXOMN+e8WG]@3S+*Cpi]tGSe>qtXRIqrjP3m/2Vn0-#0$HsADPYc0oj[n=
%A^[4aI_`a=b2itRA-?/)*C&R/_f0+)S_-dVUL=ftZB!Uamq5-TDgah!YDEOF1P1H(`?>8B7;rg$^f^/NlB8mRC6[2n2RS.nC1$;/
%%_/4d8C!7^Of13#^LDMkp5)q49ZYl17]/0Uqb]J]64Ar\G7j`bC*YF%C<bQ'_YHa(aB$[%[:%:tk\7Arok3%>BfIru`Xgl8"1@*P
%DR`=lIY5,(Nnh+tG".(DNI-g>b8`#B:ZB<&T6o[.0H(J=dWh8/H8io7dHh"u8:*>cO.^_/)3BX)d77+$!Z`Dt#Nr72g]6b1;ML^8
%fu-<G+5(#e49)"`R^aeg8;C3WP!cZ_d$6Os>5t:W:gKCWQ$R!`AApF$U&3Q7Q<DbYb%P0K-`bjZZjtF_e*F,8]M1#>?Ms'(U*A18
%/bD?@+``rgim`/J`<nmXk^H.0)G)6e[@5?'n,o'-_UT5%JE.nQCNKt,E((_.6]L.s#;Z#s?!t40/C]dRoKKV6bI*UA17eN"RQBs+
%LOKLT_@%-WM*F'sNS^;98'*@.^:\ml=<trU)ltF:CdVuiM?*6Og/"Vi)SUZ8U;qZ_o<&L9g`V^0-reDk`\\ZR2@PN$+mWRR[U+-(
%`GsVaZjS81eo\NZm'qhb*\C8l#CZZF^a,W%dE"V9+3md"HDFs.#-^=ca=W#K3VEd'0:8l9?6!A[^?m__dso&LObDhD;",R8[%`,K
%Xb$H"<KdsF8SG:aC)p8EU_g!LLO/X>`VL48m,oakh)rpTl"(ae:=:6t]@?0&Un,.V7C_jGHBc$LDjZQFpl#ChVtD%b#Y0Eg0^&N]
%kQ+/OX$&VF<+D5+>kVldgC#.fq4NIg=a`ZgImdcGq?93X>Q-$0dN;UG*uPGPQ7bC=?W/J3p0#K_%Cc"<gKEXqIP^T3][<]oBWsj=
%6ZpW_h^mB[_*!$+ZW%:[N?(cK3sNF%[ArU;G]j3NrPNj63iFS!Y<?eGjM\=p'_N*EfY+%l'[6chNB*AM8o*Aa5CtMpMEt5%RaqoH
%Qo);/_!kHr"BK3([RE722[i-`q7?!uNZSe,?!_:UB!apU9lLA-UL[,O,M[:)WJ5qb.E%O-I8M(gXVL35J38+5aO1W3/?d/M3l-lQ
%N)6/W9o+23]oMiLj="!6<qnOL%pJ'*0ghE\l><<OcmE`:P/\VIY5E66KW:Ej3Jnoa\R7=Gd2cIVT022\M*iI56u#np3g"u.AgD3L
%g1U(%U3.h4)m/us>bfX&Nh=_c[uO%ghD'fR:COSa>pXo,SUa)Jk^7'5V+)h7X>O3.e+*;VI&Y:6H%9eCd/?d\IsC/*^mH>u"q#9>
%2C@ZKZCp$u[m*/TT9+f`'8VH*`XbMfmaNelAok1a*/&t&U317BNra6,$deU*WYjg-On><'onTQ.j2rWcf.m+8pb=D&d-1"f+%8L8
%<3*4X*2Bbk'4#s@;ke\!H@GbF.-fsgWL4!lF!j_2W0ju]:9kU9dPP9$`/O@iUG%E#:e\76jFNdhUnd&jq.#8DqZrD1aT7sj9cQEb
%5q<!U<6(`[kBfAsV'G`2?#(Q48<SkEr%DEi"XRkuN/4]f^P<gG-bSME/_B%'+2PC<%DAicSBY"X'tGBm$d:s9=7mfME$3D#V5Fm"
%!Yg0Zc5;PWoR$Y[XnV5+_l,5RLe4Zt8HCHbN`1-i_]=J$K=-T=[MQ\Ii3YtkFJ1`H*!0[fbO(?7/qrXM$Bnlo1Y2qeP.UI\9t)a7
%@R!,bX[TOf\461cIg9Afg&<D"&r:"@&k'S65hH'f.h!M\JI>@ZIl5B0c8.bqgD-ih\+C1eE:CVYJLoT*$jF1HLHN*D0i4FFFJ@;O
%U5,c.;O!;)eYF,F!g?,crkOm"'c^jZ`W0+VW9tph,GRNIUIs$u6DI]OLm>a&J98p*UTiU0+rT]]B;sA6*e9.a&KB*[>4Lrd[_UmO
%e@Gf>\8F$IQ!hg66FLg3G8Tb#7?EA,@39+Y[@4dS@rP:V*;kIH*Rb%k1F\`16!huSlXn>NpHB(o>rA'I8iH%g0YW@I.=itL4LsOg
%db##^Y6i6]4p?)8>7ZHhVFCs>^!K-#pX)SDcO.r<!uSJUW+YM*G2G^CNZ,?j,M?0KV20,QFAXDerI06jX(IBe0E/T^I6PAnI\cBW
%[H5tG1g<"H9_1>YIXg[<nZN3gQf6;:\>'tae&U@gq-CIm>WGJ:J,fN8pTM?OrVhf,"i#QSGQEP!`,t#:\+9^NppkA0,/qEgV&"O(
%7HC@e%GiXC^rq=M(_,ed'Vgp#!f5h$VtY=YZaram-=.(ZA,Ni(5"9g/k5[`<;rHGZ+bUpFjC:Tgi1'4JD#jn!N@:4('"hH+_iHgF
%k&<0pfn'_R#dnVs\6M2WiSE'&G#-&8G&A6`&lchpn1r@F2Z]4L9uchV4+=iZO+G78rqdVJdGRG.UKf,&+s/6k.c;Y1FU'$,.m<:u
%QL:S]-'?M.$d%4L2\P3##9/&44-5<[hV65q7!+%`I]km\nk5[3G\Qha3I]E<T*a*T5C"*;8746Zkc\sq'S"9EQQAK;lSX%bqtE^(
%W>1_pA"tU:!dFBD_B4SO=6f[P[S3>UrZQk_&RL_R&T1S:Bqt"Z;@C"@\:D6KHm+L%*SQR*eCBaqBWi=4n3RCLFT)>C;O7m11/XM(
%7J9"*+4#Q*@J'!e13-M[=G\B5(BoE<>-Rr(]G]V1mNkoXgPs,7U\#J,L5K3opH'VbdO8b\F4<,gfu8R&9(b>F2p:%<DDH>e8LK5X
%R'CiLg.\$6g$nl)6/G;2P@kNCe1LUt]j3cbnSdi>>-c,D`c3Dih$Q)M7_+=f`Q7_mrErlK+39<9;DK.#S\8%4:J.+.>^p.b#4OY/
%8[XW)'7"2j)`bH5/:fq@2PU<GiZXmCVH.-8BJ!KLUG[$O0?`,;&g(g&;XA!qI6p;(\2]5Rdq0l[oiF&H$*J@e@9\<-E,7BR;$+Rf
%GU`.'a.oQ1qh'L.,l3uYo5FZg3ZIQA6L*fB-m$(trUCg-Pd_D!q[\]KM!9L;Yk=!R"onGPmCRimUi$`TVpY_[bBhd3nC(iebuC(f
%dS6CC)/cXE'tb5G-24V<(KR+orl)#7R=C(Jbkm`<Yi:q]EtPN^28gL2f+)O+rq/\1oP^8d"T=f+$W6rTp%,RUn<eIl#P3Lhs*!)J
%o/$'`KqE5*\t<?r/G],0Q/i`_G)uUMf&F#CAm\_j-%*l4eYI0F%pf"'rAt1'BTmpaj[St4miS2!&$GZLrc!MGoLD7fEI[=`n\q,&
%BeB.ERJ3rcBY!s&:RsE\r?m/6`1PVH?i4OAS*U'tMNm[=j<KCDRlV;^=3U&ss18*9i4h.Y')qcp]a@O+G^Cb6T.ar?rn![Mjj.:@
%B)T^'k*!JYge[etVUk9==-t4^4`pGd2p[,3rqF:S]>(\k*A.%b>'FD[)*M8-M(Yq^XAs/A(,fY-bX.u9r49\6C-)ecHWl2=(<!]/
%nUbei]!egVC-4-8YA1ZWiRZi^6EG3q>t@/O#RdW0<,EfWG]^Z=?9Ar</o)8_Kr`LADW-V,JK?&DKnYkps(*?\LT*p..;lu3JcY.p
%c)68-7S2PqS^f6)E?X(?>$MXL.Z<U^rammHQ&ZV_r_?T1=8:$/V673BG@,PdMrDjgqo/?`nbM0AQ:W^+DlS/BRE#\D1&&*m=M.jC
%?X8%WRgY-X7VaU@j_TA8NB;E<BbhYSZ-$O&,uS&Q3'SfCX_u,#9:O7_PpL&*jD@K\?e(Lma-ZOsrKF+..2HPtQ]Ci3@-Me)7U3O[
%C@<b1"@Ir;O5&9S,qZM!YZ*YHW@V%VgYJ]<k:jF4hs'RF1s7DYBBeO&mcrgfH_rZdV+tQBH1u,dIlYZ9ZHJ#gMotVTakll7<XskN
%mhRsnbKmT]qf;5OOI"d1?8KdL;PCha05AAHC:/;k&mVCp<s3eWB-idN+'-6JA.>D=3L$[B<_dS6NKr;Af&"RJ`F43a@gleBXG[T>
%NVH4eV&NOO=^>b!"BGX$p?el!r=iMm\_)14NLlNSC?doc>g5D!+0=<9CX(DmDWPuJ,i*=?f$gUbeP7uLJDP6fJ'YkF/?-*oOt)1:
%p>2%Z=sCLu]64NFE\5naY,jcMC5'(TEAP:/M_`^a-[N)&^)GN0leA\hbds<>n#mfq[tF"%n+$*t-<Mk&h]BgUemD/Oah"aL_eI]Z
%CPoX,*.Ql$#d-9@DFdRnpPjeMTt56^0BjDl/#KapBBme^OAJ)X</mf2NK3i*YdqJSIbNiso4<"+BHb,.Iq;6AB3Xo[k0<.-CK"GN
%05nRq.`'BT_PI[iCotB%7^om<l>15p?p8BQg.>f?][1!?\pMTh>D6-BYuT+ODZU<+>W!'phVSa_Tg0k73IALISCC/Ci*(Nh"0[bE
%Vh&UPZ4cAen!W*Go\hVTXlO96E2AE?"Ac2PDM$L)h5-cfEci(t*B.`f$ci25G2VpH^TA1d`U-e%k^!%feD[n*YE#6a5omr3pWR]M
%=^-gN1Ao[3PrTD`,]hb_/2Gi=p^NG%i'jLD'=5l][5:RpZ=iLXls=kK_PT0PPeAh`Nm4mbPAM:NY.<Y<,JnGIX..nYRAb*QZ0+4:
%FsD7Q(%nZP]r)ZJq=T!@_+VZA.j#F3YP=%r4m&BdV(hq8/h=fUbrGmT#htp&VQdN[Y6`0mRg[+#`_o=Rn!;ZoRpTogS(3LYW8>T'
%iaFCH/7*1cYD\*"R1\>c2IpN3,C1I]m-BduN,E:)gh$1Jb1G3Zd^sh7,&]RNP,tf&P8N6gT20@dl[>oc(L-$Vgb*'?3Bb,SG)qZP
%b"4-6./3U#B8U[AIT%'/_jnm6-Q+eQEns\J&sZbq<F5gN=*D&>)og]&.$S!+KDR\h%,L05B#r'\`F54+V3@@Y,K((U47W)\HRBVZ
%9(*I4N`UEc)KW7.X=]=AiRjX)S#I*"]:/<#^AD6JJ)(JPgr9!\2i?pJB3M.9pN!rhZI_2Sq>IG5PLf_>4TDd<G-[7aJ%7d4("dFC
%c'<oH+BCYX5AND&S2\ob""h%u5A2o328"?d\/gUNr+\4'[d4M@ld]Ucs85iUnCiL,8JLX9Odko9.IspI<MHP+e[MK'dB,o7RS57.
%*'IPc2Htl0QmNS2gYcQR0"i@MFum[K;Z?/H^3&*]`oZfuG5V+t(lU]8<$LkplY/8^]s;Q%U<:K%ip+o58JiE>]B&8%><BC%>u?eu
%HM&bU5OYrirLrnt6SY5r+/[W8E14\Bjhg9@qrW4jLf$rW8+B9RH?<@_llXb:C?<rGmUSNs=^QYO>s/m2WAjLSFhHSmcAqYl`QdFZ
%Y4?[>\^pLNf$5Ak-[YU6f-aDFX5H+":3oWKh50jP3':t0SR%4kUat%-Dl;p&s8$ipLrN22<sEmF(>\MQD9Ct_=[YkESDB!ZB4pnn
%a7srL1q@ZKIqH4^LP>0Iq0SjIRc,aM@O?6efZh'NSi[bfVc*7U8X^#'kN^bV9QO(bPh%M>[PQ.h!WOKR?7Xb8Qh@\cj6X4gEg8fC
%^<C5^ce"XHs2*f.:<=OCjt`X<o3Ah)b$T!"Xr":9%k"'OqeZ&eWg2><?Am-Vm.G((s7En0P'FTAO(JQ_jsEtY?/=9db6p82dXL1V
%3dQ+a4l9N!\LglY$[8)D9CcBdkph2WoY;pMIa':sLFVP@qqP5n]WW^6dgp8o^%$'YQ_,@Wch[O[ot>tW0t(oR5<e5!qbR3hi!N0L
%Zu[#*5@%Q*dnaSY-9hm,[.o%:^Fq_ho#B3QnEMLnP$2AWQbmTNo6">0F^JVf[efjucm`X$WViN7&AGm+m_bHoekK^.niN2+9`DVJ
%S]S?!ns9OAXE+j"'XDTLTjXIf[%ap-IOe_=Qr^J@rNNF4a,Hs0p?n]%/[f_'ifDq(V=U22DQ-eHo4=NR;s!W;b"K;!2Z4BiU9RY=
%CtGj@[;)aR#`n:5`l1sA_.]@80en*?1544^p2RG<eh!`mWp33Y=M9_bjD+RoWRZ/*(J=(tbNebSg\Q@^]UQ%TT=O$&@s(LOD'W08
%a$sL,fe^+u@)kAnic!%5IXeiK1$=J>9_RSUBl<d.@@DE%F^KO28SJPa59JBZiS`1-lX`FICp,LYeGn9IlKStHD4E`Ij_506m3,K1
%Fig@6<7'2:MGN&i(q$Ap"aVMeI'Fb&EQs'\LVU\[X\#,t0o!mKJW[T_J/Z+KAtsB]2U"LaA_-Oaq6N?t`#@KR1jT-3#G@-%i>03u
%a'plG+_0)^_VjGVU\\Ub>,1:D%l/1udmge?W7T)M$4(G9rqKm+a$q6(d[JEPO9>TikqD=<KD8!YKDRJiJu+,<NK7sIfW[r/oo5QX
%2Y<X8>'d=QqW-+/]!#&[IF`6d?eaG.qm3"UHu6I>>&3n0ldk;P#YVphF_GX)8.WpuH$Tur"j&CM%[j%cqt1ErbO#(oTQ!*$iR=bA
%'/\pGA^+o`N!A\4F".$Q%jp]RciEoj*>8Z-kWXXck0eW7NV<7'O)9H,aAXJ]pg>$OmF?0fFe!9&E!E'n>P!CeFTH9aj</!?IGIB#
%!P0<lA'MG_^rV4qd@@SEWDA26Y.JHkaZF)dX[cP:/_&P%Q[8HAmp190,O3!W2]4aPiVeq2e'cBblJnEu2JB7)eD1t&\l\61`ONsJ
%7`"+$@6(LU`,Km8J*?($h)s=WdVO"X;2+A+8YS%MWZ5npm<]aiX;_0r+\T@+pV$20/XcJ(SElS00+:+,YBBJBV-D8)1o'3eq!fLV
%1$="GMeur8S@!52K@iZ]Stl(%I0[HEjVr3>0lf>ZEU/N&,Bn5$4=o/qP_@ruG4a7"<F)<WA)"F%[/Mq&"+eW5J7I'@`V@7jI2%)l
%%umI%N+1\i[kTr\#OUouI<T$8Gq[A^pDl%6cTjnhk(e0+qh!a>',8JH)fH7IJ)['hJ-j&7\rYDgS<(n1;RoZu0_uREB^at=;=_6c
%r)9VX.RIr08k/8mf&o`GH_frie4&8G/fZes3?>r;+WV4YV57[tj<;-q'O#*Tl_LpqHL&JnEFYEt"NHK/*O(>C9"bLR."h6O@k;<a
%d+ONHoUq,;TDKM$rt?H8q)FTO%LpA)ccI@lC&dpp:tMnTA%#H`5H!M9R7Ge*Sit8I%Ll,@<@r_u0,NphS6g*_$4#`E&"C0iH`K6^
%mFF#,EZU$k>DMlDW8-ka-iI7bX"csL[[3ejUP,uk$==hAT*bgso],4N\CE1PaTQgf/@0r4a>!#V>J.Vf/;8;>K,`e*X_'ZM52iqY
%Rda)+hm/r9443WH768(3kh2?.[pOprK<++-\^JGYQr&ejQUC?B@42'J'G^$<>EQLbDF[UX:1\KR>3mTr_U;0NXgWNXe&4o'EIQt^
%9<q`aY:gq<,IpqGHMjj^\Bn0!\!h[OLYBT@ApeC)Rp8$+Q=(WJYN.2NB>!kY,NF3]gJB>&l,5(B4kn#>f9LT39tuI-%p!W45_*r<
%p0<&)iSDX<hRiAL"3T@r,TBj%:aBqd@Mbn=hps[nM1TuW(97]o41gVdIUt<][e5M:mB2U,]t:P!ICr\8.29-=^,%Y\V0%Ddbqe%B
%gbP1%6cS_;0j7dF=:MVq+1mYWG3'_N=:aj?=7Bh*Zuc0[N\h*Dp!(2!SSbq:\7bHi5Rap2+Udi#p,-ea?Ie-VSgfDQfX:uNAl&0P
%!aBuX->2V.L:d(u30r9(]Lcq=,2W'PV]MYQI5tn'DsgpJ+$s4]nVN4:hcL)Gp8*a;'[),N,@*-f<Vt2/\eM@_oX^E%fVc^;ppRWC
%P4W\L[r<5l00GFq#RF,Aj;1\qq67E%gpQ#+hBYiEHu(>'8k7q0\.iWG/[N"&T@i/_#N\*aTUWXNS`8DW1Qc8[@i4Ys.b`>O<:m\U
%_NTTR]=)p?:qApG7"7&m6J.:lGm3G=H7MC(n[HbfC&?sSTkUQ#;(7!;Z$R17foP2DKh`o"<&flu3$)'B,!Xm86DrgkiqE&<gZ&oH
%hEGe)Xu`=,[:&=A(>>;s04bec_GV4P>Mn4Cgps+V_NA8q`!a2&*>NIQPMoQCE[?B6D[qSf'[^Sc+Mj&>c)@U*%s#"KF>rN&<`.i8
%:q036\^t+[`bTCT3>P!OEl])>TRA8-L3I[/Kh1XAdiIT5J2CQ5\#"T/nm`X,_%>IU7V%T\h+LaDY,sP4@hn8!5*9K$2r].a[Dh?t
%]q$2kPTr>7U^n\'a"5WKh8!e=:%fhL:VFl=jTVS^Q0`kr,]`l(4\`pg`sT_UjGV,^Z$o2*km09h7VgH/NAJ)o8akJ*O)g/*"%_?U
%IGn3kNuqDhFdVK(Qe^Y78td2F(uIWh!kd:Q*&\W(Wk,_cS.4su-e1+J0r&SV`,u8*1>M_8lH#Z77h;`O_58m;;9;QlpQ"^'m9.Vn
%i6uq\\t%V:m(=%uOmMCRI,!:X9@<i5X%-&5GA<G]f=@-39IL^d0[9#4PBcG6Um]jjca`%n'Y4IaGL]*TqS$Fb5RaKd;)c2ZYaPc'
%\[NKfX>MrlE#74?\AD63^8u,R,:@]g#2V[d4Lu!k'$eTLkHXZ+NpR2t)_:GVAG*Jd,[;[[0C/TE+Trd(6O2'Qo)i'2'gR:a?fZ3L
%hghqWBI:0.Kfri)`=840mF(.rT#?hneohVbU56b`&L8/W3B7ElG8&ss\OreLD_rkimPMQrXW92`Ph1OtW3UGOC^B"cr3i+U3k](q
%cW:^-`P7YqesDt<lsVFc`cq<Ql0KIdk<fL@elqF5f7o4DrLG>bBu?!/oT1fUPC/V#C$l&+mZHqN).M56V*d[p"%cW(`%SZfqdomq
%G0rZ%4LW1TF%$]+bSc43K+ms>&al@-hs7O75S0Ip_20:ceA+<]M@<BTBh#Ik5ric9+eq'HO>-sMKLh/mQ$fs,L-oSM)+lsWi)N+b
%J\t1hN7^us2Te)t4XO\G97,.S\uBZp\Gr7M4UYab&hqR\0PDipQSUTEKWqJK,C>(rk9CkE2t`ks"Psp^'BoED`VWI_'P[-@7i.`H
%q.OKr8G2JF)[Mu%dH0T8T]TG-N9/Y4V3P/Ec&k/EC'6^B`Rb-SKkYjLg`)ona-KR%(^L$'`14R&lG0L0C`EP!ktRd`pDr?A^rVJU
%#a<s+TpY)T&ZViH2+bYX19O]%]9)eaBaE<f"d#(a_=pHF6UG&(7R*f06m`\uG'c"V/2&<'>sB_*W!I^Vb0kF:"Rc2I[fW6ABgaRH
%jV(0E:RVCU,EfZ&BdCSI>K'h?bD.ad(3*&hALuYqjk\uj-as]E@5@i,`:`M[*SUWgXrP?E.1DM>DE(U/X;bhN"&X?m<P5Rd'Jq17
%Bbb[*onTg6QFq:2:.G$DdP7^6qFTBdjTA2OR)b/U#],cZprU@ai1;:lU.6gTfrIZPPH#uge(\[:=)5p^]%jZ.NluRC4JO^.*cg_3
%o2mh:1)hb0WqZ#fb#HU1qIt(`+S&:dl7sPJ*acpJ>8sc@#)J(*:T;FWbm!7V(2d3se\h*khQh1=ZkS3jrYY!e(;Z&)Mi[02P&f3O
%"caqQ=&8Za]QDQHDB"uK8?!9k0q+'mgqptLe^E)J$)V]D99,_jEO6:lNLVBVD`9=(j%\7a.Fjd.OSWk!^m=q#=hZGULg@efS#d#W
%>C1CF6A;j;qd+u3[*`);fT2@$lN_Nd$\&*j'"IP`=Cq(V[VbC"Ke.NBZ`:3.WIjgKP>8NE50Y[7bRkEfbfVTu.RTZi^87SW9ZGU&
%/,N<%*BV=^eZeO^b(K]I^kJdlePBX>;K4MgqQd<E&+AQl<:(!Pi=:Rj_/V.+l]2-*N2:4pHfEY8Gj/u7&A30AcE.lre.bJ7M]kB_
%:@*7MV)lo9jQ,p]`aU^Nke;)\C0e)E@!?C#qa$>Pl/Utr-4JDZe^(=NJF;66jPh_;SW'`gm0es"Rk'G&mH-2uqBXs?.d=dg$1>Nb
%ZADR&rLqL7_j;0D^Rg$"`o'FqHFaE>J#;9DD[9EUStf;'cgP-&/Jp18@_Kch9K>Iph`L-J=;6d_rU6?38taJb7beDYC`Zhsn+I/M
%3P9ER[f@^d`SWoTGpI`=Hir'g[CG^k?R9_86J,N.E]P[VM-N<<G#2msM58Z0E3V+AZNaq#g52.CRh+smXTi'hC7JC1fI:r!Dirh?
%FpBgVC/"1QbQBmrJY'%d>jB,tZs(m/NRJiT#F`!DfKGZn1ZnQM+[<DGL6Ef3n[tN--^q:J'/\`).Wf\o;qjm``HuKDs6aT2GXr@G
%!NpFk/i/Nb?Rg`*.%>YL\/Prb('EXfKO2mF8INX0bZ[^D'auqV9d@B#]+_VU\uK[Mo]K:dC"pMm0YV21e!iK4,<m!HTC68llUsan
%K]m]J^B\ph[M,,L;TTZj*:6+IP*Qm@Q#PsLh:O.sjicW0D:1Q]p#!-p=7`p3NDY(IlV9JbK=g-R"j3o43Su99%.AE"HLj6nEXZY:
%/M(?M(I-$4/i`IGf<o]1,2^47ie;)/`Cma$/eBD=bgUGt$qD?OKhQ?3+H*O+1X!sAn?2&.gtk6,No\VsZpuu-N;i6K\.qiPOj)q\
%;oj2a8g*er%?ui&l_3i_D]A<q]`Dijj&PY]Vm8HF/%>Ob#>(9\pp>qH>X3RW,>,[Q%^JUV>?2]!)=t5jdX*+IAub/!f@YI3`AqH#
%67sI1(5UQ,9F6r\H8"Z@cL8V39pH_Gc@R:H!Dlq00K7!<&WfhoR"$1^\IZUromSb9e"pe)(Y@;Q9j(F4DX6*aLX%Pf6tgIN1Sd\)
%m`&Slp&U+"IN#c@L#7Y#A?d.2p.jB$:i]^&%]%jsfNIS;TU.Q/G.`r]NP\%F<Og7@Kc@0N,lQmp56MY^,.VlEOB.D`P8u/>[KIHN
%FZY_/:6m*#G^8gNO@.9#%$DlG_\n?/K/d%+2c9;jG1W(H?Vnjg'D_%mAq*uZEDpm.9A/CLi^st7gjDdX^NBloflEIVLRggs\q(A=
%KMFK%LIa&,ipTg6K2cdE['ciDksh,QAGbEI(bIaO9ZA8PO?81q\2p"9Drnpo1*ab>X[Wr6LoapK<T,f=#;W'u=:gE!)V.gPJ]:`n
%QaT2NQFf>ZL3NB]Gag*bCG77``mCL2e]r/6\6HI(g3XN74je$+Isn)n"WtiCe^PJ$-OJ7=J5Y%<pioK(]`Upi(SQGj=.M'4XPuH;
%Y2<eOOcql8kaHY_jK'1Of%$n:4!&q,)E@]eC>&-se0UTf("$Tu]mCjNrGJ3pDt0!:>`7c(N+FmFg=f7jC5iD&L,ttaVuh320Q\)b
%IZ0nhlu(8lNk<@:OpSS(Q4-27(Mp)-X?duMD+f5taF7)lDMmtK<a-Vc7CC?#E9HHu*G[?XP$5YTXoV2Lh<JV?P$t6Z!eP@OPQ$On
%(@'[*m%eZ062W7cj+62.QetnLVZj#hPFq6s?fC*t>Bgo*G*6X?H:4ktSh2;LRF>tm\LE'$\^AT/5'ekA7VQF(nBT.faGmukS6_(B
%i:eY4)[NU-Sd(lh%WRX,&YKd7Yd#c\,JmXV.^@RM5G:k]#Pl?G\*f(a^k)Z4j/:"rUYL/E2f]=Mosfg3oh!*'S8Yo1X,fr?BRd36
%r6PFilh1kM%Kae2Meh"`a2@#V-O#a3g3!F?d`Ek5Jaa;o:WTY5P!_n$ds1ApZKkEFI;-kuDQIbJO<"YN:hbSujIYInXqn1BqfpQZ
%Q((hK>/^N/gt>kMlMP'bF,0<uZ'8KT3E4gt-7XB4\;1r9O_ha7U'2hj/X3%'"m+!o5_Y8fmlg8aiXM=<L>UPBSW!)5,hp#lL'*Ce
%MPo`/)rau,%Ofo(jQl'93^,&R&+/@C=7!;]?5tP<44-l(F1[OTRn&#9E4M7'VhFc4>):`g='RJlVeN<(jP]A?`,3$X!=XqL1;G&:
%0u0#[5`eJTmuWR-c?_dF37G@fl>:R<gXMub2[ZAm']cFFSUf5A'QBtd6nS9/Q3kT1`J[LhG\o$hpJY#_c;UO9eOdcFkcCTXp=.--
%HZ___Ri[jM=rD3nZ&%,C'tMtAJXBT=ZYnrRh!HepLVqpKZ`pE[[&&ilSNZ/Jak(1.Ngdu^m`jY$'l$O*\tT4/4QXL:;gj0uEOuu>
%XY^ijc:MY%q,.T<pJ59]Dj<U4m0u)J]U?`#8t1I=iR]#2,RK&<&QVt-Q+]32N[T\M%dl]76nbCmL>2%'$h9G@Vt[^8qn1hmNE-1c
%!efr='0OCs[M6lVYB]GpI9!5[NfK8USYn_.]W1/kn*!?]?7]`!f*rURf&8k_JI/dq&+>e=@j7P'gr.CqMD=&2H;;]X?bO6L?'Ze&
%";(n,I_]0UZ-'uPHSU`j2aaM1Y1^RY-qWm/H5SBSZtb!+fIk7WHpUWaQVr[sOsU4OK'd37(ooLjJa/"Xik[%l1A>hWok6E)mmbCc
%bmR'0<Whl&,B=,'27FX/md(.ZZt3Xd1,um^2ck)ZK2Bm-%=58j("\YZcR)Kt`QKmcB`[91/P]O:]8Bj^kuVU!ID+nuXHCcTe_P=V
%lRD+S^0KJsdO"gCB`)Nde+VZXNoTq>r=[=ls6/t?V>3_'B$ZFUE5*bCCLqJrgj($Q.(([f%NloU!/H!n*[Nf=Q;kDQ[16s%Y&opX
%DM-&;D'bP%25mZ20"9i\rY"7gJH@c5l2&(-+V>p/S<cMEKD0mndul6Uj[Qmn5&HI:VND8DQKO;Y\>l&\lirs*Od#Zb`DHZk;QuT<
%F;LO6o-6Gsnls-rad9-qclb3ZJT;'<+I)U2oGT5]P,ig<?0O_f2aC;&N0s)$D;6me*e,s5(Ahut40B]JXBhGZ/EeUm0-E2;9s,Ni
%-]dQ+\d9jbS#'NjG]Q`(:L39;,msIM,2&9$_];k(on=-FrX1&n]7"JU:NC^C3REcH@e'n+VF;oO[f]gPN9Eh<4$!_`(>0#_4C(D;
%7OlHuT?9qLXp\cUiGEouE#k>j(o"8C2"tR\$$'L/ZdgMg?W""^:8qn@[3`5.dfO'@n9F=K)`.C&pk2g[F//4GB9iT.'(SJ@CkIG)
%TtUNG^fC@FQWoeZ^AeeN@l*R8-]`ebh+s+)%V?S@SJtA;[NF7e<S-3OrBn+R6*<3YgsE`_GjM1si<G?4Fq6<:LF@%L*&s\'WAT""
%nbn^tIZ6h)f'WYKXtLc#HXqA5bcYai]No39>42QkgnYig?eT1;`Z0)beUH_[h-.j4f(@&Q!C=D?E(&;fIE%n*%4"cuLJQ.iHd>%Y
%YKo/jQk.U$)'P"\[#C7GP%YPVhoQ!>Le\/CLj05Zp_)-#7YC&Jro65EO8`YI+25mtO6%&t-]7CZ`7B&0O8l9nB`*%@FG$LrE.$/:
%"(.naTILZP"e_hGR25k<l5f.Qn9l/)=$b4O55IUE5/:s/NF+QjhZ6mLo#H4s?Na_RIj00#-GD^"QQW>dU?$sA+sVmFH,C#kJ@#QH
%hX@S$*@OEcOC.eI(uDqlgJ8p7peH5J:Q2LP#@)p-)kWQ)i(G'kah'CD,C]jDou=^H)U#sR%1900:.iuo:^AnNUG^1O4VWe<p_:uT
%D02bs%o>RdQQQgUS#qG%_C'4f+b#O3K<R5>;#P,#cG4LL.K'6Wh\UUk:N6iZU`'H/@X$5Mn/SO'P:[$4,PYp2]Jm!'+[8IY1LY_>
%H`7a>DEAQl4pB2U`on&].>A6/3.84WrtkQ\N[jM(\G?'53UCZKR],_"IgI"d0/AE-@MH]<fA:$g)ICO!/ZmkkeA#p`J\bW_NjM9\
%VRKg(H#V\ja4;QN%38VK(0!a(-P_kV78sE\L(Qjr@4D@Q'5daQhFq=fTHHe*0>R*MOF\J:X99<O*<YY^<k-F??\)(,$k#6S^i<7K
%O;&S$KV6*e#fQfY-]>\?oO[e?Msm@)%<@=O![&GHGSs_Q+>9],ZnOcME.TE;%E^/*N;`8g?Bp-e.k0+##A'9S=.,_s1BMDj!#sfQ
%_Ei+.-*<!1ki3BpKb[bE_K1<&RWs[sRREFdJ;p9igE_<I%AIUF.'.)@M0;h$,6t_]NA:p/``<qEB.4Q8YR!9'1hhjln[*ur0L38V
%";!mg+Bjn@,9sK$:oXY0MCpXtGj`12AcfkL%M@iJi4gNKAh"-X>?%1ap&`9G3gp>5&HjQg?m3T3>Lak>MF<+AU'+?t3;aOcJHZW?
%*0)@"a?e7<jUij[:B9/fLkhoU]M+b^+XkL+0W64J8k>6"+H@&/MPDpVBnU[mFN"LjZS2g2d8ii)"Yqg-1,<\Z=Qk?25R)(67F44+
%(Jm"([E&Rr,U8gEoafD:1),W&J//ql0]dOC-o&A$l&u7A8+jmr/4]>&OFSr#JJ5Pd,SAQ/!Yn2eTh,Ni(4f^e&U59/VZbKTQ>i6,
%+<Q1iJ3)+(j5^8UiWRC.:^dXALgaWse4HLs8W"o03!BT*=iDM]nraM2&7c9M'A9%OYVMabNJ\8Q==H!Z%V;T[&i,_BZN8K6*]U)(
%+r)dT!rI#2=fR?(npiLZNt56G-VQu.8>*G*?6Vn$"!A(j">T%l+K,iE>JVFBkUHg_Ses7:JZOD'G6k,KGNg*?Ftc*G7[A9S$+LIi
%nVrV7'bdMe&%Y.k(!hLq_])GVXh_#r<s8V/5gfueN-Ku(9LT[d?@ZhL75,Ad1K]kcE?]8\<(6=CMaY5][KqC'[")J`["VL&`<D49
%%5Au3BEYA;'^1)@.M=a-MZf["#[!LD#*26"JQ`E!7'I+X'j>jjf><-TTnQKkWs,A2XcA@W-s!+=MEVb+>@BLl70&)L/W-W3'*>X3
%'TWTm!4Zni07tWAI&S,OM^3jOK(i,fRkl1%$"m4^Y^1l0)Sqql1@RTh#g(.Fn5hB<9!q+hNF]$K!l\0=QkakdMB(+HTFOBOA8o?n
%3$n[1&k%D85uga_`%_8%W_tO%"#RgO=B6_(Jh)pK/"f>h-(YUlapd5YW4NEl*WuU%$3H&Ya<ljf+p90G+]M+U3+Dh!*u#H3G!,Or
%0KYp5C^AN$>JNun?p9trUC4qXkRin:1'UK/)PAP^W[K`eKK^BJW/Z\;$:Uh40TA?Z#gDHLWt?<Q%i#-'.LO6)OHk?)M1rJXOV"<t
%O<r9Xi?7bp!g,p=':VBmZ/?l]#1CEtJu-hW@*PZkP!kd-cp'omA7\ES"`PTu+ku2u*QKrkg6a,l[-EbV7DT12&nFSR15Gs[$7"E#
%d=HZgGS#FW$^<oh@!+4C#ZVJHN9L@8P>c_[+tL`Y0HZ=b#1C@dV%h9NEP4ig?#]6>CP,2dDpZ?oM@BZ=#J$b*G@p4[70E_MJBj#p
%-E.OZLJa'09qDSH(/kd1`^(Zo"69M:,844B7Pg!Okn0T*aB$9["?3noUrI-Hm#TS^UQ()l,=;Cne6k7i(s4X(,U?kTQb`e01Gk1"
%i1SGBd?d1a"m]*$7`hD_nZi;AkH($O(.aAi>HQ*\_M3ZA-P*@NQ!"eBKL&0VUB0@2>RN=;G=2pFC&ETa$+!(]Y7)("KMdgt.-M_,
%V/o-q`iI$&@2oNT5\,CJGUn_/O;SV`,f!78,hblG!Kj)^S0lb$366Ff&d/\"9%j>QPk1TIGma`a/k5_h^VEtQH\bab0hT6,NqbD<
%L<(!\_4rD(T`@8C6r5>9JFc;7kW=WC4?.M<g)bJu$'GD7>D`AW:c9TUo'"@)qIh2aPr-`YE,:Q5",`/6%V1EhH:2U<9^)g*0F#5)
%^l\>*jZ\:7cn&*A[Z+E',OmUM".o!-U.I=$8('o!Pq9&(TQrpp=eGr@;!'b^595m,U3T]/JT2E6(8(ZcOa?_2\L!EI#m.@5#cNnT
%2HU7U$?SeH>%F((o&,6J7C(mfN=oe,Y>.QNd'9V=-HtOIjXpG>=s8AnE*=;f&uSX6(!qfLVmT\6qp@0T*a=Up[42bqO(g6Oh%@"l
%:2F1G*"%!T.-$,mK9-Ep&`/&XW=jKO.PgPm&gNV2Oi;9i"XU4br#Bj+6R\\\)l@-K\Wcg:A)IVNO-I\hgdVTo,\KTOE/;gb`R3-e
%!!e2nlu=38e>]RS+pm->RN%<q/7KfDeC)13Yip_m)<,hE8PfRp]i`R'$*8Yg.Te_V;YuS10Y(CULp(LbQ:J/_d1.!ETg:":`e`fs
%ZX7sQLP$k)\9>L+M@-@3$a*M=-if3VOMDIMNZ`PAJoO<t/ieG(_:8Nj@T?8L\=tGdNP[Uo.nV)G!'rjg8i:Ai4%lscaV[>1,d,eT
%)o:O]Z5=A2#gnZEb"1q0nT_DpD!g4Rnj\c]*bu&#nm)gBWUhAIO_?<^"/HpTR[1ubKl&Bc/AP+L5mBX,)%XNU1@Y7HL_P]R@#<#^
%&lD\i;+0+@fdfR]+?/<DUlZ-l%"c"7;@tUa.abmp+FF<MP*#YT7*t:YKHc]b=A8^fZll)t*(*^3c_4a"EeB*daLt_#6V&=j(r@$p
%CFIU6<@l+OUNXtIkTedH8s7%nXXZAp["UM$5r&mB7tbhN$SPDX8sC<UXu/KO%%/>QWs&cZUM^OR"\5g0L][`[5^J-+"!JXU]n&9\
%UO9mQTid56V#&"Va<PMHipeDK`:1F?`<tE&06;P\ORoEHJqYOjfW8uo<ulJU,-AUK>k\dY]1I;pdT/X[16f""+bPAJ<-Z8^Sh/.m
%=G@,F/uShC'*Liq'iCVr_@S!ok:U8tj`ErG:g(p.apRigMi?a,;J`JIM)(@uKFh;gM'+9FibTZT1k1'WOi9El$Xm5>6;IcC6d0mj
%7"F8n<b9IZ&qdQW>@[cfLF%Sgq<[2hRC#LIWN(Lt7AQuQ\C/E:PQA:)6jsmfQ>CP>jp7ppR((UtOd0Z'&)ifm/*)#NCk]-C62[r4
%eB<]jZC'9##Xos!-BQHU/Cf02+cZ[2A2l9Z43CPhOmM`dXBoR\-d`\F%FfD,4KUPnqbZ\O`.(#V,u['+#&F$#!?po2kqjTZ$H/;`
%*L+p_$e.X2%oh6c6<A!L+Q.hRX_U<j-)r(S\@%Je<`OMl.&QDC*PSqo"^6F)eu8d<0kG*m$JH7f7`A?!)E1Bh<:jW,D3>'V7KJc*
%7pCMZ*1G`h1k"I/'k([=fTX0M%mm@]<[B4J6OEr-^QhOOM;K(#%uF:@99X4\nc9^on4r8N3A[D[.cUj@_-%MS-3_QsPb*I76,Y+C
%+@=D=VN%lT<!>DoV[+Pm!R!$)J3Ad.Qs#`o6QIKeL$,]lQ`7egPlN.GPup.<.r:@cc<@=0Z%g+BQ)EIR=*Anh#p]*5Cb-c-,U,a[
%'H@\)aoW_^+F0H,r08f@!Xr&Oaab?ZP[H)[6Et2USdSR9'!PWFN#([j.h[]EbS"YZ7C7X`Mkqj\Z'IO%Wo`rZe5qKH@k.aCd_sR3
%&t2pWE`7\YdkYFL\eP7)@g$7J!Z!>o``"Q[&?J><)Mu7#9XKk.!?Pu41s)!H-uY6Z?YgIZg(`C8A7cTYX_hoPBFD#r?-,u0JTcb.
%`el;s/tN[IG^Ca%jbVe4'X_LB:t,e,\K:p^%a&7_:H5IaM(28\.s$Y[3IRJW.'gN[%_7X#TL4,TP;4#H*%p5;aFkEkMp[-pd3dCQ
%Jr&`9eEc/#J4Lsfra."#"a&6<Fghu9ZBDkmV$-p"XbprZJV5>a6mIVA`@t^::Z`sP&^;,3k%H.cV5]^[i_:T55nRmJZMNK5!7VN\
%F%1,kG")GG[C>D*,rr9Lp&sYF]M/LVU'Ueu=H4"=@"8BUKi$3%%>Y^*O+>@?!P@k+qY0Q%Nd9^!iHAANYXei>ZAQ.(i?.2oa39Rk
%HDRgf1Y0"^Z?T!E;J++N9Dn'#`-7'hU?rZF8T+ZZDYomN[7uRd?H%i+EEGjjkmV?iB@Ba9e0Yoce;/Gg6?tQBZ7oY7q(Zu/XBLM[
%e-u"2r,g@Q7g"IcCa]Xp^5@XI(A$HnD?(;ag@&3WQ#Hf<`]'/hmCLEWn/S/cG#3<D6/&UG>G#,\[m3%paNERJYC0NPDq^Y8;)A7[
%3B$YEpAN@ad8687$_Q0/B/AuYC]f&gdr&qdYKc95pT=h_;[[c`*\gQupF],%9+rs)-m5W(\<&23VXi<J1)_P[?j<4tCN`W`g]+0(
%S7=4)3\6@Qla.JN-($(sqi^'CRX#RTc%qEu"PA7'E1%r>'PIC,N2d?]1)6+o5BV=TVX\)%L1VY:XQNlD<1hEa,K)'a.gW>uh%T)j
%U9qsfBtqB!R[.Mc5TSK["_ltV=OPc6e7F0PG%#9q8.(r#_mk)=$],Y##W)1)`QB[5ZpJb@`&Y4n29P9:EE:>ua!jjP*?3q:m4`WR
%@D#Ur5"E!KbCd-?%%*&M?sr#P8(+=jc`9"@<\Q,23=&eSLd"KMbG/bHR)htXV<-n-6CGhqV)\<'k.;>/mF7uV'L2&>==`=B2Ir;Z
%mFt=`7G)$rj`Lc!JTZYDq0P)S9f<2g$FoS=>`KQmHkYXdqqdr'&CBZ(+JFh=Kl9r07$_dPCRoool.$uE&U"^R3GkPsTpdpr)@-nW
%PD:7_/=`YgDU:aq]+S]D/eLSD6f/jL!._ZdUm*$h@eY$c,7lFAD"j6DnA#-#G1s'pVX*=16aFp#=g;\n7E\.OQgYct*BOp(1I\U+
%&^)U1hT%%P*+8CKh$U>sg)-q@eqJ3s.#K_:+fbAAHI2Q7<Z-H>f_aLq!t5<&:bp5$+'kf/'Xm_4:JHCeGY*8EZ3QO6m(s)L(lPJ2
%fb`<4M@4kbWIcO.b++u5hGb?r',CmB,B3,3W[]P<Zat=P^#,:VA.'U7cV4P^caC,=gH':PaP.OO7>pM*$D<aSSH5a[27QV-=,]K^
%q_C$@hsUY[?sI#>M3$D$=fN._UPD8K%t1!0qqa35h2FB_gR5:/WV`)ld,YHi*?E=.&!tn#iPu0UF$1^"_UqKD\m=HE`61Nt1:ML_
%kMLLCbUf9oonWW.%&,qpd7C4oED3TbL@'s%,@G!gCLKD4#fkYBg23(hYWF"AN<o%Md(m0L3r+[48/O<O_+BeC9NZdLaBaUf/q?3\
%%\GUieU3R3L_?j`>*!I[QFWT/C+d-.:u0%JJ-j'aT>'-@V=%^$=H5&sH#131kP0S*Vs(aWT'togW/br=^s"2226Bk7^,a+*h/'%-
%U\H[FSqNg$,Fe!2bo9eA,F`R#<<:AIeqgjqbDg;#Q6_(_*e`leJ9_GT""^=r2SL!)7(l5PX]pF+brWq#KLd2!6J)jF'p;l7]7J7Z
%-k>hN_j$smm?3_ia8WnSK6_#;.dPo<!#\hmlG\.e,*952RGl"!Y2J7n3e!pkJ"CPXkK0=pY2^<[hQuNZ]AE>AZTAYhlPM\Nj"!@c
%oLBq"p%3,ROraY0,D'5?Z2^Zb.q&@-oRb/o3EGf_+MDk^,Lddtf)CmsHrC';Si@G,a",,MmP&Q0*aA?9^lJSAER:+8MY"9iTI7P<
%r<4ru%)PI<n%en"$h,6XJF@Bc^k(R]bO.?oqZGaM_Z4Sei.rl<5@Q^2a)3g`nYR24;E6RiULnE?kY:s>=`qEI;g;A`NZu+d9Z(si
%](LJelU(ujWqpEOfbS\fU]Y_MK2Z\lSMqP32!+g`\Zj_Mau#dM<31lK4XTUa3HsSG0Ion#i_u<6L0gAMLC]'.JB<AA\B'S\d$ueM
%&,3TDOFnUF(lA^0S;<,Zgg!.`_#S9*5J/5@aS2_."r"_lqgMeZ9T9gW6!0QC(m6gM(Yl?%e?hH=mhH[3[4k$=)"(\XS?hsi!V(Oe
%dLm"u1[(?#Zkh36/RE3HNFZpA.nN!EP1'M0+RgY3=.`3OOZ7$DF58nLd7[uY]fF8P2TB"ZKIU38Yq+&63="p<d89g4;oXjMhSs6S
%(n_NkoKnF1m*UYdqOpSAk'9?aNtA<Oa1$#g!A?rJp'fe!6!cp0DP9_@Q(/]S&IES(VE[a/4thtfWcDH:mV;?ZV6bX,<IW[4DmgIS
%G)gE#B88MEn?uc_gs']NGV!TBkoY95boO%_$XC?<DgUI"@6+Y;o2.^W*cs]d)qnt@jb?GIWp)d9#LI`$7,M89o_k+@\X9(C/05A`
%Rlb$HpZ"!s/??,lIUL1>g6n-nL?jUgHSkYuX/;fUI4cS'lH_tjs"U6rKY>(g\._@+K'dGPrf#Yp!WEml!)CC]P?-V;+.QI@:+F-n
%C,ac&LrnOapYQGN^W#u=9E7"_i9U#hm6BqpCGo.&bs8MCfD<<$Q*ZRLV)9$!U)N<)$*A3cZjiD%oP%FTE"qi6lW'f7%)@nulIW/_
%lq?K2X*1AX,d@W0Cgpr6VY1kV^l-!JfRX>T_(@+:+X!dp:I&NB+*P&.b5l^dm9=EB!CR?%54jdQV2U/5e=I*?N'1J(]%e*S($"Mh
%0Z=KJ7dL>8@`SaFL:F?<%(tNBJN=96(/RX!&hS=>I<28uT,SVp.AF50O_nq+<ok6#KKm(,;iS02.m69n]1mQh\K:LS,^G+Z;5^DZ
%@Li:Hf(CWlaB9%@QF&a;O4h433Xhs>ErV9gTk_":0@98NLq"?90h8M\^sXX!.s;9MW5rE5)ObI[C]cko4Z/]u=Ah;f1C^m,jlk15
%Q4HA\Nn;W^GT\O%5\G:[='&M+#3N=j]jFTsEt-Sh4,T/U[_XM'Im>ZuFk3ic*B:J$cKN61=9=XfphO<!E/(Xc9^Kfb+167s#C5\M
%prSgD2&'AuJ[mV%BQ!q>T<XgHBa/D:r0?O^qQNM6lid+a*RNsShJY-N%7I>MT/BtY@V''C,?q0AaB&Wi-(RHI(berMUZKk?!:/=T
%&OCu'G(kYP63(#[U816-NMZEH</4%LYd:J*B!DtZ=nAm[bAu4Z0M<j;$ga)loWd'ZI7+i[2_.V[%kmY!l0?F.`?C<pkI/uSdA/UN
%U6E(NH'l'ICictldg-?4TLJWY!3>9.':#<LXFg:g&mg3@KpU'7$RlTZ'q3l)lio2neY4H:!bY"rX$hggm7a_hXL(.2KWcRXV(s&R
%@;HqlHto$!g1Y4HjJ&*SM:46ZK#QEoGGd1hA)l2j?!W4t<n3Ul"1a(e:3f86^Ja@6[D)tIEMQ2cjV$i;B8lTCk8jFd2'\!$%J4:(
%>Mp$LN[`D(!,sMgLj[Y%,3#&o:WYmn7KY\#$a</LYd?0"oTsW;kA\('&.t+>(P\NgP!ZCn#)r]H1>>7Ai3cE1IK/4<b&V=oH=^P=
%=>4gK\[j?:.ku)_&U&=N4'"7Y$,s,/W]='c9KT'U.M;'5QSu4''a?_6Fp,Ep`ib.kdP(AQj=o>jU$j(.^.,T^O`lTkC.=a3g/AeB
%r'T0_2hTp5PEel6ADeRAjdOE/Yo,hn>;0WQ_fd@O<;V[u$?9?Ah@9oO$cBp9G?>CWdQQj#k+O7teUko?c!_t1/a8uj6DXll,?X!5
%3-/b=_dK1i\C=e'k!Z"<n[*]2<`M.WBgk1[8*pM6HMX3EWuqb*^$[h>e'>H330AjNWmqqci;26W=t`Ou&C.bE^8B)LUNbgNLTqB-
%OFiS^Y)Fp%d\4rL`hcGbl,u+\]J,AVO7P);M9Qg[rXK\YV,>l3hhQ/ON6T5,Q-i&=J2IQ.hM/VPlWgS.IkT2cQ"^=2E'@B)Cb%F&
%^%KPM>i0.7hEocpg;/l-\:[!*[N7[45hO%IEW(!#@F(Is=1P_f'!@_+HV8Ce[/2'ef#a?QPA?41>UNV)q;T*ZNu>B.MmF+f"ll^9
%B*l-WeQ^GHdW[X+\!*=6kAEt;"$7IX;$Xhl3;&3)KR@XuW&7*@H!8WnVh`ECV3r>=mO7pQ#J+-ig!K04G>s6j86h-a$1Z?-k,3m1
%60_RS0?i2"%X+pbhlK$.DoYJ"A^6o[s5=pl:5%qM3%i<])o")$%o_4?a^*Bo0^p)Q?l/N!><6AY4!p)"3;F>U@u<8NRr@!9/O7?M
%Ht?)7L8SOQqKArMn9S^:@@b(ciuDRT[gF/InSVi_[cieNj<s]];i9c-6V_:5GA:COa759SB?KbU>i3bLi_F.4nH_q"`q=cj&'9$l
%>bB40bYAu"ZDDJQb,;$FluGU.:@uO,GoS6Ra,F8Bl%#FSXNC^S*9bS"a;cVQ!SgEMk69;oi'B#HUD%&s@435#3cHYUrUO@%*ue"'
%Jiu?mWVH[X3Z.-TYk8-1*TZo/`-Yn.-Xc<#b'3d:6)e5.fdH-7@,i;#q\%2fJ\F</m)$gRfR0FA5Q7;gqHN+NVdrPSY`hQCk8Pc`
%']?jE,9%f,^(&98Q-aTu2h'&f`He([gDRN#>ZO+%#&a9YZcd*a:O02A:306j=:N\l$*u@S\Xc3OUZJ=WT;gLMqR3$YIEMk>ZGp7J
%Q_/!UpI'-_S%\/\%-32qVOZmU\"0n-l28dDh%(Iu,7j\#^>h4^gJ.!_Q2fZDZIRgD;MLB/E#A6mpSU\m4LSQ!+!F]im-E<+qIX<+
%<A*,E3SZ9.]oS+k5BYc'0g??!]nH&CKYb\HN4nkU8*q:"0&Uub"M7dgcdd4pqO]\*Q&K_L=(bUl[f;A`hT?J$g4a%WftP#c9R$B*
%qts7qY0-67s,1`7Co7*,qq.t:-oLN%;P"Z(h<HQTA(c5+_idT/[>@#KSK^P$eBtIV4GtSX'$HWLR(&5QVl\@JC4&nXGSE`\eW`h^
%V,s2O<H8#j<lS(_S7,4fijuH'n%32i<jB-?3:E\l7h+BP^&1_Yk`cd-Q%r+cU/T(q<T\QQHqpBml\[s*FO2HjHlgh!.rk>bVXg^-
%k>opg<kZ-qO)aGuNbTNJ/B=aIEN4E!6Br?%/Us\djfq(jWMFP!D;;^mUOMAWo'qWhIL'8oea@j321BEli/<c7>A`=p1]<o'&C3s;
%Vo%o_74I/s@ds9DV!m$SGJ=@0X&XO@H.!%f``q$$*gP^_N>,o=ap*,fVardo;82U:<n2hOeKJXLa]ok7f97-(AM*T=9cXkrP:cIP
%Vc>nU=+=Ej7O7To&dGG('T`s=.ie[l:;VgR@>U$W`(K@o,-[HA?/LMR]SL)f0jo-M>&fB+HqBL;JJ5A/ZTr9`/pZO/OAjZ@M%[o^
%+]99[+tTF9YHf3h9],oD-khYn#]Tj%@Pq#>1.*67+Lt&Ke)W#4m%#O*C/Jru;cNIk1ecJih4'fp%4P*pMIc$<1hMqBn-i4(PElcU
%QEZ7"8B_]8IG2@ZgN/j/LER;@/qcYJ"<9AL`[,T!W3uqTk%,LZFp44IOhF5`nXZg#Jf:IVp+]@hok=tOEZpk2\ht;;b#1JblPW9X
%JPrD>*t->,2a`caUJOWaTP]@[)+!@F9Ti7C6qQA-LD#QoD.\pi9B64(;W.F!d)Y^V0O4"sX:u1uXaT(U&ji+JlU<5CRm/hU6P?+U
%2::?p<H0(U8Z:Pih5-\\2)396!J1YMR)qlqP?`2:N@HdfV4\t#Vgsj[^O1l'rY@E4C/$Ur[$C%A7S&XX%S](sA'PH[B8LjUneJn,
%D8Q-GV*lM/Y$:0^KXjFIUo<Vb;(`!Tm+*^M!l-;V?6NLE_lpj\(;98o%(\j[Jh3.dY(h1Dcb(rf=-@MV7f[Y?eO1.K?<mF',-!TA
%_g!h>-Rqc^Z@aqKG-"@D[^Q$4eKJWX>]h`52=cP*#)R*X8n:!IW;Bnqm$'CJWtFKkQN%(P)b+b&er^apW^Xb*Fbm.Gg[2ia:B7,h
%aPCZOf-3X<d`+`R[>@aCG!M^B3tMc$=:C<d)@k*@.I#P]W+)2f[>)%7l:#6m[]0_A;Eo/O0/JccFhf>\8ldKYR25j8:"ghHC5GP.
%N/<Kp(mO?'f8?AQR`<=gHRi4ILSVIj/itO^FRMK!2c189]hUVX.I*J)c32Q5pLX0a?5S`67UDic8Ylq!C?-@NgZ"HJ>IL?`7MuO?
%$Sm?e'6JVAfI=R'Y_@fI,[tKg^R#We7)La5(_,VS=_C:9"mIu^%2K/Nb#OW5)VGVpF\.A:aDm0A"1RP=!Pfj/EtK?p,%u#mc_<bp
%7B[\n#L:aK,5h5kV82@TSs.=5`u:LpB3LD'g*WiP3tPCHpe=^Ni1186>M=N>7(0*HK=$HQ%pM)P%tj"aS#4Z%gIs[s<.m4k&.CPc
%ToZD<@J!Au3[<?kUAP;J;?4K4ZWGRdmD_^/^"GN#56!puOWQ0\bQfS,05DB#5Wmjp8I(%Y^Rfe/Cj91.oC5/ec]lsCV&8jX3YfMc
%9=&pRf!rf0$Rt)O!B[W9#(h?MpO8rhr/poRc:`VT0mWX7kF;Fd3ChI7lee7t4aYHoqh*pgU,1BgUg2(Ok3(fD"J"2pQ5R/[h,<H9
%K\gEGPBhQCOY992Lc!0/rt<3&"sSuQ)0NuK-gg`;]nZU=/Mb4io^F9JGZGPk[k,4E=deP<_D=_0'o_LR\O*A=B*rHl0r4C[TM3XL
%FdLb\3.n4%EYqO>/'`)+#NZr=F,5<Y-ME*QZg&'X1N^q;\eB(c/!0a2Z!sKT,\eG?FD6p\Z4qT^B&pa!U31W:MOKE-Yu+EW&I`AO
%h@hFB6uCTB6B7d/m,5.:B9/nm9t<&>1!&<*Bl)EularB'!Q\!k/S<>[cCc"14f"hc;Gd)hSOd$0$+pLH&OBBMqI9B#]l9te0'fI<
%jt6jgea-Kj8t"@1-di%[84M:g2jSPVQ7&</rhU2!hUM#q&%*T0&>p=eX+<*fCAcmuGc)om2Pp0EBShTRJNJLiH/ED5k:f!K$-Q2/
%=[oHeGA?R-^(lJ;0P29_,)dS-m1B^G`uTT9,q6(L0jQU#,E171G&C;h'7Oo/Tf#+TJffOYHS-ZLYMa\%;7@eB>=BQ_LUYAm)>G@G
%dig3hn#./m2=l6ZeIBDqMK[G,O\3PZmKQG.LC:#3it%k*AAd-7>7+FU#Xbg_i?cW#S04hOfY,J<0b&luP%*q>o(a1WN,s&CQb_H2
%@"V9M)F2NZ7pfsdXe>YJ'9H>iQ'IsF'FJ>&CTWnJdAC/1c+,P*L7T^&\#![bd-P$/a!cGin?;ea'EXq1D<j8+6$hjIJ,gaV&rdHP
%TU4ST3ki0*K2+X+W/:IZ7hKkiL.$0[mSFp,C/\=cMEM'#r`EjhDiLf0%8@>T%H(7oe++tKWn7hjTC`d"0[==tjTU:3)*!tPSW7BX
%1UDcIlVtDNV"Mk=*(Z+*Ms"4ojXR%4N%](VjQd2K@YoJV9Bs;sB)>#m'P337"=+gLe7Z3,b?DkZ]"r,,&`*qn_CK"IKDB#r/DtBn
%[*$aGb$TUS+:B`uXu^i!%DZ8t(9).IMAeGKfP.RdSK#(-+#7'Pan'o=ncE#M;1qa.N2mCIRKE]S<$5dMe[>eHc.ok.JKGP.(Mu`m
%liI6d@_##k2:FB\"K-XPKXlZ(9K\h*[u/kS;a>Q43-Ok*'Q"d.H,XBr5#+:Nr)m"[bm5H]ct]>+@"MMAn92tu1T'XEL]X<FZsB(!
%NL_HT)V%[/9UnQ<3B3q[YWWlEBJ^#1csTo&`,gujZ4RN2KbOta3+,]AkhmX#>N(d(1Op7X0]?0n*PkT//cg^^A:SbuW*$uHU9G<[
%OXH,)m'MT]N1cu'VQ+rB=pYCGD/a9X;%\2lKa_1.2Q(?gZ*@MC9HbUA-"R@a%3OOQiHrJDG%X68/52fWVMPp\Q8][T\Q@5g&`=Tr
%!^o-(_jF/5JS0)q(i"&R6N4<A"G"N[-0Po+@#4A=`A]%jfp/M1es`<I9U(fHOUrG1[Kb*#$%f=i-e8W6]F_KJ$K[4/(,Pe`$U/B(
%7A('66CepT6s+Bgbd=`tA:0fT*Y:-tp,rZn;QFb-fVn3W$1=._`KF=jRgB%5OA1u?/5XQu+j4=_,0s9U2jd]t+*_FlJ*_cMD=Q[]
%@0./cY].F<YEQZ^UntaU)`u_CXg[uFVI@IX,")/(WWaOEVT@@@10B?*)DhVn,R6[W$^q2^I/B@7PhVftA-X$i1SYnF<JLq(+RQ9K
%5VUpA#_Z"`.16e>3KThg(,q(5iZ<]M5#t4Oc3Q91":r%H"qj/^nl`*c^tCRu^G>J"kj_h&;E%<@5%%_=c4O@_2380\b8roW]1D9X
%@NCb-(]k9#fFP+<D!2M;RJ.(:iAQo1f[0E!XKXNLeA(03fa('cm5F6mO[&k[;KD.)B3OJEjJNE0B$,?/fJ:m;1J5#Ljghc"Re'._
%%]6!!>Lh+/BFmB4^-X_'X!P*n!hcN%OB5`E0>G)s,_2[\:bLBl8pR"=Og9<g9[QZt;RYL,ZYc3f+L^uLC+b1q?#J>0/G@+3#FW2S
%\rhOS;&mQjU&[@He&FjC.tXpoAu)+*HZVc#\hgL9^gUab:>MthNm'Jp_+bNtF2!sY@(s>hGnkr7r.&J(0#ANrV?I/fEk/c2Su0LT
%rE$Xk.%[@NJp@o#%gU)&V^`+2>kG:<B2$*:=UCCPfmoX?_LOP.ToA(5"d`&p:K+p$)4WHN@IGmaShIeDUV[BV+ecKGLbh3L95I<g
%&GEt=Bu&XVcST-h_Y/eOcr!BMo(d@"Egrh?FE.W'_#4:LN8AX+FV,M3c=C`a3Ji<H/!bQ,T9@c#=;C,'CeKqe;+V.E*BBN'8up=%
%\?Nb]TSR"t/GQV6j.:kLZE6P25J3Jmm''-<[E,m.(151GNZrR_[fB&L]krD)A55><Bqu2rj>f(d`-q]nODt1pMj&h(?!o@47,.A8
%NTJA\DGB#?P)X's.!61e0-Z7j)6dtAQ`IM8?sV;titml4r'5RjAUR&loRl?!<5ZkigC5=A#0<>XF!@UhV2F&AF&-CJ>`hO;@*@B*
%%f$Wf9iN7Cgjt$p[n'jVW>-0m::UX;BZa1A4\fm+YN<loL-f!tB%:'+(*#mOg,gDSEV2:KB5mmJH!aPXZbX'Ol,uM_?+M9C.M;!a
%/r=G+_BeK'l`PZCZt2M5cZafClk;L+'$#iY<ih3fJL&;'$PpNI6I!c-:J7iJRDJ)s(N#rQ'`>S5GbZBL$?[lVSF?FP8$\N!]'jo'
%o-r6')/_^IFJaZ3N-#/f!O=L/MKE$TqN.*Z_3iZM2QI/diGk-tj"HpO`T_dF?HVNW3%g9\)EBF7j(N^u"p6hg(3gVuE1G>QDDp&$
%3;tb@8E%dYQ1)QTU7&k%MMO`?aMrE>_;"f5%jtZdC'B0jG=e8a=E'r7'&Wc9b+FQK_8./uD;U4=gG_2ELQZM9A#%q>BO*bQ'9#qF
%'Xb10K]IjgO;N0#eL&!aT!YiWTskGOWV&gWIJYN#/^g\VgE.o<LO8"13:;jj,^I,RiGc>&RHM8SDP#ksqG-)8><37mkJ+NeNoLV_
%ns^U(lfNj\Y1au6@d<;rC(Ef<3/Z^u:d/28So]t'S+5.=:f/U!i'7_V,[l5C1OATj!p)BGiTD41grS?M%fr8(iHGf14<_?*HHLg+
%SH,;n'KV&EK0(-HnSnS2[k2N!pe<nfeT0pe8)$.AV)S3+chct`*0n.-F0so"2@]8fWE96c:0$ZFl_g:agXcHr:'BYrBJJH-L<7)t
%%t%bD%`!/7RH=S.Q)h*?D\Mm=LD-(:55M2NmG41S>lGPl^kj3o5_G+g37*?]E-Ml,MZc"aJIa:O!5o1A\7!;k<5]E;gSN1dO>9`Y
%9q"\UL$j]MiO+ERBdu]07Z[j6X4#/\4hY0/M:gmY^/BCfUq)j+'e\ojcr)'9#,9PUD38Uf6%s!J=n_&+K,/HGb!*gW(Af>R2JFBE
%k%/;9LWq^i6P25pR^eeuO"og_FJ-9Ve8\*'K+;-8-3H5o7(3bTqZD[4S/?d%[7@I:#q>YS#:E($KJNImLDq3n67>@*`?I"F\BMRu
%brpU;KR&T&OEoip(l*Cr7khjfR<Z!%+7;2deB5G+3Er]4icLLUD6;P&\Es[Y;o])_[b7o-hqYn\lJ5UKcGK9uJ?r7G%<[W^gP*`(
%+H*pVn(<AIJG;rt#H9\mb71,L`Gu'%Cp=tYO+Rl^+OZ_e3#VF1!%ffCF2MkOg]@9S3DCO@c)0Mdk8Xp!("d`'JhD61JW('Wl!Te^
%\@IsB%0\oRddQ`9DQ'Rf]_W2A#N["OYD5P-R&'n$\d7M0C8*2QRIFAgJ7E%,?aPC_6lTe&*'hpVhOT9IIMLqZ:.$5V/4Z,9*TYG8
%CHAM5HmbJ?:rfS.1F0UMDZuGAfF>W_@8aU[MqSk1e:WdM/eS3oi[i\$n!Q\1TF-?i,M?Rnl;AO';orT`R:Z8!+8V"KoqCl$b1Y4/
%#*WHag^l&=-mBIMLY(:fgnRaRnZ?B*$7mG;Fo0r:Z?kRoVf7@AS!r*9?7+E3=_S+dB[5kq/df"Lq(=Pla:&r:R\\.+T#@4@n!:;3
%&e.Bhd]SEXN.*dc3cD9."%G<qM=JG%`fOl2D4J(CJJi9e&^7I4(5/k9a).tTAIbfp(_YA4H@L?MWr!)*``P$+Y7(,kP!m$F:2&r3
%]W;a7T(I,r]nMqpM0dBDcs=$[SLV#8pW`!jJ9KkD!@C4$VZfmaK-J0gLb&]oQckXbTXfah0=ism&mbC.A;P2fZY'`=[tYsGD:9It
%jRM^,jI+%R"HSFH#?;R%)UWd$2&S:c;0eu5^sPr:&,g=A4hUC-NS#XI^[[3>UU"]nTY)KH@`ul&>&qXp9"dX37(M__J2H!WNQdb*
%W'5A-RO)%?m\VWcrk^,S+[qe%Sg0Y>k?V2fNXd9Y9A^V>6>(;rospd['L:@";!pjr3U_;4ah`hcm((<;9H,-,^">]<%8[b5XN>oD
%Nh!gD1\;6H'@@K2"laXOCF\%7i27$tGu2*IqU(iWYG*(+!V1]/Tn#:Z@,g-\[pm+;W3>\KMH]#K6FsDX:pNMBf$QUFM9uTg+V6De
%cC_19gd)^MI)Q2/29<LD4-es\KjCJ.fi@EA`cg,Sid-E7<`&2f)\c[ifeliV&@Y?3ED@jLZ!='-ju&CWT]COe=tk\CVB)K>+MG$O
%2u$meO&oAl3UVuYNC@VrA0)enE15C1)63@b=3bb@IP.(]?@g3X;u7.*DTU&P7^VN&SFguM<152d^<I=1e#kjce4K^P4h4hdUU#$6
%(.k\S,50;7%/R4hY11_0H5fIVlte5<++hp1_@+&WfFXcX[Rk!D.1.57@2N.V%WQ,HU^2E:NMY`g/iu"1"%.GpaRTI%!Ru/DJ]@bY
%*@SJQ$aY>O.EWEiA\PJHQ_H4Y1oNMbGfK)Td,i]p.pHcrr*C]X150FWLL_:s$!EW0ab\uVg9)8bQok&OR["rK:)TWPkYrOE)jttA
%L&&kj9f0hP/ke<):j82(Rupqr9U*],=%;GE'hhYm0OsJ#%_$l:O`M"0(,h3W<OMpaZMS>PJt!(0p#`]-AfDM]IpS$T='B*2_>ce"
%Z*7==Jf9&&3-:V^'K>TIi9J=mS*QcF[$roea"AK)2iKa3)HYZD<%J)Xj05n-[eJMLn.dZ91A#2m*qlJtYY."I.A\UgQabM`=?%pO
%+"1k_r=t)*S?24G[V_<N"#JG7->[Pj_HYjhQB;KjYSYHbdqmSELaI`XHfp?"V$IaS0G/as#5I3h79tpU1?\*73hMQ!1P5SqM]:qF
%A)a\DkC/ZO%EIACfK[VP]7mkfR(*qp2j<sD-Z(0e2m9j2?YG%\b&A'<9+Bs\.S$1XRa4inV]PO(XfIg0p$Jc)k;YF2%JOg%c_0m"
%o$9,di&crh:NsKKEd(7ACJ77+T).'jduHb=ec'hXr6Sc[H%DUY+:i\DFXhh.drA:sB@cg'?2+-^6i4U+l]g9iGMg;^T`><O3':9o
%^HHsPhcY-8C<-)BSFiBMs6L"0c>e)fY$^ETTVnQ2o4<?:fCb,A%^b\<q]<<.\,-[7#m>Kd_;Vr=E,cCIf_:^#DRJMP]3b>p^!`J^
%I%.O]1-"Y+hpCjEP1+5eXIIZEE\&NoUcN@rdm3NK%+cIZ9U8bGNFN#ML=0d5RCdfe`Q[.$I(%M/o,U*J;fqq/cgc*?eAI>qjmX=_
%Z/\'`EjQjJr:&G]n(u"`*2MNb4+7.YEFN:"];Jm"37"LhrF:Ht:RI'bq#Sc#&C)f-kDfj/^sQqNl%#K<^rf0U*!jahb$73V!T%(+
%mR2n<_FY!rjJ,WYN9,Rq*\-m(n<c6oW784MZ)UaLlIW^M[9n^VOJ3*=L712I16*mXkH'(0+ZJOaRqdE"]nk4<FS..n#8dI-\rM.f
%VQ*7l^lHEr4B?miY@'O/lBO"aMf(n"(:uA4C%uhQ0Buo*.TsNVeu?8EMfZQU?B3sqVbAg$IS(NTnL;FKM6<Ib>PlYpWia!Whtj#Y
%'_,:<7fn\BW7gTL;!_3\Zs.52P[f&_g\:8VVZcodXnZ$tmM)8-W_g0X/JKdf>_M.j[fKZ7^jD%0f67&s@=`J?g>q'+XL"u_"i]9C
%/'@'WN]Zpq\*[k>(rs@5GP=f@=Q&nOP<XuiO%!Q^I&sJl$+`e&>ghK?pSQ9+AnN\8MoO8"_ggUL,Wr%4]@Bb+LXP_"'2qJ__E29,
%GV7<`.eqdk5Go^PW>kI:%*q7.Y?91$f^nG*DT.*SQ(V2RkgUSu[>AMhga^$sSEEon[^.dYARn<E)7+CT_DJ0<c*)1M$f[\^\JOp]
%:*H3-Y34?-]dcuCbLpcUD`a>209A98p%uGP`HVnW-$8no*#8^MDW0MbE7c+YLZ[QX&*!&^7Qf*l3'7m&>D5_[i%d)Jr!bj;_oW1(
%dRJKJ&fgjsEKB4!heI]>=s:)Jk[&Z/e',g9OciYcFOgHFW8;<DmNk<ZT,*A#+2.^6(F_A`9KJqaRC%Q-3-9FLYI.:IMZh$B=V/g;
%f_@r>d(@I*G3@ur&+EXuhPJI@c'Rj]eiL.FQGr!B4NNCNJeQ6Uab"0tQg=lADH%8-eZ=cC%7M'I`>l"d05CkbAN+gs'mSf'Dpnj.
%iki+nGp.VR9i`r!35C$'84H;(]FZP/`mBkm]<I,^3YD!fmOKt^YZL;mB<e0mP-q)0g'l:WU*g.l8@>>-j'O$UNmL6%1q6'lj`ZB#
%TX,M(A9!@"_\Ic6NGt-g/fobD=^.Eh#]rR@QZ_XRkYf(_A2aZ4P.6\r^5WdH7L)#I7JLq+<qrsiZN;@4d/4%UfgH:keQAo(!JCTD
%.:j#"==4LXLt&\tLfH8G`SJrD7!"2_k/pD];%G"3Ou&5BgW00<(<-$N`t`t/I_D\`)[6ZgR,=Eq&",F^d)?U@]f;C""0N$&'\2)0
%mt5X%^pfi0_Tl=u"l9K^!u,?LV\PYedmaC+ooVc#fmkdWBd?>/f^kJh#17Jbf<5oI[HJ,F4>nj^#8m*NL"MDBojTB$!<o;;Ht,]D
%3eYO#cic;1%4$lblXCl5@%cQhK<bm0l+i`We1lRIHch#Z1Y>-3m5]QhT%`/6rsJ23a::V+[%X!#1c-]S4=QiBWK\*Vkhp??*gn31
%?AGKJ>?/oK=X;H8KfF%fBO8!`>N0$.<TPXP(BVWn"9ak7^7JkAjC7NIJg%6Uf<o(\ef]i9CDT&49o[H;@Z$b"/pJJB*ptce-j%8;
%&UiYqTs0oCgD[=Z[&s5.$Q6#'9;:&B#&LGHZ#R<@dfW2NI!*Ap-GVIcSD&[sn<l^*NoCF(GRZd+6":#pq&<7=M7o)X(Uu3$)"s!Q
%b9]ta@UpnK&:t`7\]kh^6A;/>[Oif$o7s+C<T^F,HmtmUr#hjCYR`<l0O_7L%]clj[6,Xs1+cGo2_7TA79g7#a6O2p'^tqQ=oh5%
%,51$%bn*`<o;60)f,phCk;*N0edb.BV2'eVJ]S*>&^8eE$lm2a@FfJ&ZB#ZXYBB=Dl,9u+f5\rF"ao?f![Rrd&B6uA#&]PX!.]+e
%i+rY5F@]GXL+4^%)B*7>/FW*qe:PZMQU[m\JD4:)mdRdBhT[p/[EY`[!cHPOBM^\0f7t&7ggDd1<^&e`G>+&;d?#WS"CdW8[lcW9
%;$Fb'"OB.uN>/Gr;:CVLCV@fMTa&&0$QMPg^QRlk8^4>f:#FM;1?MKub)NO_'GOJ"rgJ@U+sZ[3<.><lkgntUGsc6>M!DF!h[+"a
%BE58=9.;bu<p43`SPI1[XJ$kV*80?XnCBUI!m#?'N?N_&2"r>/(eEs="Qs\BWnfHC\8@Rgc)W,47cirCkks0+;l+=bOHif"A=2dO
%Rj_k4U84Gem`:7BNu?:X&1ocJ79];+h7-b"(4*aog?l0"X$\jdjLo`*0kh'kDduGBe@DjK'h*b30`r.iAW+]riR?GXkNP=DK24^U
%HgXqTTLG`0g1TC-L1TXt=JtU(i*qbIMNLmMhV4gJ<:a7YdkD7SkqmHDgUl'FH1EAB1l9lN@1FHcSE%VX\T\@$Zb`/&Ku!IY0_J$P
%]0qX\FueV.g2qn7?^lTdk(AW?TkX(+0T`r]Wil\hPoAZ$(f-2*J)m3?:b64(L_AqHq(UASlI_=^-V0tqV4b<V(o$@cLkTcljoDD2
%LRMUp"h[9SfkeM:o9Nj;GQbrqn&')iNe#-^%+4!;3B#[eWBgZs;acHra:-:jiH0^l7.2t@[uDXI#9JTM3:'U5DKoPX<37S$NE"lh
%R=L#6f$.%_!?Sk'!Rc,/Uur,&JUQFI:2F;K"fF;7:o00eJ"Z1"AuR#T2d#H5N`:Z=jQ2opi2<BWa?G.IL_bYZ/Z'Zn([Y8Ma:ekG
%3CXYceXk-p,63HS[%P>BAC?lgLH%[@?o"7QOmu7s@FDG-R5Eq`PX7r-PU^NeLsXN<`VFj%eE:OpIdNWXjG.#8S(oa6*AcM-d9Ko$
%[J2l5&D7MtQkTo/U=PLpe;BW#L(22E0WFp-j4_1Fg(l)`M7b^NV%M7)5poiZZf*r_KI:<V\#/2;(3m[@TGt`.0Gl?WFU)7aUB1<Z
%Bg?D;c!L!#J4K*8fAARd'$#?=h&J"iFQhgq?cQ(aMM0ps@Ymu_!3Al""'kk5)aI&upLDHg]`ZX+B&0dF1>J#KPO3gAdX::X36oS#
%6ZG7,a5uh2,M.Ku'n3+a3Ee,EL@(3*A*:f`F1.jQBt`@$6]f+.'upkH55XTsqu/gi$#D=j!"2m@97`M0TK/sW&E!C#HS4]Xg(hXL
%3&ZZ/Tb&!jMIf&$&1P^lDkb(We9E2&0]q.-6W4YB88$e(!ic>Od>S`s)#4n-iLh"tf&;0(s7i"$,!hiIV)r5K!)#KWjZlg0T]I>(
%/k"h%Bcc8'`fmBWjBV?4S9T@qput.1QXp=X1d@s@n'O!T\@5J3pR*J!ZlF)"A,B]FodgUUX`jsK;Y^ikF$nd@YSl`?/g?\Ii+R$m
%i-*DdX^)S?bg[><6j(T*5N!]YRWD+$SUYUe1TW%5KgTauA>O`EaL)1%]uH`L8WW/B$>"c`G/3Er7#3fKK7u)-?GOg2W:`\.R`h@+
%B$9+X'*\0QG41`k#oScTbhC,aJ_^gDJi68\<Q08!UI.#k*tAStn6-tR9%sbAQnr)Ol[^JWe<pFgRJ?%::14>Ec0C13]G\M5-41hR
%j=m>sPq5Uk*HB#Y!PP(Z:A"p.Re8H&NhPJ9D2d(W6UVSU,3>La&J#)g-lbl[A0qR>1G:Q<d37#'jSqsjf$[Zl86;[$45&+sRA";F
%_CQOO0A<<(Q&/Gl$Lg6%$Y57,YQ4k?&V"7/?lCnqMEoW;AjArTJLU^=.sU?5)j)U\X\P>KXm]Xr5je^u"Ka-Mp=ICBZ"o(Zh1kkA
%29]ik2WL>1rCA)RK!$e8oDfOs.RJYHJG]"+ND2j9M3%pr(BQ0!_`!T3Xm97j`O-hJ_d4!S2W2DmfQuM)rrOni8C?d]mt>bRB@g[M
%=1ANC/).IabU)UgVUoR=mjoiGIW[MFbf,=^79WGck5BM_)oHrMo)YNu3J*=N5YNO:jWdeIZutA8Vk*f1'E;sr4%B6Y[r?8U#**=#
%h9@7`N:49`K3nF/[tBGtW;0lhi`=ATG&6?Z[P:VYD?MtcdbUQO48t2N35M$;l1:V$`;Pp@N\^@QEt1_'#kcMImne1fmc09+f^7mp
%_f&kCcAT\e;4BAKF2i_]I[$<g$%T<Zie?G1'+fut*Aie9Es!s&0$W-g72sJ:$eSd1AK_-Y0q3Kqf-"$5O0s\#65pP_Z.i>ha(*a.
%gcqA*fGN]O06J4)f#)pA8u.opQ.S*g-U*!]Zdo+N1>-tnaA`84g,?g&XOPgcI\)\\8^7rn.M^4"Bk8e7;V7eqQ=ImsgNikirEK>U
%B\B];pY(Vr2E731.GeOE`*Q2)qZj7_T_-WYa$<U#=TOf(=!XJ-bZduj![pW,ZA$Ko4(]3SH0Ris^W9EohL36Z/U#OA;N/j@68D'%
%ep3-Y)aRN@I_.nn(*m>LIJfm-Mh!t9b1Gkkm?FYF/:jbP]ka`^8Q*#"L92$EV"dOW_;_.lY1(1,j=q\2/=+28HiIQ,=:5ga'6R&_
%"6uS,B4M2JR]g`HUV_d_5;,DE"r9a,()gm[PXJ#1X4!;^o#'s""-$@f!;Y0i2rV8ZDDX=inDoP82RQOQ1(q#-X<EjHJK[N^#\0g3
%h`IEf_8J]@dK*)X7#'"UZ7p&^B/q;]Ykb0;B-@^V>)!K?Bk6ro2.:%eZ.\>5cbVG?,kKNu(LpE';)E*X[-F=MRCeGPS&S[[lBGG3
%JSnTC?P5u9a"k1C5F5rd@LQX?i*0Z&MD5=O9OcM/W(AkP\T"kDdo`jfUA1%EO0qhUptfn3%k/bgKcZI%lY`H*WGrV5\(*lE)"D5s
%Egs?s@C-e%Koi6'+j(->@a3!L6WR9$ckC>^[D4lpEAX]'D8WG(0oVkG6f'.,@rl%0P!)PeRJ>&&N45i]P7(`VWC4e7Z830ES+:TG
%0(L8EcerM+nVHU,`k@ao[=3PX>n%Zf?[HZ,/nJ1IE"e]5[+;3l_J7:sW!MWp;QdY:N!Fk8S1M([7+;OEN9@Zt4M,nc?/8A_0MpHn
%q(1no,U$'J63LPtPYV=TOOE8X(Q7JrDIr(PPdFl^6^.Y%/Qc=n5q.Z%#U<kk/=qQ\R4JjLAK`-^2V_[Z\Y4:Z@5Uo#2L.mA\cUD\
%BilL*N#2^OA5Nk)AagZIX.=pR7qDe_SWTaLBY:"%.UG+hmBbH-Nu6GG_>mUF:.T62V.\smg'3pbCn<<7TTY>=4M'>&k2VlU^4CJ$
%1pj$-["V'<=Tp`A,"auS#5ke9hSlHb&2:p\B[(ZU5g^oXl(3uk8?9Hi_kD]C6A`"tE;339@dY!sMH0(4AcRC+U/s6.6(rUGTkT#c
%e4NGdrlD[nH5\PV*j*p,(\4(`dafs3ZgpMi5boeVE.pJi8.3F\6''Valml;*(u*3=(($_j/?$rbmA(hWA&CL?<0hdjMN4;S2NfP@
%JM%@ea^&_!NRs*Xdu]:qMr(tdQ"MVn_5IP61Cm.+LK\,["f24L+=^7+Z:gVEjk:BPP*;9[i0TQ6&(6>e>4SR,@e0j0d8rdO.aSD'
%BS#ksDb=&g<'\)-i?_N9.Z06S_RA^#1G^0#c$WGJK3X9t9Vr=H;I2.nfAJO]Uenj\mXAbFVE2[_s&SOioU]qma,THG$OL8KgkB9e
%USLt,!'F(b&2b7I%7Oe8X$#W<+;klJ]IJ:?_CDFU&0;]]mF^'!7#h*-I@IF.Ob62&Z^kREHqYl^.e)%h)hGG?UHV<$,KO:r*j:/k
%8O7"g,6/a]ePZATH4>XWK5ZFI=ij@U1@P\r^M*JPbilGMMKB=Ca*JXZk!LtqW1lh8n`jO(I"ON-\l,O;cVV"ZI")aa_+'6j9W8<4
%MW8WW:A/hVB%2bjKX;q_R-!-).rkqHi"?nW8>onmVU?lpd`Q,L[Ci5u]:5gl-oAt9<eJ4p"^)[5F:`@?d[l(0elJ;14JSQ16/5M'
%B[!dJ0Qk02oTNpFDF@rr!:f1J::@#GdKZ*)S\h7IacYh[oihk00<dtVcrVCKh?;X$/6h7J<66&?ZiZN3Y@JRC=uT!<QorJf/<@NJ
%\hDE"?r]3p&?%gj1Q]!^2EN2L7?9ejW,elaFc6sM/1=W4qKZ$UiNU5A`"@sl/)'?@qIaR?1(Cg)XZDp!,?iQr>r/KCnKfa9QRjcn
%4pkAJLE7`[PYU%#_3tt]%4S!70M`T8)"bcC%bOdK)N_ia]-LBn'(B=e<?+?@>p-iq#)[49quWC065PkCEGAr9kA2:,Z5slGY?'m\
%+^Jnp]&[8n<p\O4XOh>XJupUV/(YpN2Vo4].,+!j2*\@5V<5mtOQ>4A0q*k\Cn$5qkK9Zg<K[J1'riV6,pd=Y""J#R+OgXu?bk?p
%,'K,/`c%O>V";b:jiV"<HTJ*),68Ea_i0#IR>7o%(;X[jc/:2^f=TbX%T)81'/jM7"tB=u-sK29+Br8q%RJK%[.p#)]e<mK;e4,T
%4W9,aHpeO>-RMUK<kKStC]LQFmj6/&"CYmn-40`SQRVmrW#B[t2QDdqgqIk@@+qkEH6hZfPUOCPNH'qJ.f3G6>U`4Mp_-PiZNsD9
%1`;Kg4@(gB/W\?@.<%756a-SJ7i7g[Otok9.763PR1G?Jk")fd"87!#/iGf#>LduZU^(*7!U`l#?U<NVHL8i\T44,"?`aAUU#\Sm
%_6(X`+f%uDp.:(Sdgf6-?n*psrX]MPpF4fK^r4&Tf0uSKOEnPK3WQ=NEF7p=p<ik9;t6i`(lH[N)QbHW9@lK++^DNpO)sHASA/-6
%k28%t/;_VDAXn^rHqVRTkk,@b`CB6*1f-7Cp@Tb?TC$i1h=,t>P!SW!Kcg)%np@),OdLdQVnIm.M1G!hS`5'QHXN)IYRE!COjgpm
%q1>Q<T`IN\4JHOZQCC+SEh[+HFHGo=F)IA67^LKsEe4fKZ?8L>!H6';q+tNu;PcO6b>BIB$]"Y%.!-G/!3MPSg26dI%2=H_g;U95
%32plP[#-FFO/X4(R`%U!&4f]._=;Xka][jcMXr(9i'Da@eVmme=KYFf('3eR<n.2[K/GWUQHUBQ(<;,K<^kr+o+JhtEF78?^o9\_
%!G5FTgtG<1`3SS'!I/5D$>`;<<5>&\?0WE3):7.[Mqp^6"nD,^kJAn"@Y[Od7MH,g=qlLV#3l@rCoN;?[%Y#6pDA\BNe7[SLHBZU
%WBc(@WXmaUh#Gcr)Vj&n]mH8W\3`osXg20NNHmVJTLfE(1'6"$o,CI1Xj"D1D1o%75Y=C42S(?RLh7.HG]T5b9Z"T=)+V29-s0Fk
%WeiVELe=\sB/1Kuk^h_fTT9DOP>hilSQ]6o44N@b+&fl9hY/1dZ\[dp2@CLKQo5VF^bc(R56g;\Y]8]"9,-*b`Qjm1$n.W@=YE7m
%CE-bs+(;,SO^_$5O)blS/k(ND:mqoI)stkn<"U61;5b%CZ"GiJN?Q-k>PQI5b]Pc&K\hJDo=/eGG>%#XZ(9HViiH3i1HBg+,fk.b
%':"l/9Dq@2!?%9//Q+:E!0RR#,fX\<Lu0))MB*bB5h9h*0r*`!(b2pl;SrF0jU]HEK%%?`0+<qdb50mO%T:S\AuW3V!iuH*@s#CQ
%<+MjdNkB4C-(qWLM:G?H>!<hJhm!]q0]P&1X,9k"KXN?U`A%CX/BghnRUH"%*>br:eY!sM&>mg_h3SQb8jOY)0\Eg>ZW#d=#"+G$
%"pL0pnYD,f,hs6;rD`.#*$Ad0#&S5X^;S`Xg#]!h'?@8b,M/2_S!i&rmBZDkZAb3p@U)k7P+f>J#kUo\5nucmZMWUCB8gP%`W56r
%Q9VNQ8kFoC_L%T&gBWdToNN3MoIA9?Fm)Rt:*B^6^)?Gd$G)\bJA^.\[TE6mfc2IuH,26NPmCC*>3M70\=J@#L`iZTD)Io]%G@6d
%q0tc?6%g&,1J'51dsue<0pgLrh$b[+?0;CVn*gKo[aGlH"urTd)LPQd6AR[qO:]Ci7)*.aO=is)=Mrp$n--YB/`pmudGZ&#BZgPE
%8;6Q(mBrUE&o.LnG.G\ig-IL3EihFiq5FuW"DqNtBikS!!khV47`9IR5!f6)"ufV^bClL$/hDGq>Grhjl)IVb>2DLF`>@Z"mJMR`
%b_;%r@7,!Em<@]j%7AVaBP+JKF#C!MQ+An$"!V(p-rt2CgZAOhfi:SD-&'QKgrGa9o<H+;/M(hq<[K^]r/JCma530()Urb6/\_YS
%j#e#@.FK&02U#.e3^FW38B:"-`AT7g=<0]]Pt1V\OiN(LA9ei.5q>kI+Q"!#..Ea@YX+g'987QPCU8(N6>$N7'bL1NV)_9k5cC=p
%)b+F+L,>Y'pe`80aY8+)5SI+3cP;9^h)/!YDJV=8Ah^Zs;0`UiOeJXPrKTDQ#376bSZ'D3BNJ[[6:b'=YOH<u!m[0/_r1^=Ub_S>
%0RWNB'"nG>"Lt:"(gkNfRiFd`R_*#NlQae0@.R3&\mXH\(l``R,ip.<`./P$6AL-&p'4IJ6:_6!EO`6Wk@,!^'2Y')VX"#s]'ETO
%5[],r2TH*0__]6cN$)"(<p5meKQgC"F_d^NQ:\m$!Lm&r,3'$G$$"3@2Q?g/1n[;[W+`C<YLl5[5p&FWST/U*[=)0"K>n7INr3$#
%7gL[g+rd$]N.ECSYgUV^!^'CuL_;M=Q=u8+P/U=\g*W:NiCjl<57W5QFqbqJ3p0q^UFltLhQlhF.)X+M+_?!)#%(3j%Z,QtlHZD:
%l[m%n/*-;^#)TYnjl.CjH%-MtC)+o2JoZc2VH[^3P"sIkGV_tGc49u0MU68q=OJ)m=X[EWLsB0B<u`^8DJ;=lr-UI7PbS7;6M?`J
%O$b:&MGmol]`>6lOqq4UU&cV9B.H72J>1_97*3Tmq&.)MeBkO@=R[OZ$W5l.jU36j!QbV'j&[R#'U!kn^B8J$eP[-HO#1Bqe)RY.
%\J^<Ggp:taV+"l2<oY,.rhC:dPn."s's]a@"SH:p+tepj5g^`iesU0EPV[Kg6eNTW8Bb1igOaN6,Yt]@94Tt9+`PM]YZ(hnUG]$=
%#LC[s7;[Nd^QiO/-uE$ZZRlj,qbCmV`1.0g[71_h+d5"1"bXuZ?k*HN/4_k>JG=_fK&r%=*#(pm;;@Nr1Kc/c-q:8Rb%E1[%RH9o
%Rq8W6#=Z3s;2l5!g1Dc[9LoS8WklQ'Ua4Y_ct&n")^VtQi$"NT9m?;5Y9O0kLeM/uWg)nNADOoGe<):P$)+.MbePc'F(Ii1p=f[W
%)[os]gR?n?d.4gK/2k;"`MDF!mG#-(JDs3qb+AN2NIc0[K1(t2A7.f5T-&lh6EnNb_5`*#k%JTm,I#$DKfTH!3YE2UNbUsaeJeuK
%\?^^N15;VJ*$?B#B[F(iU5j?mLN%)RI]q3AU^WML)<Lso4V&@_H0iJ!59@-neir,I5_T8bA[EPi\WTt"H3*Ddf[?uoOhI+&cH2;V
%-urf[>B@qD85`VWH[]7dQm*uZL-[RMWUpMT.C0@@lS9e3r^N)^Gn"p`1a!Fa)#K]d$SCt6=,fc73$ZHEb6#a3@AT-P=*]7j7\G:7
%</1K0%TJ$]L^oSW"1ent<Qu(3(bZ1L!0!qt1_]-p&U?.YaJB.5!"a/tCGRRF?3?IMe-Ae[dj2Sl'Gse/h'`@3bbTcmg%AK=cWKKS
%%(Lk+43>;oCMtS7/'>?)S7lNg2LR]/rdP8)0[;kRJ*U>^VBC%/GSJfB1el-dr#:KD'4P`^Pa$8X+P.,Z>0?pML'KN0ZI;e)cV7e4
%kMU+%EC<n:*N1`gP!mfIN/Qj1V2259e[IdQ_;AifY?<`JZus6g5[)WqF-0^.^s'rG^,Icd38a-m6;EC/nQt?:jMs3q`p'0]=DWY=
%qIU]j/MAeU"9Eg&$EZ4nhJq->AB[\^X!^5LbL3@#fDX29b].WC&PObZIZ4Xa@pM.UB*2A3/G:'fPpchPjrs=0)2LaS%#]rGJaVc4
%Whr$c9QO9;7_,/-9VVn.#KU5Sj^C/W"Dce0=K=Ip@3A`l7YOdVM%H@p77[klW1tQ$^b\t(!f*o4\>DuDcFO$O!#&5.rbub[PS(d3
%:esq@AjcW\3J!9&^+[ih:`gs1!Ygn.f6nYJCF*%fU,#\,G<OFu?t%VZ'5!Wu`:ZQA<8ak\["_-qfF^]`780;7.e*a8Yi*U=Xil_H
%Z:<HF]8#C:7*Vl5+St>(P+Ett^U^bO:(]#$HrSO)/'722dk%(4a_V-hFF.#tHWKo&FhfX;L>?<VVrZSa%8VCg!sdM.`;Z%*7T!-U
%EYQImboj+k:mI;V[9B+R$kb]"/nsdBE>lccVnH:F#3j%M;q2peFb-t[13MtNqW53$.$4Iab48uDm>oMK*["T>D*S2$mR8k7P:6\s
%V7ub1"?pON_esGA+T0a9ht[m[;?`\?iFHYA\/]nA#7,#L86Dt=??cuLn4MKaq\M-d:*mYRnrJ%3-E5(R?J:9J^I]m)Xj$fi;8Rh4
%qL<^7!T&=8^AFT8go2-79?VfUQW^peZlmS-\VfWGo#q1D3\pjg-!;9YK=q9o,F)q%DJBpm6G@1$4),98$d_/8?/*`om(&UWmf\)P
%+TQ&7:;W2e"pn?&5U+^]A6RYke-ilNMkr(6a8FuLdT*\Ign;e^OjSP"P!qK]k[.K;=.Y@-U[DQ496=b1X#"]:=*!Phqp/"HT,UNJ
%FteSY^7-eeK+DRu^8*HZMAYNgTU?%@!cJU.g^%)N7BcVeA2c[Q%BaZbP7kPb'AR8#<q7`)SI)oOd$2?cBgGZS9n^3S>C"dDnMJGP
%LGXlB'T*"6(s;oEQNRg?02GHuRB9jpgL\&a>p^K5esHc))VZkGClE[>Ah8`e"AVu%[K\1rB&5F+l]?U;5Od7U&h\(eeZe,'2.)ak
%EcLunnuSUR^ie]]aTA&V(k(fSWqWR6QlZB+:g!Fi#V&)upiBsi73S>Z6P]aC^'b;dU`k\WKRBX)X2GjX/^SMIW+t-RUM]*=%)Op'
%g^D:k:^SqGM'sNr.(0=W9P(,3Tb*d&O9ugYE3e0.ME2453*GC=MmBbkMNTdS61eEJq'GEYp/Nrkj=42U#$V<f*=MGd'ej0]Zhf9k
%rWA-;Q^&JdT_'e7VDFLBCDX';/rP1jBG$IWR#TN`A$hma?h>Fc1FppS;U$LYDFn.<(N+me*qFVUL*^Oo[jWe>^c-n?*#\H8>L\rB
%I^^%M.r(,IW.>eUI>_T6EO#(*Z$ca4;%eHA:ufi_l<hWS3`#@5C)`7=o1H3d/.2L`4>#rHL*R>n[_a*e!#1%:BFmrDh=@I8`V7>T
%)1Yd>Hr2:?/+SF3R)HfBA9$3C!1-ch%a,9=Vui`-1t]b!&uJU\=-[5?(m%oN$J%"4:PWO(p*rbli:_)1ln>[(O+*?hU#HY-++D5b
%&ssfekC+7>!STa(i^iptT9?ML5iViB-<BR++QE:&nd<QK(X:M[@uDkX$<=>TY^LgpCfrX$0LkR]2$Lm@"0t`e`'+_aNMdp+</#Zr
%1^1[<,JOCY:al2I,@1!#(OXGs)!BY&g.,YAMtm]n,.37F'SJhC2fp_9Id8+-r1CT7;!Ia_,"[*S`9J+qRSnA2gm6X<7p0TRAjOt4
%#\0N:"K:\nV@MeOP([u./KEDFmN=,rX+;>5D*PbnmAnUo"aPm@9]PWo*7QWd-&3B+Ul`JqT6,/CP3-(e/0_`.YhV+4;,;d"opaT`
%[:@mka!+[qC>4Gnj>)SUN/^<q7<RW[,6Q?M=,b9Z.m*3UOg4&]<4f@WnXRS_3LD5]iknI?2Jm8d7V?o&Y[m%;Jg-"=k5c1eNSXKM
%N;.:r4+X+nZZpGeI&Jmg:9rkVYoM6,2u,blnYt>fVonN8FUmQ)%kH;GYr=]`O,.X.c^#Z:*lc`@))Yoc=@k@+]41)<J5N`WR/?QR
%!onZr'.k*BC2&+Vq5UnlqXiqB@ZT_3.mojhP-?9,(P]L=7Fhc#4F.W=Ba9^@8To-5n]0=I@RP63/9;=\_^26@D?:GD;+#rm+L>rn
%JbT!\;GWgPlI2OVf:t\=Gq_`LA=)a<=>B8dL;1F)a$4>5hrU5JZGogGj,dXh9\]IQ!!-GCHr!*hHK5n^6]OpYKhi;'hT-Sk<B"u3
%EB'p=?;NtYe.Dr#K[3"O-K_a.2NV]-2n%FR<LCH0nH82B8KqKF8XuQ[l-Mb+9Rtt'XEh/ZSB(aU'hVsS$D?U9PWE:%Yc-6@iSZHh
%<"73Fn'kc74m>m0I%"&rNn%:Wmoh+u_UO3;eYQU.]<bY($<B2tGP4L$TWrs6gCsgSXZM#?1n6PXVkd)'lj0Y;iO:U:GD,Nn7Jr\&
%TG'RQ,)t5mW-4'CJsk!WbF779JVmb?P*HT\coP;YD[G)(ZJ#*aT7cDp_V[rgh5-']'Mcm.K\j^)Qpf*`)Oplu4YS4ZaNZt`Zs-50
%kRM31KZ`h<Hc_3Zj>.tS]QC#n`b7YPgUn8`EQ0^OMjSTl#g=i<R/((`-=S!LBP+NFk[gVs=CIBPZ'EkR&1&;BGe(bsM`L*^;?HaZ
%7TuEm2P@9r>TR$7g=6cSI1\e/f9h+lB1V.5%DDN[)CLhl#(:qM4o6!7nfgVBW6'lf3K^A/+g*%*k![G+d#]26E["5updm31!PhJi
%;"uN7G_@-O#iurEFMjY^<7HhsSe5!f&:;E4O0C88S9so&N"EV+c8-_lL/$"1h*KJ9lj8=4`2K1sQ65X;,%G9\llK_bHP)6!_KJ-Y
%<4g3FS1($P/NeWB:?:q6M"6L93Y>.HWof&nc5<)ob<(?*B4T?s+MnLHZ5l-BUki*_'/*98Fs[DdVsap27o"i/']J+JGki*#=Vr5u
%Y/^!ogYBrp-DR-:<#)-.Y^!Bi?u=<DJqnmU7^0\4dm/C2qr44;$M38uM`k!Oh$i$_&,/WFFYe?7`8;dufZbNK<XHmf7PKl2R1d65
%S-gR:B[t#S-Z1DGoKc8G$c6RG[0N"%d45Z)JEq1!HL2ELo\mn)C"DaI[q44sB\Gm,-!i$)(afDD;%9K]7DLXGRPQ@?33!Z5<T;49
%A;P4_cj:S-$N-R\$=nI*GNQdrZ,)*[G'mgJT,GjjU@U1/iA-BhYS5[cCr.aB5En@>L=XWZA?rlJ5o]f^_RpB23+8&<!>dsYo=tXk
%9<f-N6BU`+[cE9mA@)'$,UEqaadj`rAJ=S^7rHg%Dh!P]U^NrpY[+nt8,UDa'"nW"3FO9_2YA'MfqErZGgHp(N,;EMXlgoinGQoD
%iJ]gboH'QB65Zn8*DTGL$(_"m(s<YQEC)R4CrZh`3ME/lVR.RBcgdpXCNB][ma3R=kiDrfS.M,2C\*-u:?]u]J@M9c2k]^]Gd1r+
%/Oj7/Qn/o>%#'bZ\V4/b'\PjpR<[f8g?UaZ[J.UD5=*oCjE:$Ah7R,CJ(Vjup9Kh,Uh)3cfh[1m;PijHe:--EOe1t$E;Rc6:0..X
%3pro541XQM`k%erIceF-RIW"/lCH^W-UZcej`bbES]ZJhK]#RY"h/N)?)V]m9=U<@I!;V2c>&1(0C'sF&rS=f+-358E[76;naBg^
%cBAt2e&iu.q=?N;hT<*JP4:]!p=UiWe,.h_I]!3ga9$cj6&0p9+Y!':$r>SELE,gfMrMjekYO&2gl2fcUI,4\JhtguQZOZ)*ND_e
%ddeZtoGKD)-;B85e)f\5#X!O(:S/0IBccHER!U0,\+G<*']*>[pHgi7XN-;+3M@ZF`oKO^gk_4;ffI#XcV_!/?bAR;7o5>VnI^4t
%2sEJ#ksR>`Ybr-VoqJC6\Fkg(3ml\<g@Jb>BMVJK06D<UQqYI@7+)S$oYF3!p6*>i-/Z,VNU?4KT:FXP$hfRMgS++#69ZJQ`UPrH
%F@MA;8/%cm-Sr?OTC2<P4+-BBCV*C2md\(SD"2^MGr)mI"SChr*)-#XT=rEpIq-NC)"`<=CB&jKhdPsI.K5lE!;D3K#9W?f$gLo^
%jOTJX!$F,.Y"0]GPISD5WgQ`GV.Tj>>C"9^^,igi%j=XP!Tg5TGG[ufcgh80V8JDZn7]N[gh`[$BF#p:N2`a5(J$bUUTc"Hb_RsM
%!OQ(tATQ/55FQu[;URK!ibQP-LK`.Si&mAfJ,H(/bXkS!8Z'-^LV_)RE0;@aKF&-dJkNf80f7ZV**fKKLCiIj)0&JG#U$dB:l$Fd
%jJmI%ZZ&Jh>],K^ItgV&iN[BmN#aOUa3"@$EeLr%,'V%hPEk24H-&?lEjD@.A18n(MSm'cd^+0L/dKeI1E4Q-Jl^4)0h.FPA!]1n
%BRHD?4.FJ\GiQ'gSD6+P^Q-4KF)prDF?U2tccHT;Z3Roc6['lOPH2d&1qF>B3TN`7=Hjf:V3@.c-#[faSdlqmQS?Q.Q?)2eSnY4]
%<:k?D[+YY.2s./n*6[Nl3m"fM9!/uc>pmbGaTU`^L,mam%KW!D<5spG9m_'WJugel\jU[Ae^4PS5S0eH?u0O/KY!=gnKdKQ0G*bg
%U.7e(aZ+K"dlI&C0$g(ULj-/e\a4VP%A-/Ak7[VSF8d2mJ3JIU7l9GV&c0.o%`+i+KBVnQ3lHmcrM!*:Gg\T5UlR]"UdH?j:e`"$
%P],9n2u^tE,'OZ*3cp`1Dl,n+l-aN3I%:bPVapdOo7S0<U*o9*:JQ4TR%?F</fj6!RX-`iHMjfk8aF4QlES#`S?OAZX@k3nZI#1:
%[4_f&n%?+W2sru*q^+A7B<kh5adns7-Z?1UmsC,r+$@@lSZkUFI.@o^oYh'Yn_UCU]q@r?fp(rYb<@NLNP5-uG^_p]II]fKPgUrL
%oZ9nrE`h4tY%7Ui8?p,ZGN[9FppD+\mZXdMAFt&%^JB=JK1"Fj)F"PM:X4!AgAGJH5?ZE?13J@nrD(Obo#Z:sH2AiPgd+TrES$`q
%G:*ikbEhmmKCD*qf&E&WT?>m"1UfFCXtPT=:WD%N<q`>]IIh`!:I<g.1;iP([jO>A:S[7FmJ<os%XkOuoBVJ=+!qupPIm[S=bFHA
%kh)5^($_3f3s*BUX&CH&!T6Q3/9a#HZ$b\3:m'Y4oup7(1;AT9&*?%:Ai<SY<Z$UT_]6o4c>@2k[j8,;bX2"Tq+u7.g=C[XL)Qq(
%MkNHl_+&?#QrfPC[e6ni5tpECouT$LKKcDB,9R,ICt7Wj5Dls#iG6NKfbYjGLg^=u#bHnp*b1Ro18gi^0cNS3o)hO/9RYrlE"/pP
%"Hm>nq)BCV4uS4.k;!2RSkt/:m'_nnBOBiBC(ph#FtQ07meo$D5?"Ar3f'ft8A_6(??IM<';!C9U+B.A<r"F!>P)?l]kP6@?&22I
%m6rV-21JQZQF-,JC$s7"4%Bti&7R&TmibYQD'UI)EiI&pWE9fLqO?,HU@Os%3>A]p@H<-UJC.dA2LR8Aa@+g:`7Bi`S3h.M45E:*
%rIg[Us7$*;/sAMuVP"G>WrQ$Z9L(""5e;V_f0!%U\P($fP#$MZTVfW8&!1c#q':Xt$0))j)9Z>1"6\jbpMA642"9_85@-k`mHN4T
%aaWN1dSESnR0"NkVDB-L(W]&)O2!JJhK6K#pGf1TeHAF&U#-_^Ve2m3#8+'!;YlXfDGn2C@5bVA&g\t!;-n-h7n]AP`7$]D@WJiB
%YN?gQk\3b0Z+6q+>e=)PD6*Emi,s>C&N/Eg'MQ"LO"8O9:n5M'7?6du6.r#[oKStD1u,nYPJML+[ujj'H`:R]FlXr&:V304cr$*Q
%Sbb\GSiZ^,IG,s;&7&+?MiV?JlkJmR3@t&he:/_CbC+gNFF<pQ*\QKnaUE2&M#:5JiL+?>TH\@^928e,L]$3:9?PARi_Zef'I+)(
%M8r_=%,?lb"E4Eb)ej,PK[MjJ(\DaWU:-g5(MbQ0N-Q9*BKO2QKuf]]>rT%q@03--!]=1^?*&p8,3\@IRbDR4(UUGe@BaAEe$87L
%'LV82>kAPJ@C[AMJSZnp:b0H-4k;tKh@:'AYRhJMXcUBC[^k[!L`N0-=WDP-_a(uCBfW&([+<`q2lNYffe,uu#DK]=b"1kbGqDm]
%b.O&NC0(2TEm`Fp/U$eOcLT;OQ>^]V\@pkH-?A!D"`LC#Gk;[b6f(Pa"u`R5j#<)@+SV>(E%!h_-CI]FR6A&hH'fV"#"sgJ"CuLI
%2Od*D+(O4;?3`?(<cVnbMMJTP%Y.M8oRM<[Zj^]PAj;VC&t7-ACEKR@]XMEm)RoMOhOI&S::n%5;L[@^@@8#@s43,C4T#d&.cS/J
%9H(a`%tBRgT]f<3aQH1j<(>fNA=SA8Y!?X!3XaYGpWiIlpQ3/AS5&6ah/eX,\B<_Ll0j(r^U#.-/j*>C3Xl:a:4s]uA=1N`@W>J7
%_T>EmairfIRmYg;+<MC`.*\N(&.Dkk!+b\R^f.,Za=[4`1K^"]otDl;Si?ed.%9N/(r>IJaEs!1N(sIF^XJt,'(YB.kpdWJ.lk2a
%;f_n&:6)).+gNXrs4]CKi-ku?Ajc8]hMS,0Z3cXD;&M]X!&Np7MUKJ;KK9COcdmpp8pn5E=EHSYSh1mGeF#&)$mD`9Z"Q0HPDPP3
%Xn,jg="+KT)D_Otl/hGPW5+M6aqt\gon[=TU7nX;4pNrV`4`5pOG5&ND?T1IquY+H6GEs+Mo4uQ<hp0u.DN8`5X!$ANjYA5S63\[
%mW%QS.5937$gDep4D+0"]9"$T,?$WIP%"EXoZEWlR$]X'&d:Nuk9%)":B0DH8c%Pi3:>)N(O`79pMcWCpY,;X*J`HllOV2:6\Uq`
%$1A`-T'?-h7QrBf_rUe.mVmqW:5m-s@iWk86$<_kn3]%?LV)b0Q(I_qTj\Hb"o_>>NY$airC[uqT"G0e2)'LS-$gV$P9SZ_pA;b2
%D.rQejtF*+oNs%1?&56;fcP_39D%:>InBABIf8($MW83]E0,haKu?n9U8<U#'`M3I7ZtVG4QQ><[>g3-H618qUV&>XS\b4Boj_aL
%O7L$@)5,k)afck3-H;OkY>qu2l,BN#!&K"kFSiVC-nT+.h^fm0R(Df6H?uPDBiHMq[n0D6$PM[Wdn=P?D9e8aHb9p%f[-PpEt>"c
%)7ZK)V<d"[IZ91eq.V6&fc!]VrH28u<%*iiP8C'f]inrp0"l:f_^_8Zko@8!>I.l[TrPPgQDclk7Zksm3^DEJKnrE-^2G%R8He?o
%?=WmZm3&O(6UY.9iE6<LS>gr.2UNUc.c"OIcUZrJ#!.j>O"EC8U^'nG0Tq>QSZ($E?P.:!^g%-84g7N7H\.Uid-8B?f1(.<NU\:K
%Lp3>kGa'DSAm)Kqj@u#_O.lm+j@b@e1F+;2r#@U3TqJ;4TZFphW,UtPL!1W0O$E@bH@5.5FMHbccX!/_Id\AYim5qs*mX)X]M\Nr
%iVXVgF*??bEkgKLV;E09YAnbua.#P:EFiNb>$Thdks;8ni`cKX.7s`C;&#l%^tE/=/!68'<J&Dp[:nXT7$DS4Y-K9HoV!_$b#I$F
%_<:,mVr<gDi^&5!G)JgR8=@mSBR2'3&37<n&W@o/'mNTsD),Y5<)nZ2q2#eghFL^;dBi%PikM9[O?oNS*fDcff5uc:4T6](:rK;u
%VooW>n*0)G^-n$gr["]9B>hkgbAF\*ZhbLj8jGbJF40XR$/D=];;QkpdtQ);J(uuD^%eLWVmh_17cnoMn8YP#)0)M`TrcKj'p,m6
%;/@1YVC$^rC_*EE8D1n0Y$HiG_I>#B'u80,U5.:m,Yd4kLT#En`+>24c+gSLc@'g&[<)&38Tkldn#_smBcYCC>GXQU/Rl%B5+eZW
%"K/Vmg.j%1\'7S#a>'FWQBl0FST^K4g\m-Apgl"J-DbX-H:FoEb5RFGqe-tA(A)=$d0qi87WMN5&sY,Z+7W`)5!:bAl0Q<A?fR!=
%FTh]hR=,r93XsV88Ipa1Z$VO#Y\i_'C2qghpPSCJ3+)"_brLI&3$/fCF6OOiNk,,_mIJGNGKbH\+8GA]R,TJ\bpU+ShMH&DZC;Z#
%37#N'-aet)^]Q?C*JPf_%0!%:m(U!R?q@Rq.7.'8p`#WJQEWq?;'K3U@&,"Y!4d2DX=so_g;Vo(>=fK?-]DtQB<o<2!GIQd.J"Be
%4!Jsn]B%jCHT%KGjue:3&^2)*$(9"[#Y@0]_.oQbEaiQ",,k".4YWWdg8Fj/R=Xee5q^.'O+4qV5/(80i]]Qh(qKftT8dp3gkdWK
%e5>Wt^gCW?Aqb4R+UDFWl(>[m@V+?h-)FraQ!7ZC7AWkE+e+(_'hHUT]kB.i(gd@[;R-WXPo$oAr>Q]D,g0[:FVrdV(k8gt4*#=<
%EDu//7%B1:9N*N;$0nI`"bBonET,[=UTThQe9480((rnhTe'>Xj&smm&B'O>h.ki'+J3TFkcd]2-Z:d"Jh5io-(SIADr%#.qq(u,
%7euS8=d-^n:"^4[?`7O@SD=Ij!\+Q1^8BP\(Atc\6[bSgF4/jS4dWsh8m\TqA&[7?V71Q/4.:<n$TKm2<h`,2q=t0@.0c!fJ-S&V
%q`q4I5TV\4h&%WpYeeD+c4PJIUn?u@;i:$`ELtAJ)#4]VfR84o3V6Y%H2mIT]qI]9JPE=M/Q>8P$S!(nHrd_lP3Y<P\qgP^]!kU;
%'5Dh)U1qO=7qGZQhcKR.GAL)o)ul"8FRq[)D7I2,ShkG44m"KT*F$S]rB3+8nu!"rgNUq+0E-(d&!t>lV8G644fH-aC0a#kj10Ff
%Ss7^809H:KB/$(=O+nOJEYA3?q$/haU4nm@KVAOm>\5%@C;l>*L(tpO@nGqscRGlIP[CY9MfK_c<_G=bG@QfM>EV_s9``\#fO(t`
%,DEBjJ1h([4`,7+1^e`,$71U7#MB@''gY5`aW2%GC[gNQ/*cdBdeDq6=Uu`VUm+U?*P-7e7l'R%PG0*?^JLYh*>o.5SH=M.b$t[S
%3bco:!G(mj->>Va.+6a4Qh0?m!']02PLY_foPWe8ajS!E0i];0OS3QK3N9##\8K9k`gjE`[UG#k](9W_OlUZ5:"[X'RD?B'Ns]&*
%K^(q`+)P*1[r#BZ0=#JY=/9HIo?4\iC5p&-ph^bP+3f^PF2ms!>:_;fZ^d)+0hSCCdW*@ieB,65`&*=>InYOe-#]t^&9JRueduj%
%HW3``hIea;DoUk_(#?Te"edO\fc6KcZRR5\Y8\r-%-6kp>WncnHYF*VES\ZEDqKrP/4$:5!$Pau[[\iA6S`)N9&<]@aKU4M-4WFR
%Q)BIY!J:cpX;$"rBN`P+[u^Ii<6X%Tjms:t(Q?s$`p51nmOd>!jt5IZb]`IFi\Z7,qSbF2A\@.]a!\O1+(kB2m*P@'UqEIfO43S'
%BfC;N%pJ[+#6hE)KQ?fiaJHk]C2:FXQ,aP.*;]au"UOof_4Ip/V0Q?s^?`Y2?-q8(aR)1`#:Z&#gHQuHRO:*IQ2k@[<`<M(Q]6u2
%Ietija(R5>nf2gcEfLZUWF!lA<hGNrc**WQ=ai$+Zg!e)R`fP_jYX_m3b5p;V<.@)E]S8e/\Hc8oMGbSbS%tuZ[@#"'jqHoW@Z/+
%477SPQ#%nQ(n)baefa_tdZCtd-r'':3HMHi[5-pgrgQZXcD-l,ht<0IT6Y=R[0Ng;:6/+;rGJB*>>hAEWRKq8+J%9$".<s4jR+s=
%R2RN/lECu?@($[cH]7h4:'O''8BrM9<<oR,Y1=h@=DO",XI*<M=f:BJMr(gY'3hB`Xj[m6Bq=S_f6-rZ3XpGL[_A[o0D5unhY"m;
%T4"RdYhO<1j@d"p'A"r),H`*-i`VCWjF-J:Rn[jRBJa`Sg3&UiAtAQ`-:&^IS%C=q9S(02fjdV<S.0<DY[K;4@Z.%eLrW[D&<4aa
%B([K<ou)[:UkF<P(n.FdK6jB/D#EXALj&Vc*t>,n0:GcaHcQ=I"&A<XL.CQLFN3"W3c,0_G2D"mI_Vd0rki#Y?t`6oYF^CrV:8p]
%Vu[).m*m9K\PXf:U0CFB01tTorhhr.p.;Uhh;o%=\]#R%o'aShqV4d<mrY+KAlS`RV-_u2X?o3T.UCSJ\CYQcT%7Y&GVZA++bc]*
%+DRJK!kb@Cd<qXoVBCHX.PpP&J@6'M?!pcLl_ERXo&glE+Xu;p#`]2L_$RnYn!7%U'MEHdn5c20Wjt\L)b3L.W)8qb%Q:qZ9R,7p
%POJ\J:UAiF8Z7/V&s.eOoeKXmo8V!J.SAsUJk7P=5^Os_%TQ.Ah)3Idl_%JfASmqtC^%aN:s7RCHE%JabM&j4>6I!"Uokc?qd;9H
%+^bYP(Mjp:m0[l65X,Q3(&TF*&oPSC97juVT[]CNJ+^;p)os9Z!=Z<;IT'W7B"gA#5XE(*cn"Y_?l=L3*<m6dnnK[7<0Sb]NKr?X
%9Ju=R+=fLQN<a8TEQ93L4,ZLV_c79gBjA8L\T!7gQ=UhNa%lm/,N;hgCOcY89VGn5<FBtn%]2qOY*GQ[(`Yp\RF!H5>h<.pkj-6A
%/umuTB(]VV)gh!@Ys-!2;31kp%mZ0-f:JScP]HR(dVZ!18m9m."@LG(-j5eM4PaJ0#f%A0DBCe"CL&[u2&Ybe=\h#<@/$p2LD')%
%Jdt(`E$2CuO'0tf7-b3UqB.aGQNTtoUuRL/7'll#pss3GED6UE*X+%`%:C3IoX"7\K9[Id6+^(GWO"[#ACa%R9`e+8:.lm@><[>.
%F,G+4_LeQl!'KNj"kn\tjr1[^Yb/3DG6hfH:c@^H+dA64KocH[a=Lh&%8175:nVA++mM!/8ho#$UThj#r:b$r_.l<nMkVMtKSb13
%VB&]35X<sU$M^G'^sRU>nDI.g_C=ooIK4:^k>%T3D1l2TU;=uX:0-"2pJ.jU495,?O^*tXMQhT)@"Qm>M"6_V"/<?`Gj^AOW)2IK
%`uR+3BVG_M7'l-i^ho_O#LX'(]lOD.V+?H=3)RCY"pPe(Ls6F(p-j!kAIiX7_JZ^n$<kPjAe=ZeB\?kgo455hXl*Kk>?O3Zg+ur*
%82.q@!>#s>NW!7CM8b`ScTj>m\e"n4-*@_b"t)EUT9c',;7=JZOEPUl@@r'*%VTutFC?B[>U1N(I%jPNbZ@@3l,-h=3LkfT9soR?
%2ae4&OFg*\O<?$=9on5D83J)d7b&ig-.$I/rpqmp3CkiZp5REe-B)ok5^O5fIP"D$iC[Wp0C&YWQ)cPA"ir)=D/=TQ<bp\BOt03I
%\30Dp8Bo_F=Q!08^^HNl%=kH:'.jm#;cEo'P+kXoP3e^9IV!KUEC-D26(rB#&o>/!Hp>6,N4s7D&mK#$SL*fKOij[9#F<3O;Qr9q
%]h"&n?%SRl:jIVl(ag-"S;0jX^tODe`2(5-&e1o0J^dR#5VNI1+B7=\Uod$Wr('[d?U=>afmIC?-^?rQjbj%JjF=$0W>Z=^T*&K*
%7U>B02!qROm^L97)8UbP(M4)Lo:@ef&3B\397TbdKFR$H837,=%=t[_oc!s[@>jDgUBN-?B[7ME.GlT`N@.mSFi@KujM<Va98iTQ
%d@eMIf8MnM/0&Bfg49t=;*pNcm?n)O#>s9H/8_>%8lFrY-(5M-_OkU2SmYWH.3&eD5rH[RU.IZ:"hu]@LD;!QlOXdG!9'KHi#>3k
%f$mH_'k3o`>D2bVI7@/5YbS;RLIb.*YeiYW95T5lKMIn:%0RtNS))IDXoupZ-C_IVWgI]o[n1*-""cil8:WFU9cVTCB!uW.<.u$"
%eCXH.)$:#h'HP(2,(/K^Z+Y64pf!l2QY;UoCO<a$U`GmtFb5q"(*nj9XKb:i`i'7aWS>2]<(HeK<^mnFoqm(+[7r\Z^')Ol3ruk3
%#BGS#YJkCk]/PuZPM9Fr;:o8"lb[?D'#f*Cm+eZQ<,]4D@*>SEe?%[-<O:.d]"NYE';F3M.I@fY&/ZN@hC:b,C8WIuI2l[g:aAhk
%I,dMb42UFJ8(a!mEnF>o38[!u#-c(PBm9ubO"I1aRC&V,&>CTP=,<$q)mA9W2kskks+#MW#&qVHgg:Wu(]r3JBLe`$/XRGnHf%]h
%5Uk/3d4E7K%D`4.*fr/R"I&e-`kHSo&a@58!pph838>8_\suT-Ad-E=I4lXBblFdq+bduG4F&XmfObHV/7UW]I=a&.oJH9@RFUZa
%$B(E.'sS"3bVANi9A[*pACVqn'L:i#^/1Un"Tn;0n,&RMQO])X6beVV1]>qD*^`ZJS>+/3U36=_I4sOq#W#LAgqr0jR4(s;6H"R;
%qH#g(h$Q=[*+VDHA_'.'^tjif57h/jP_&^G`Q8Zl/Up=5IL2,<BhME(e$#k_2C0ilNk>B`RDLLg!KnYTF,U3IU_;_8`+'*UU+:mh
%Q5WGqe?)I,.hDle9@.J>ZY2t`ieK*Cls;SZTh)Q-&2@]*&Q)G`^gaP:<Oe#]fq-r2Z(EOpk[%\%'Lf)#,7G;\RSfCo`2hT"B$cE3
%eFkuQh:hVsrAH+Y\.#Wb%p%pc`7c/eP+B#``Y0.MI"*Er&bK/FYZfRJ8?p%fN%sbS?]b#=@Q0L_"EhW7Lti#=r$N<j13VC8TNa+a
%3g.'n0`kBB:(2G)G.G+.LfneQ5,qJFTkr\#?o7j`Z3^AD(`[q&e?!0K^f1@E.I:%D:oE["i.[.<Z9F6XQ'u:t6NXQOVA*\O+HAta
%Q"ctf`=G_SSfkj7+$;`>!oWI]R>Ptb&C5+?DM7+&VjXu@iVQBHK)cSd"U.!7MViJ%\O]+'Za_4@VH"4OZO_od$c3t4)DRo-[F9*]
%@)nWakGQ)5-LsXN!QRRpFr<eCN(ZVL<@=8!MsnP[gJT7CH?7KSpTII3SCiAt%T\hek#J1`,[gd:KV7]b"d;3I38bnJ8/kiPbSrQZ
%_MG(WHGa;r:30bHgN&DMWE^'%)ka5PGmi4Rl2V=VINj*FS?Md4Q$9>0c#<X2s8;9aqEKK*e,019bFedu5Q%GUTE!rdr86smq1&G@
%[pOVjJq*XSs74KcrBL;TQiH6`rq13Er99jRm4U^(qX#s9nh:%>msk0-^](_8YJ0u,hu<Ijs8K3Oqs1_@q_/!Gh]]g1f+%cP:]Ks7
%qd4jKe,KXhe4JB~>
%AI9_PrivateDataEnd
